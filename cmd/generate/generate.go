// Code generated by hertztool.
package main

import (
	"context"
	//"fmt"
	"os"
	"strings"

	"gorm.io/gen"
	//"gorm.io/gen/field"
	//"gorm.io/gorm/logger"

	//"code.byted.org/gorm/bytedgen"
	"freezonex/openiiot/biz/config"
	"freezonex/openiiot/biz/dal/mysql"
)

// https://github.com/go-gorm/gen#query

type JsonContains interface {
	// where("JSON_CONTAINS(@@tags, @tag)")
	JSONContains(tags string, tag string) (gen.T, error)
}

var db *mysql.MySQL

// generated code
func main() {

	//init mysql
	c, err := config.Init()
	if err != nil {
		panic(err)
	}

	db, err = mysql.Init(&c.DBConfig)
	if err != nil {
		panic(err)
	}

	args := os.Args[1:]
	if strings.ToLower(args[0]) == "openiiot" {
		generateDbOpeniiotModels()
	}

}

func generateDbOpeniiotModels() {
	db := mysql.DBOpeniiot(context.Background())

	g := gen.NewGenerator(gen.Config{
		OutPath:           "biz/dal/query_openiiot",
		ModelPkgPath:      "biz/dal/model_openiiot",
		FieldWithIndexTag: true,
		FieldNullable:     true,
	})

	/*err := Logger{}.Apply(db.Config)
	if err != nil {
		panic(fmt.Errorf("UseDB fail: %w", err))
	}*/
	g.UseDB(db)

	g.ApplyBasic(
		g.GenerateModel("openiiot_config"),
	)
	g.Execute()
}
