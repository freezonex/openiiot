// Code generated by hertztool.

package main

import (
	"io"
	"log"
	"os"
	"path"
	"time"

	"freezonex/openiiot/biz/config"
	"freezonex/openiiot/biz/middleware"

	"github.com/cloudwego/hertz/pkg/app/server"
	hertzConfig "github.com/cloudwego/hertz/pkg/common/config"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"
	"gopkg.in/natefinch/lumberjack.v2"
)

func initLogger() {
	// Customizable output directory.
	var logFilePath string
	dir := "./hlog"
	logFilePath = dir + "/logs/"
	if err := os.MkdirAll(logFilePath, 0o777); err != nil {
		log.Println(err.Error())
		return
	}

	// set filename to date
	logFileName := time.Now().Format("2006-01-02") + ".log"
	fileName := path.Join(logFilePath, logFileName)
	if _, err := os.Stat(fileName); err != nil {
		if _, err := os.Create(fileName); err != nil {
			log.Println(err.Error())
			return
		}
	}

	logger := hertzlogrus.NewLogger()
	// Provides compression and deletion
	lumberjackLogger := &lumberjack.Logger{
		Filename:   fileName,
		MaxSize:    20,   // A file can be up to 20M.
		MaxBackups: 5,    // Save up to 5 files at the same time.
		MaxAge:     10,   // A file can be saved for up to 10 days.
		Compress:   true, // Compress with gzip.
	}

	logOutput := os.Getenv("LOG_OUTPUT")
	var mw io.Writer
	switch logOutput {
	case "both":
		// Log to both terminal and file
		mw = io.MultiWriter(os.Stdout, lumberjackLogger)
	case "terminal":
		// Log to terminal only
		mw = os.Stdout
	default:
		// Log to file only
		mw = lumberjackLogger
	}

	logger.SetOutput(mw)
	logger.SetLevel(hlog.LevelTrace)
	hlog.SetLogger(logger)
}

func main() {
	initLogger()
	c, err := config.Init()
	if err != nil {
		hlog.Errorf("cannot initialize config, err: %v", err)
		panic(err)
	}

	opt := hertzConfig.Option{F: func(o *hertzConfig.Options) {
		o.MaxRequestBodySize = c.HertzConfig.MaxRequestBodySize * 1024 * 1024
	}}
	r := server.Default(opt, server.WithHostPorts(":8085"))
	r.Use(middleware.AuthMiddleware())
	r.Use(middleware.CorsMiddleware())

	//r := server.Default()

	register(r, c)

	r.Spin()
}
