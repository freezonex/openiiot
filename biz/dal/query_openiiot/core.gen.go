// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query_openiiot

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"freezonex/openiiot/biz/dal/model_openiiot"
)

func newCore(db *gorm.DB, opts ...gen.DOOption) core {
	_core := core{}

	_core.coreDo.UseDB(db, opts...)
	_core.coreDo.UseModel(&model_openiiot.Core{})

	tableName := _core.coreDo.TableName()
	_core.ALL = field.NewAsterisk(tableName)
	_core.ID = field.NewInt64(tableName, "id")
	_core.Name = field.NewString(tableName, "name")
	_core.Description = field.NewString(tableName, "description")
	_core.TenantID = field.NewInt64(tableName, "tenant_id")
	_core.URL = field.NewString(tableName, "url")
	_core.Type = field.NewString(tableName, "type")
	_core.Source = field.NewString(tableName, "source")
	_core.UpdateTime = field.NewTime(tableName, "update_time")
	_core.CreateTime = field.NewTime(tableName, "create_time")

	_core.fillFieldMap()

	return _core
}

type core struct {
	coreDo coreDo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String
	Description field.String
	TenantID    field.Int64
	URL         field.String
	Type        field.String
	Source      field.String
	UpdateTime  field.Time
	CreateTime  field.Time

	fieldMap map[string]field.Expr
}

func (c core) Table(newTableName string) *core {
	c.coreDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c core) As(alias string) *core {
	c.coreDo.DO = *(c.coreDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *core) updateTableName(table string) *core {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Name = field.NewString(table, "name")
	c.Description = field.NewString(table, "description")
	c.TenantID = field.NewInt64(table, "tenant_id")
	c.URL = field.NewString(table, "url")
	c.Type = field.NewString(table, "type")
	c.Source = field.NewString(table, "source")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.CreateTime = field.NewTime(table, "create_time")

	c.fillFieldMap()

	return c
}

func (c *core) WithContext(ctx context.Context) *coreDo { return c.coreDo.WithContext(ctx) }

func (c core) TableName() string { return c.coreDo.TableName() }

func (c core) Alias() string { return c.coreDo.Alias() }

func (c core) Columns(cols ...field.Expr) gen.Columns { return c.coreDo.Columns(cols...) }

func (c *core) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *core) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["description"] = c.Description
	c.fieldMap["tenant_id"] = c.TenantID
	c.fieldMap["url"] = c.URL
	c.fieldMap["type"] = c.Type
	c.fieldMap["source"] = c.Source
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["create_time"] = c.CreateTime
}

func (c core) clone(db *gorm.DB) core {
	c.coreDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c core) replaceDB(db *gorm.DB) core {
	c.coreDo.ReplaceDB(db)
	return c
}

type coreDo struct{ gen.DO }

func (c coreDo) Debug() *coreDo {
	return c.withDO(c.DO.Debug())
}

func (c coreDo) WithContext(ctx context.Context) *coreDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c coreDo) ReadDB() *coreDo {
	return c.Clauses(dbresolver.Read)
}

func (c coreDo) WriteDB() *coreDo {
	return c.Clauses(dbresolver.Write)
}

func (c coreDo) Session(config *gorm.Session) *coreDo {
	return c.withDO(c.DO.Session(config))
}

func (c coreDo) Clauses(conds ...clause.Expression) *coreDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c coreDo) Returning(value interface{}, columns ...string) *coreDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c coreDo) Not(conds ...gen.Condition) *coreDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c coreDo) Or(conds ...gen.Condition) *coreDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c coreDo) Select(conds ...field.Expr) *coreDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c coreDo) Where(conds ...gen.Condition) *coreDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c coreDo) Order(conds ...field.Expr) *coreDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c coreDo) Distinct(cols ...field.Expr) *coreDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c coreDo) Omit(cols ...field.Expr) *coreDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c coreDo) Join(table schema.Tabler, on ...field.Expr) *coreDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c coreDo) LeftJoin(table schema.Tabler, on ...field.Expr) *coreDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c coreDo) RightJoin(table schema.Tabler, on ...field.Expr) *coreDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c coreDo) Group(cols ...field.Expr) *coreDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c coreDo) Having(conds ...gen.Condition) *coreDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c coreDo) Limit(limit int) *coreDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c coreDo) Offset(offset int) *coreDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c coreDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *coreDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c coreDo) Unscoped() *coreDo {
	return c.withDO(c.DO.Unscoped())
}

func (c coreDo) Create(values ...*model_openiiot.Core) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c coreDo) CreateInBatches(values []*model_openiiot.Core, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c coreDo) Save(values ...*model_openiiot.Core) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c coreDo) First() (*model_openiiot.Core, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.Core), nil
	}
}

func (c coreDo) Take() (*model_openiiot.Core, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.Core), nil
	}
}

func (c coreDo) Last() (*model_openiiot.Core, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.Core), nil
	}
}

func (c coreDo) Find() ([]*model_openiiot.Core, error) {
	result, err := c.DO.Find()
	return result.([]*model_openiiot.Core), err
}

func (c coreDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model_openiiot.Core, err error) {
	buf := make([]*model_openiiot.Core, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c coreDo) FindInBatches(result *[]*model_openiiot.Core, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c coreDo) Attrs(attrs ...field.AssignExpr) *coreDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c coreDo) Assign(attrs ...field.AssignExpr) *coreDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c coreDo) Joins(fields ...field.RelationField) *coreDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c coreDo) Preload(fields ...field.RelationField) *coreDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c coreDo) FirstOrInit() (*model_openiiot.Core, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.Core), nil
	}
}

func (c coreDo) FirstOrCreate() (*model_openiiot.Core, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.Core), nil
	}
}

func (c coreDo) FindByPage(offset int, limit int) (result []*model_openiiot.Core, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c coreDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c coreDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c coreDo) Delete(models ...*model_openiiot.Core) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *coreDo) withDO(do gen.Dao) *coreDo {
	c.DO = *do.(*gen.DO)
	return c
}
