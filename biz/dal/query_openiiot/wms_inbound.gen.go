// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query_openiiot

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"freezonex/openiiot/biz/dal/model_openiiot"
)

func newWmsInbound(db *gorm.DB, opts ...gen.DOOption) wmsInbound {
	_wmsInbound := wmsInbound{}

	_wmsInbound.wmsInboundDo.UseDB(db, opts...)
	_wmsInbound.wmsInboundDo.UseModel(&model_openiiot.WmsInbound{})

	tableName := _wmsInbound.wmsInboundDo.TableName()
	_wmsInbound.ALL = field.NewAsterisk(tableName)
	_wmsInbound.ID = field.NewInt64(tableName, "id")
	_wmsInbound.RefID = field.NewString(tableName, "ref_id")
	_wmsInbound.Type = field.NewString(tableName, "type")
	_wmsInbound.StorageLocationID = field.NewInt64(tableName, "storage_location_id")
	_wmsInbound.MaterialName = field.NewString(tableName, "material_name")
	_wmsInbound.Source = field.NewString(tableName, "source")
	_wmsInbound.Operator = field.NewString(tableName, "operator")
	_wmsInbound.UpdateTime = field.NewTime(tableName, "update_time")
	_wmsInbound.CreateTime = field.NewTime(tableName, "create_time")

	_wmsInbound.fillFieldMap()

	return _wmsInbound
}

type wmsInbound struct {
	wmsInboundDo wmsInboundDo

	ALL               field.Asterisk
	ID                field.Int64
	RefID             field.String
	Type              field.String
	StorageLocationID field.Int64
	MaterialName      field.String
	Source            field.String
	Operator          field.String
	UpdateTime        field.Time
	CreateTime        field.Time

	fieldMap map[string]field.Expr
}

func (w wmsInbound) Table(newTableName string) *wmsInbound {
	w.wmsInboundDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wmsInbound) As(alias string) *wmsInbound {
	w.wmsInboundDo.DO = *(w.wmsInboundDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wmsInbound) updateTableName(table string) *wmsInbound {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.RefID = field.NewString(table, "ref_id")
	w.Type = field.NewString(table, "type")
	w.StorageLocationID = field.NewInt64(table, "storage_location_id")
	w.MaterialName = field.NewString(table, "material_name")
	w.Source = field.NewString(table, "source")
	w.Operator = field.NewString(table, "operator")
	w.UpdateTime = field.NewTime(table, "update_time")
	w.CreateTime = field.NewTime(table, "create_time")

	w.fillFieldMap()

	return w
}

func (w *wmsInbound) WithContext(ctx context.Context) *wmsInboundDo {
	return w.wmsInboundDo.WithContext(ctx)
}

func (w wmsInbound) TableName() string { return w.wmsInboundDo.TableName() }

func (w wmsInbound) Alias() string { return w.wmsInboundDo.Alias() }

func (w wmsInbound) Columns(cols ...field.Expr) gen.Columns { return w.wmsInboundDo.Columns(cols...) }

func (w *wmsInbound) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wmsInbound) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["ref_id"] = w.RefID
	w.fieldMap["type"] = w.Type
	w.fieldMap["storage_location_id"] = w.StorageLocationID
	w.fieldMap["material_name"] = w.MaterialName
	w.fieldMap["source"] = w.Source
	w.fieldMap["operator"] = w.Operator
	w.fieldMap["update_time"] = w.UpdateTime
	w.fieldMap["create_time"] = w.CreateTime
}

func (w wmsInbound) clone(db *gorm.DB) wmsInbound {
	w.wmsInboundDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wmsInbound) replaceDB(db *gorm.DB) wmsInbound {
	w.wmsInboundDo.ReplaceDB(db)
	return w
}

type wmsInboundDo struct{ gen.DO }

func (w wmsInboundDo) Debug() *wmsInboundDo {
	return w.withDO(w.DO.Debug())
}

func (w wmsInboundDo) WithContext(ctx context.Context) *wmsInboundDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wmsInboundDo) ReadDB() *wmsInboundDo {
	return w.Clauses(dbresolver.Read)
}

func (w wmsInboundDo) WriteDB() *wmsInboundDo {
	return w.Clauses(dbresolver.Write)
}

func (w wmsInboundDo) Session(config *gorm.Session) *wmsInboundDo {
	return w.withDO(w.DO.Session(config))
}

func (w wmsInboundDo) Clauses(conds ...clause.Expression) *wmsInboundDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wmsInboundDo) Returning(value interface{}, columns ...string) *wmsInboundDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wmsInboundDo) Not(conds ...gen.Condition) *wmsInboundDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wmsInboundDo) Or(conds ...gen.Condition) *wmsInboundDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wmsInboundDo) Select(conds ...field.Expr) *wmsInboundDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wmsInboundDo) Where(conds ...gen.Condition) *wmsInboundDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wmsInboundDo) Order(conds ...field.Expr) *wmsInboundDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wmsInboundDo) Distinct(cols ...field.Expr) *wmsInboundDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wmsInboundDo) Omit(cols ...field.Expr) *wmsInboundDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wmsInboundDo) Join(table schema.Tabler, on ...field.Expr) *wmsInboundDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wmsInboundDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wmsInboundDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wmsInboundDo) RightJoin(table schema.Tabler, on ...field.Expr) *wmsInboundDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wmsInboundDo) Group(cols ...field.Expr) *wmsInboundDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wmsInboundDo) Having(conds ...gen.Condition) *wmsInboundDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wmsInboundDo) Limit(limit int) *wmsInboundDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wmsInboundDo) Offset(offset int) *wmsInboundDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wmsInboundDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wmsInboundDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wmsInboundDo) Unscoped() *wmsInboundDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wmsInboundDo) Create(values ...*model_openiiot.WmsInbound) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wmsInboundDo) CreateInBatches(values []*model_openiiot.WmsInbound, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wmsInboundDo) Save(values ...*model_openiiot.WmsInbound) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wmsInboundDo) First() (*model_openiiot.WmsInbound, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.WmsInbound), nil
	}
}

func (w wmsInboundDo) Take() (*model_openiiot.WmsInbound, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.WmsInbound), nil
	}
}

func (w wmsInboundDo) Last() (*model_openiiot.WmsInbound, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.WmsInbound), nil
	}
}

func (w wmsInboundDo) Find() ([]*model_openiiot.WmsInbound, error) {
	result, err := w.DO.Find()
	return result.([]*model_openiiot.WmsInbound), err
}

func (w wmsInboundDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model_openiiot.WmsInbound, err error) {
	buf := make([]*model_openiiot.WmsInbound, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wmsInboundDo) FindInBatches(result *[]*model_openiiot.WmsInbound, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wmsInboundDo) Attrs(attrs ...field.AssignExpr) *wmsInboundDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wmsInboundDo) Assign(attrs ...field.AssignExpr) *wmsInboundDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wmsInboundDo) Joins(fields ...field.RelationField) *wmsInboundDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wmsInboundDo) Preload(fields ...field.RelationField) *wmsInboundDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wmsInboundDo) FirstOrInit() (*model_openiiot.WmsInbound, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.WmsInbound), nil
	}
}

func (w wmsInboundDo) FirstOrCreate() (*model_openiiot.WmsInbound, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.WmsInbound), nil
	}
}

func (w wmsInboundDo) FindByPage(offset int, limit int) (result []*model_openiiot.WmsInbound, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wmsInboundDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wmsInboundDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wmsInboundDo) Delete(models ...*model_openiiot.WmsInbound) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wmsInboundDo) withDO(do gen.Dao) *wmsInboundDo {
	w.DO = *do.(*gen.DO)
	return w
}
