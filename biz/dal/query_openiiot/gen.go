// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query_openiiot

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Application:  newApplication(db, opts...),
		Core:         newCore(db, opts...),
		Edge:         newEdge(db, opts...),
		Flow:         newFlow(db, opts...),
		FlowApp:      newFlowApp(db, opts...),
		FlowCore:     newFlowCore(db, opts...),
		FlowEdge:     newFlowEdge(db, opts...),
		GlobalConfig: newGlobalConfig(db, opts...),
		Tenant:       newTenant(db, opts...),
		User:         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Application  application
	Core         core
	Edge         edge
	Flow         flow
	FlowApp      flowApp
	FlowCore     flowCore
	FlowEdge     flowEdge
	GlobalConfig globalConfig
	Tenant       tenant
	User         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Application:  q.Application.clone(db),
		Core:         q.Core.clone(db),
		Edge:         q.Edge.clone(db),
		Flow:         q.Flow.clone(db),
		FlowApp:      q.FlowApp.clone(db),
		FlowCore:     q.FlowCore.clone(db),
		FlowEdge:     q.FlowEdge.clone(db),
		GlobalConfig: q.GlobalConfig.clone(db),
		Tenant:       q.Tenant.clone(db),
		User:         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Application:  q.Application.replaceDB(db),
		Core:         q.Core.replaceDB(db),
		Edge:         q.Edge.replaceDB(db),
		Flow:         q.Flow.replaceDB(db),
		FlowApp:      q.FlowApp.replaceDB(db),
		FlowCore:     q.FlowCore.replaceDB(db),
		FlowEdge:     q.FlowEdge.replaceDB(db),
		GlobalConfig: q.GlobalConfig.replaceDB(db),
		Tenant:       q.Tenant.replaceDB(db),
		User:         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Application  *applicationDo
	Core         *coreDo
	Edge         *edgeDo
	Flow         *flowDo
	FlowApp      *flowAppDo
	FlowCore     *flowCoreDo
	FlowEdge     *flowEdgeDo
	GlobalConfig *globalConfigDo
	Tenant       *tenantDo
	User         *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Application:  q.Application.WithContext(ctx),
		Core:         q.Core.WithContext(ctx),
		Edge:         q.Edge.WithContext(ctx),
		Flow:         q.Flow.WithContext(ctx),
		FlowApp:      q.FlowApp.WithContext(ctx),
		FlowCore:     q.FlowCore.WithContext(ctx),
		FlowEdge:     q.FlowEdge.WithContext(ctx),
		GlobalConfig: q.GlobalConfig.WithContext(ctx),
		Tenant:       q.Tenant.WithContext(ctx),
		User:         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
