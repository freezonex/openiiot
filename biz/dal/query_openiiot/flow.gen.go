// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query_openiiot

import (
	"context"
	"freezonex/openiiot/biz/dal/model_openiiot"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFlow(db *gorm.DB, opts ...gen.DOOption) flow {
	_flow := flow{}

	_flow.flowDo.UseDB(db, opts...)
	_flow.flowDo.UseModel(&model_openiiot.Flow{})

	tableName := _flow.flowDo.TableName()
	_flow.ALL = field.NewAsterisk(tableName)
	_flow.ID = field.NewInt64(tableName, "id")
	_flow.Name = field.NewString(tableName, "name")
	_flow.Description = field.NewString(tableName, "description")
	_flow.TenantID = field.NewInt64(tableName, "tenant_id")
	_flow.LastModifiedBy = field.NewString(tableName, "last_modified_by")
	_flow.FlowType = field.NewString(tableName, "flow_type")
	_flow.UpdateTime = field.NewTime(tableName, "update_time")
	_flow.CreateTime = field.NewTime(tableName, "create_time")

	_flow.fillFieldMap()

	return _flow
}

type flow struct {
	flowDo flowDo

	ALL            field.Asterisk
	ID             field.Int64
	Name           field.String
	Description    field.String
	TenantID       field.Int64
	LastModifiedBy field.String
	FlowType       field.String
	UpdateTime     field.Time
	CreateTime     field.Time

	fieldMap map[string]field.Expr
}

func (f flow) Table(newTableName string) *flow {
	f.flowDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f flow) As(alias string) *flow {
	f.flowDo.DO = *(f.flowDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *flow) updateTableName(table string) *flow {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.Description = field.NewString(table, "description")
	f.TenantID = field.NewInt64(table, "tenant_id")
	f.LastModifiedBy = field.NewString(table, "last_modified_by")
	f.FlowType = field.NewString(table, "flow_type")
	f.UpdateTime = field.NewTime(table, "update_time")
	f.CreateTime = field.NewTime(table, "create_time")

	f.fillFieldMap()

	return f
}

func (f *flow) WithContext(ctx context.Context) *flowDo { return f.flowDo.WithContext(ctx) }

func (f flow) TableName() string { return f.flowDo.TableName() }

func (f flow) Alias() string { return f.flowDo.Alias() }

func (f flow) Columns(cols ...field.Expr) gen.Columns { return f.flowDo.Columns(cols...) }

func (f *flow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *flow) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 8)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["description"] = f.Description
	f.fieldMap["tenant_id"] = f.TenantID
	f.fieldMap["last_modified_by"] = f.LastModifiedBy
	f.fieldMap["flow_type"] = f.FlowType
	f.fieldMap["update_time"] = f.UpdateTime
	f.fieldMap["create_time"] = f.CreateTime
}

func (f flow) clone(db *gorm.DB) flow {
	f.flowDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f flow) replaceDB(db *gorm.DB) flow {
	f.flowDo.ReplaceDB(db)
	return f
}

type flowDo struct{ gen.DO }

func (f flowDo) Debug() *flowDo {
	return f.withDO(f.DO.Debug())
}

func (f flowDo) WithContext(ctx context.Context) *flowDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f flowDo) ReadDB() *flowDo {
	return f.Clauses(dbresolver.Read)
}

func (f flowDo) WriteDB() *flowDo {
	return f.Clauses(dbresolver.Write)
}

func (f flowDo) Session(config *gorm.Session) *flowDo {
	return f.withDO(f.DO.Session(config))
}

func (f flowDo) Clauses(conds ...clause.Expression) *flowDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f flowDo) Returning(value interface{}, columns ...string) *flowDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f flowDo) Not(conds ...gen.Condition) *flowDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f flowDo) Or(conds ...gen.Condition) *flowDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f flowDo) Select(conds ...field.Expr) *flowDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f flowDo) Where(conds ...gen.Condition) *flowDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f flowDo) Order(conds ...field.Expr) *flowDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f flowDo) Distinct(cols ...field.Expr) *flowDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f flowDo) Omit(cols ...field.Expr) *flowDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f flowDo) Join(table schema.Tabler, on ...field.Expr) *flowDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f flowDo) LeftJoin(table schema.Tabler, on ...field.Expr) *flowDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f flowDo) RightJoin(table schema.Tabler, on ...field.Expr) *flowDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f flowDo) Group(cols ...field.Expr) *flowDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f flowDo) Having(conds ...gen.Condition) *flowDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f flowDo) Limit(limit int) *flowDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f flowDo) Offset(offset int) *flowDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f flowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *flowDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f flowDo) Unscoped() *flowDo {
	return f.withDO(f.DO.Unscoped())
}

func (f flowDo) Create(values ...*model_openiiot.Flow) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f flowDo) CreateInBatches(values []*model_openiiot.Flow, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f flowDo) Save(values ...*model_openiiot.Flow) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f flowDo) First() (*model_openiiot.Flow, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.Flow), nil
	}
}

func (f flowDo) Take() (*model_openiiot.Flow, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.Flow), nil
	}
}

func (f flowDo) Last() (*model_openiiot.Flow, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.Flow), nil
	}
}

func (f flowDo) Find() ([]*model_openiiot.Flow, error) {
	result, err := f.DO.Find()
	return result.([]*model_openiiot.Flow), err
}

func (f flowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model_openiiot.Flow, err error) {
	buf := make([]*model_openiiot.Flow, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f flowDo) FindInBatches(result *[]*model_openiiot.Flow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f flowDo) Attrs(attrs ...field.AssignExpr) *flowDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f flowDo) Assign(attrs ...field.AssignExpr) *flowDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f flowDo) Joins(fields ...field.RelationField) *flowDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f flowDo) Preload(fields ...field.RelationField) *flowDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f flowDo) FirstOrInit() (*model_openiiot.Flow, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.Flow), nil
	}
}

func (f flowDo) FirstOrCreate() (*model_openiiot.Flow, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.Flow), nil
	}
}

func (f flowDo) FindByPage(offset int, limit int) (result []*model_openiiot.Flow, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f flowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f flowDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f flowDo) Delete(models ...*model_openiiot.Flow) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *flowDo) withDO(do gen.Dao) *flowDo {
	f.DO = *do.(*gen.DO)
	return f
}
