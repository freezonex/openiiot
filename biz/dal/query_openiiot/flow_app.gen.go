// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query_openiiot

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"freezonex/openiiot/biz/dal/model_openiiot"
)

func newFlowApp(db *gorm.DB, opts ...gen.DOOption) flowApp {
	_flowApp := flowApp{}

	_flowApp.flowAppDo.UseDB(db, opts...)
	_flowApp.flowAppDo.UseModel(&model_openiiot.FlowApp{})

	tableName := _flowApp.flowAppDo.TableName()
	_flowApp.ALL = field.NewAsterisk(tableName)
	_flowApp.ID = field.NewInt64(tableName, "id")
	_flowApp.FlowID = field.NewInt64(tableName, "flow_id")
	_flowApp.AppID = field.NewInt64(tableName, "app_id")
	_flowApp.Script = field.NewString(tableName, "script")
	_flowApp.Script2 = field.NewString(tableName, "script2")
	_flowApp.Script3 = field.NewString(tableName, "script3")

	_flowApp.fillFieldMap()

	return _flowApp
}

type flowApp struct {
	flowAppDo flowAppDo

	ALL     field.Asterisk
	ID      field.Int64
	FlowID  field.Int64
	AppID   field.Int64
	Script  field.String
	Script2 field.String
	Script3 field.String

	fieldMap map[string]field.Expr
}

func (f flowApp) Table(newTableName string) *flowApp {
	f.flowAppDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f flowApp) As(alias string) *flowApp {
	f.flowAppDo.DO = *(f.flowAppDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *flowApp) updateTableName(table string) *flowApp {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FlowID = field.NewInt64(table, "flow_id")
	f.AppID = field.NewInt64(table, "app_id")
	f.Script = field.NewString(table, "script")
	f.Script2 = field.NewString(table, "script2")
	f.Script3 = field.NewString(table, "script3")

	f.fillFieldMap()

	return f
}

func (f *flowApp) WithContext(ctx context.Context) *flowAppDo { return f.flowAppDo.WithContext(ctx) }

func (f flowApp) TableName() string { return f.flowAppDo.TableName() }

func (f flowApp) Alias() string { return f.flowAppDo.Alias() }

func (f flowApp) Columns(cols ...field.Expr) gen.Columns { return f.flowAppDo.Columns(cols...) }

func (f *flowApp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *flowApp) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["flow_id"] = f.FlowID
	f.fieldMap["app_id"] = f.AppID
	f.fieldMap["script"] = f.Script
	f.fieldMap["script2"] = f.Script2
	f.fieldMap["script3"] = f.Script3
}

func (f flowApp) clone(db *gorm.DB) flowApp {
	f.flowAppDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f flowApp) replaceDB(db *gorm.DB) flowApp {
	f.flowAppDo.ReplaceDB(db)
	return f
}

type flowAppDo struct{ gen.DO }

func (f flowAppDo) Debug() *flowAppDo {
	return f.withDO(f.DO.Debug())
}

func (f flowAppDo) WithContext(ctx context.Context) *flowAppDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f flowAppDo) ReadDB() *flowAppDo {
	return f.Clauses(dbresolver.Read)
}

func (f flowAppDo) WriteDB() *flowAppDo {
	return f.Clauses(dbresolver.Write)
}

func (f flowAppDo) Session(config *gorm.Session) *flowAppDo {
	return f.withDO(f.DO.Session(config))
}

func (f flowAppDo) Clauses(conds ...clause.Expression) *flowAppDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f flowAppDo) Returning(value interface{}, columns ...string) *flowAppDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f flowAppDo) Not(conds ...gen.Condition) *flowAppDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f flowAppDo) Or(conds ...gen.Condition) *flowAppDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f flowAppDo) Select(conds ...field.Expr) *flowAppDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f flowAppDo) Where(conds ...gen.Condition) *flowAppDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f flowAppDo) Order(conds ...field.Expr) *flowAppDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f flowAppDo) Distinct(cols ...field.Expr) *flowAppDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f flowAppDo) Omit(cols ...field.Expr) *flowAppDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f flowAppDo) Join(table schema.Tabler, on ...field.Expr) *flowAppDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f flowAppDo) LeftJoin(table schema.Tabler, on ...field.Expr) *flowAppDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f flowAppDo) RightJoin(table schema.Tabler, on ...field.Expr) *flowAppDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f flowAppDo) Group(cols ...field.Expr) *flowAppDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f flowAppDo) Having(conds ...gen.Condition) *flowAppDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f flowAppDo) Limit(limit int) *flowAppDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f flowAppDo) Offset(offset int) *flowAppDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f flowAppDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *flowAppDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f flowAppDo) Unscoped() *flowAppDo {
	return f.withDO(f.DO.Unscoped())
}

func (f flowAppDo) Create(values ...*model_openiiot.FlowApp) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f flowAppDo) CreateInBatches(values []*model_openiiot.FlowApp, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f flowAppDo) Save(values ...*model_openiiot.FlowApp) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f flowAppDo) First() (*model_openiiot.FlowApp, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.FlowApp), nil
	}
}

func (f flowAppDo) Take() (*model_openiiot.FlowApp, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.FlowApp), nil
	}
}

func (f flowAppDo) Last() (*model_openiiot.FlowApp, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.FlowApp), nil
	}
}

func (f flowAppDo) Find() ([]*model_openiiot.FlowApp, error) {
	result, err := f.DO.Find()
	return result.([]*model_openiiot.FlowApp), err
}

func (f flowAppDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model_openiiot.FlowApp, err error) {
	buf := make([]*model_openiiot.FlowApp, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f flowAppDo) FindInBatches(result *[]*model_openiiot.FlowApp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f flowAppDo) Attrs(attrs ...field.AssignExpr) *flowAppDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f flowAppDo) Assign(attrs ...field.AssignExpr) *flowAppDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f flowAppDo) Joins(fields ...field.RelationField) *flowAppDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f flowAppDo) Preload(fields ...field.RelationField) *flowAppDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f flowAppDo) FirstOrInit() (*model_openiiot.FlowApp, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.FlowApp), nil
	}
}

func (f flowAppDo) FirstOrCreate() (*model_openiiot.FlowApp, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model_openiiot.FlowApp), nil
	}
}

func (f flowAppDo) FindByPage(offset int, limit int) (result []*model_openiiot.FlowApp, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f flowAppDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f flowAppDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f flowAppDo) Delete(models ...*model_openiiot.FlowApp) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *flowAppDo) withDO(do gen.Dao) *flowAppDo {
	f.DO = *do.(*gen.DO)
	return f
}
