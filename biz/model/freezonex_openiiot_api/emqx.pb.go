// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.1
// source: freezonex/openiiot_api/emqx.proto

package freezonex_openiiot_api

import (
	_ "freezonex/openiiot/biz/model/api"
	base_req "freezonex/openiiot/biz/model/base_req"
	base_resp "freezonex/openiiot/biz/model/base_resp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmqxDSN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host" form:"host" query:"host"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username" form:"username" query:"username"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password" form:"password" query:"password"`
}

func (x *EmqxDSN) Reset() {
	*x = EmqxDSN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmqxDSN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmqxDSN) ProtoMessage() {}

func (x *EmqxDSN) ProtoReflect() protoreflect.Message {
	mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmqxDSN.ProtoReflect.Descriptor instead.
func (*EmqxDSN) Descriptor() ([]byte, []int) {
	return file_freezonex_openiiot_api_emqx_proto_rawDescGZIP(), []int{0}
}

func (x *EmqxDSN) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *EmqxDSN) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EmqxDSN) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SSLConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable" form:"enable" query:"enable"`
}

func (x *SSLConfig) Reset() {
	*x = SSLConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLConfig) ProtoMessage() {}

func (x *SSLConfig) ProtoReflect() protoreflect.Message {
	mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLConfig.ProtoReflect.Descriptor instead.
func (*SSLConfig) Descriptor() ([]byte, []int) {
	return file_freezonex_openiiot_api_emqx_proto_rawDescGZIP(), []int{1}
}

func (x *SSLConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type ResourceOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerPoolSize      int32  `protobuf:"varint,1,opt,name=worker_pool_size,json=workerPoolSize,proto3" json:"worker_pool_size" form:"worker_pool_size" query:"worker_pool_size"`
	MaxBufferBytes      int64  `protobuf:"varint,2,opt,name=max_buffer_bytes,json=maxBufferBytes,proto3" json:"max_buffer_bytes" form:"max_buffer_bytes" query:"max_buffer_bytes"`
	InflightWindow      int32  `protobuf:"varint,3,opt,name=inflight_window,json=inflightWindow,proto3" json:"inflight_window" form:"inflight_window" query:"inflight_window"`
	QueryMode           string `protobuf:"bytes,4,opt,name=query_mode,json=queryMode,proto3" json:"query_mode" form:"query_mode" query:"query_mode"`
	HealthCheckInterval int64  `protobuf:"varint,5,opt,name=health_check_interval,json=healthCheckInterval,proto3" json:"health_check_interval" form:"health_check_interval" query:"health_check_interval"`
}

func (x *ResourceOpts) Reset() {
	*x = ResourceOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceOpts) ProtoMessage() {}

func (x *ResourceOpts) ProtoReflect() protoreflect.Message {
	mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceOpts.ProtoReflect.Descriptor instead.
func (*ResourceOpts) Descriptor() ([]byte, []int) {
	return file_freezonex_openiiot_api_emqx_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceOpts) GetWorkerPoolSize() int32 {
	if x != nil {
		return x.WorkerPoolSize
	}
	return 0
}

func (x *ResourceOpts) GetMaxBufferBytes() int64 {
	if x != nil {
		return x.MaxBufferBytes
	}
	return 0
}

func (x *ResourceOpts) GetInflightWindow() int32 {
	if x != nil {
		return x.InflightWindow
	}
	return 0
}

func (x *ResourceOpts) GetQueryMode() string {
	if x != nil {
		return x.QueryMode
	}
	return ""
}

func (x *ResourceOpts) GetHealthCheckInterval() int64 {
	if x != nil {
		return x.HealthCheckInterval
	}
	return 0
}

type BridgeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Type             string        `protobuf:"bytes,2,opt,name=type,proto3" json:"type" form:"type" query:"type"`
	Ssl              *SSLConfig    `protobuf:"bytes,3,opt,name=ssl,proto3" json:"ssl" form:"ssl" query:"ssl"`
	ConnectTimeout   string        `protobuf:"bytes,4,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout" form:"connect_timeout" query:"connect_timeout"`
	PoolSize         int32         `protobuf:"varint,5,opt,name=pool_size,json=poolSize,proto3" json:"pool_size" form:"pool_size" query:"pool_size"`
	Enable           bool          `protobuf:"varint,6,opt,name=enable,proto3" json:"enable" form:"enable" query:"enable"`
	Body             string        `protobuf:"bytes,7,opt,name=body,proto3" json:"body" form:"body" query:"body"`
	Method           string        `protobuf:"bytes,8,opt,name=method,proto3" json:"method" form:"method" query:"method"`
	Url              string        `protobuf:"bytes,9,opt,name=url,proto3" json:"url" form:"url" query:"url"`
	MaxRetries       int32         `protobuf:"varint,10,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries" form:"max_retries" query:"max_retries"`
	RequestTimeout   string        `protobuf:"bytes,11,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout" form:"request_timeout" query:"request_timeout"`
	PoolType         string        `protobuf:"bytes,12,opt,name=pool_type,json=poolType,proto3" json:"pool_type" form:"pool_type" query:"pool_type"`
	ResourceOpts     *ResourceOpts `protobuf:"bytes,13,opt,name=resource_opts,json=resourceOpts,proto3" json:"resource_opts" form:"resource_opts" query:"resource_opts"`
	EnablePipelining int32         `protobuf:"varint,14,opt,name=enable_pipelining,json=enablePipelining,proto3" json:"enable_pipelining" form:"enable_pipelining" query:"enable_pipelining"`
	LocalTopic       string        `protobuf:"bytes,15,opt,name=local_topic,json=localTopic,proto3" json:"local_topic" form:"local_topic" query:"local_topic"`
}

func (x *BridgeConfig) Reset() {
	*x = BridgeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeConfig) ProtoMessage() {}

func (x *BridgeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeConfig.ProtoReflect.Descriptor instead.
func (*BridgeConfig) Descriptor() ([]byte, []int) {
	return file_freezonex_openiiot_api_emqx_proto_rawDescGZIP(), []int{3}
}

func (x *BridgeConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BridgeConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BridgeConfig) GetSsl() *SSLConfig {
	if x != nil {
		return x.Ssl
	}
	return nil
}

func (x *BridgeConfig) GetConnectTimeout() string {
	if x != nil {
		return x.ConnectTimeout
	}
	return ""
}

func (x *BridgeConfig) GetPoolSize() int32 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *BridgeConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *BridgeConfig) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *BridgeConfig) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *BridgeConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BridgeConfig) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *BridgeConfig) GetRequestTimeout() string {
	if x != nil {
		return x.RequestTimeout
	}
	return ""
}

func (x *BridgeConfig) GetPoolType() string {
	if x != nil {
		return x.PoolType
	}
	return ""
}

func (x *BridgeConfig) GetResourceOpts() *ResourceOpts {
	if x != nil {
		return x.ResourceOpts
	}
	return nil
}

func (x *BridgeConfig) GetEnablePipelining() int32 {
	if x != nil {
		return x.EnablePipelining
	}
	return 0
}

func (x *BridgeConfig) GetLocalTopic() string {
	if x != nil {
		return x.LocalTopic
	}
	return ""
}

type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node         string `protobuf:"bytes,1,opt,name=node,proto3" json:"node" form:"node" query:"node"`
	Status       string `protobuf:"bytes,2,opt,name=status,proto3" json:"status" form:"status" query:"status"`
	StatusReason string `protobuf:"bytes,3,opt,name=status_reason,json=statusReason,proto3" json:"status_reason" form:"status_reason" query:"status_reason"`
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_freezonex_openiiot_api_emqx_proto_rawDescGZIP(), []int{4}
}

func (x *NodeStatus) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *NodeStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeStatus) GetStatusReason() string {
	if x != nil {
		return x.StatusReason
	}
	return ""
}

// Main message for a bridge status response
type BridgeStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       string        `protobuf:"bytes,1,opt,name=status,proto3" json:"status" form:"status" query:"status"`
	StatusReason string        `protobuf:"bytes,2,opt,name=status_reason,json=statusReason,proto3" json:"status_reason" form:"status_reason" query:"status_reason"`
	NodeStatus   []*NodeStatus `protobuf:"bytes,3,rep,name=node_status,json=nodeStatus,proto3" json:"node_status" form:"node_status" query:"node_status"` // Assuming there can be multiple node statuses.
	Type         string        `protobuf:"bytes,4,opt,name=type,proto3" json:"type" form:"type" query:"type"`
	Name         string        `protobuf:"bytes,5,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Enable       bool          `protobuf:"varint,6,opt,name=enable,proto3" json:"enable" form:"enable" query:"enable"`
	Url          string        `protobuf:"bytes,7,opt,name=url,proto3" json:"url" form:"url" query:"url"` // Add other fields as per your API specification...
}

func (x *BridgeStatusResponse) Reset() {
	*x = BridgeStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeStatusResponse) ProtoMessage() {}

func (x *BridgeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeStatusResponse.ProtoReflect.Descriptor instead.
func (*BridgeStatusResponse) Descriptor() ([]byte, []int) {
	return file_freezonex_openiiot_api_emqx_proto_rawDescGZIP(), []int{5}
}

func (x *BridgeStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BridgeStatusResponse) GetStatusReason() string {
	if x != nil {
		return x.StatusReason
	}
	return ""
}

func (x *BridgeStatusResponse) GetNodeStatus() []*NodeStatus {
	if x != nil {
		return x.NodeStatus
	}
	return nil
}

func (x *BridgeStatusResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BridgeStatusResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BridgeStatusResponse) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *BridgeStatusResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type EmqxStatusStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelVsn       string `protobuf:"bytes,1,opt,name=rel_vsn,json=relVsn,proto3" json:"rel_vsn" form:"rel_vsn" query:"rel_vsn"`
	NodeName     string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name" form:"node_name" query:"node_name"`
	BrokerStatus string `protobuf:"bytes,3,opt,name=broker_status,json=brokerStatus,proto3" json:"broker_status" form:"broker_status" query:"broker_status"`
	AppStatus    string `protobuf:"bytes,4,opt,name=app_status,json=appStatus,proto3" json:"app_status" form:"app_status" query:"app_status"`
}

func (x *EmqxStatusStruct) Reset() {
	*x = EmqxStatusStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmqxStatusStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmqxStatusStruct) ProtoMessage() {}

func (x *EmqxStatusStruct) ProtoReflect() protoreflect.Message {
	mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmqxStatusStruct.ProtoReflect.Descriptor instead.
func (*EmqxStatusStruct) Descriptor() ([]byte, []int) {
	return file_freezonex_openiiot_api_emqx_proto_rawDescGZIP(), []int{6}
}

func (x *EmqxStatusStruct) GetRelVsn() string {
	if x != nil {
		return x.RelVsn
	}
	return ""
}

func (x *EmqxStatusStruct) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *EmqxStatusStruct) GetBrokerStatus() string {
	if x != nil {
		return x.BrokerStatus
	}
	return ""
}

func (x *EmqxStatusStruct) GetAppStatus() string {
	if x != nil {
		return x.AppStatus
	}
	return ""
}

type EmqxGetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *base_req.BaseRequest `protobuf:"bytes,1,opt,name=base_request,json=baseRequest,proto3" json:"base_request" form:"base_request" query:"base_request"`
	Dsn         *EmqxDSN              `protobuf:"bytes,2,opt,name=dsn,proto3" json:"dsn" form:"dsn" query:"dsn"`
}

func (x *EmqxGetStatusRequest) Reset() {
	*x = EmqxGetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmqxGetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmqxGetStatusRequest) ProtoMessage() {}

func (x *EmqxGetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmqxGetStatusRequest.ProtoReflect.Descriptor instead.
func (*EmqxGetStatusRequest) Descriptor() ([]byte, []int) {
	return file_freezonex_openiiot_api_emqx_proto_rawDescGZIP(), []int{7}
}

func (x *EmqxGetStatusRequest) GetBaseRequest() *base_req.BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *EmqxGetStatusRequest) GetDsn() *EmqxDSN {
	if x != nil {
		return x.Dsn
	}
	return nil
}

type EmqxGetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResp *base_resp.BaseResponse `protobuf:"bytes,1,opt,name=base_resp,json=baseResp,proto3" json:"base_resp" form:"base_resp" query:"base_resp"`
	Status   *EmqxStatusStruct       `protobuf:"bytes,2,opt,name=status,proto3" json:"status" form:"status" query:"status"`
}

func (x *EmqxGetStatusResponse) Reset() {
	*x = EmqxGetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmqxGetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmqxGetStatusResponse) ProtoMessage() {}

func (x *EmqxGetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmqxGetStatusResponse.ProtoReflect.Descriptor instead.
func (*EmqxGetStatusResponse) Descriptor() ([]byte, []int) {
	return file_freezonex_openiiot_api_emqx_proto_rawDescGZIP(), []int{8}
}

func (x *EmqxGetStatusResponse) GetBaseResp() *base_resp.BaseResponse {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

func (x *EmqxGetStatusResponse) GetStatus() *EmqxStatusStruct {
	if x != nil {
		return x.Status
	}
	return nil
}

type EmqxCreateBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *base_req.BaseRequest `protobuf:"bytes,1,opt,name=base_request,json=baseRequest,proto3" json:"base_request" form:"base_request" query:"base_request"`
	Dsn         *EmqxDSN              `protobuf:"bytes,2,opt,name=dsn,proto3" json:"dsn" form:"dsn" query:"dsn"`
	Bridge      *BridgeConfig         `protobuf:"bytes,3,opt,name=bridge,proto3" json:"bridge" form:"bridge" query:"bridge"`
}

func (x *EmqxCreateBridgeRequest) Reset() {
	*x = EmqxCreateBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmqxCreateBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmqxCreateBridgeRequest) ProtoMessage() {}

func (x *EmqxCreateBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmqxCreateBridgeRequest.ProtoReflect.Descriptor instead.
func (*EmqxCreateBridgeRequest) Descriptor() ([]byte, []int) {
	return file_freezonex_openiiot_api_emqx_proto_rawDescGZIP(), []int{9}
}

func (x *EmqxCreateBridgeRequest) GetBaseRequest() *base_req.BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *EmqxCreateBridgeRequest) GetDsn() *EmqxDSN {
	if x != nil {
		return x.Dsn
	}
	return nil
}

func (x *EmqxCreateBridgeRequest) GetBridge() *BridgeConfig {
	if x != nil {
		return x.Bridge
	}
	return nil
}

type EmqxCreateBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResp     *base_resp.BaseResponse `protobuf:"bytes,1,opt,name=base_resp,json=baseResp,proto3" json:"base_resp" form:"base_resp" query:"base_resp"`
	BridgeStatus *BridgeStatusResponse   `protobuf:"bytes,2,opt,name=bridge_status,json=bridgeStatus,proto3" json:"bridge_status" form:"bridge_status" query:"bridge_status"`
}

func (x *EmqxCreateBridgeResponse) Reset() {
	*x = EmqxCreateBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmqxCreateBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmqxCreateBridgeResponse) ProtoMessage() {}

func (x *EmqxCreateBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_freezonex_openiiot_api_emqx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmqxCreateBridgeResponse.ProtoReflect.Descriptor instead.
func (*EmqxCreateBridgeResponse) Descriptor() ([]byte, []int) {
	return file_freezonex_openiiot_api_emqx_proto_rawDescGZIP(), []int{10}
}

func (x *EmqxCreateBridgeResponse) GetBaseResp() *base_resp.BaseResponse {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

func (x *EmqxCreateBridgeResponse) GetBridgeStatus() *BridgeStatusResponse {
	if x != nil {
		return x.BridgeStatus
	}
	return nil
}

var File_freezonex_openiiot_api_emqx_proto protoreflect.FileDescriptor

var file_freezonex_openiiot_api_emqx_proto_rawDesc = []byte{
	0x0a, 0x21, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x78, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x69, 0x6f, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6d, 0x71, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x78, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x69, 0x6f, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1a, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x66, 0x72, 0x65, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x07, 0x45, 0x6d,
	0x71, 0x78, 0x44, 0x53, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x23, 0x0a, 0x09, 0x53, 0x53, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x87, 0x04, 0x0a, 0x0c, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x03, 0x73, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x69,
	0x6f, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x53, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x03, 0x73, 0x73, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x69, 0x6f, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x70, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x22, 0x5d, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0xea, 0x01, 0x0a, 0x14, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x69, 0x6f, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x8c, 0x01,
	0x0a, 0x10, 0x45, 0x6d, 0x71, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x5f, 0x76, 0x73, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x56, 0x73, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x83, 0x01, 0x0a,
	0x14, 0x45, 0x6d, 0x71, 0x78, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x03, 0x64, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x69, 0x6f,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x71, 0x78, 0x44, 0x53, 0x4e, 0x52, 0x03, 0x64,
	0x73, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x45, 0x6d, 0x71, 0x78, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x78, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x69, 0x6f, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x71, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x45, 0x6d, 0x71, 0x78, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x64, 0x73,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x69, 0x6f, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x6d, 0x71, 0x78, 0x44, 0x53, 0x4e, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x12, 0x3c, 0x0a,
	0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x69,
	0x6f, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x18,
	0x45, 0x6d, 0x71, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51,
	0x0a, 0x0d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x78, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x69, 0x6f, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x35, 0x5a, 0x33, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x78, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x69, 0x6f, 0x74, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x69, 0x6f, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_freezonex_openiiot_api_emqx_proto_rawDescOnce sync.Once
	file_freezonex_openiiot_api_emqx_proto_rawDescData = file_freezonex_openiiot_api_emqx_proto_rawDesc
)

func file_freezonex_openiiot_api_emqx_proto_rawDescGZIP() []byte {
	file_freezonex_openiiot_api_emqx_proto_rawDescOnce.Do(func() {
		file_freezonex_openiiot_api_emqx_proto_rawDescData = protoimpl.X.CompressGZIP(file_freezonex_openiiot_api_emqx_proto_rawDescData)
	})
	return file_freezonex_openiiot_api_emqx_proto_rawDescData
}

var file_freezonex_openiiot_api_emqx_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_freezonex_openiiot_api_emqx_proto_goTypes = []interface{}{
	(*EmqxDSN)(nil),                  // 0: freezonex.openiiot_api.EmqxDSN
	(*SSLConfig)(nil),                // 1: freezonex.openiiot_api.SSLConfig
	(*ResourceOpts)(nil),             // 2: freezonex.openiiot_api.ResourceOpts
	(*BridgeConfig)(nil),             // 3: freezonex.openiiot_api.BridgeConfig
	(*NodeStatus)(nil),               // 4: freezonex.openiiot_api.NodeStatus
	(*BridgeStatusResponse)(nil),     // 5: freezonex.openiiot_api.BridgeStatusResponse
	(*EmqxStatusStruct)(nil),         // 6: freezonex.openiiot_api.EmqxStatusStruct
	(*EmqxGetStatusRequest)(nil),     // 7: freezonex.openiiot_api.EmqxGetStatusRequest
	(*EmqxGetStatusResponse)(nil),    // 8: freezonex.openiiot_api.EmqxGetStatusResponse
	(*EmqxCreateBridgeRequest)(nil),  // 9: freezonex.openiiot_api.EmqxCreateBridgeRequest
	(*EmqxCreateBridgeResponse)(nil), // 10: freezonex.openiiot_api.EmqxCreateBridgeResponse
	(*base_req.BaseRequest)(nil),     // 11: base_req.BaseRequest
	(*base_resp.BaseResponse)(nil),   // 12: base_resp.BaseResponse
}
var file_freezonex_openiiot_api_emqx_proto_depIdxs = []int32{
	1,  // 0: freezonex.openiiot_api.BridgeConfig.ssl:type_name -> freezonex.openiiot_api.SSLConfig
	2,  // 1: freezonex.openiiot_api.BridgeConfig.resource_opts:type_name -> freezonex.openiiot_api.ResourceOpts
	4,  // 2: freezonex.openiiot_api.BridgeStatusResponse.node_status:type_name -> freezonex.openiiot_api.NodeStatus
	11, // 3: freezonex.openiiot_api.EmqxGetStatusRequest.base_request:type_name -> base_req.BaseRequest
	0,  // 4: freezonex.openiiot_api.EmqxGetStatusRequest.dsn:type_name -> freezonex.openiiot_api.EmqxDSN
	12, // 5: freezonex.openiiot_api.EmqxGetStatusResponse.base_resp:type_name -> base_resp.BaseResponse
	6,  // 6: freezonex.openiiot_api.EmqxGetStatusResponse.status:type_name -> freezonex.openiiot_api.EmqxStatusStruct
	11, // 7: freezonex.openiiot_api.EmqxCreateBridgeRequest.base_request:type_name -> base_req.BaseRequest
	0,  // 8: freezonex.openiiot_api.EmqxCreateBridgeRequest.dsn:type_name -> freezonex.openiiot_api.EmqxDSN
	3,  // 9: freezonex.openiiot_api.EmqxCreateBridgeRequest.bridge:type_name -> freezonex.openiiot_api.BridgeConfig
	12, // 10: freezonex.openiiot_api.EmqxCreateBridgeResponse.base_resp:type_name -> base_resp.BaseResponse
	5,  // 11: freezonex.openiiot_api.EmqxCreateBridgeResponse.bridge_status:type_name -> freezonex.openiiot_api.BridgeStatusResponse
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_freezonex_openiiot_api_emqx_proto_init() }
func file_freezonex_openiiot_api_emqx_proto_init() {
	if File_freezonex_openiiot_api_emqx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_freezonex_openiiot_api_emqx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmqxDSN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_freezonex_openiiot_api_emqx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_freezonex_openiiot_api_emqx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_freezonex_openiiot_api_emqx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_freezonex_openiiot_api_emqx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_freezonex_openiiot_api_emqx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_freezonex_openiiot_api_emqx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmqxStatusStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_freezonex_openiiot_api_emqx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmqxGetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_freezonex_openiiot_api_emqx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmqxGetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_freezonex_openiiot_api_emqx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmqxCreateBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_freezonex_openiiot_api_emqx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmqxCreateBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_freezonex_openiiot_api_emqx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_freezonex_openiiot_api_emqx_proto_goTypes,
		DependencyIndexes: file_freezonex_openiiot_api_emqx_proto_depIdxs,
		MessageInfos:      file_freezonex_openiiot_api_emqx_proto_msgTypes,
	}.Build()
	File_freezonex_openiiot_api_emqx_proto = out.File
	file_freezonex_openiiot_api_emqx_proto_rawDesc = nil
	file_freezonex_openiiot_api_emqx_proto_goTypes = nil
	file_freezonex_openiiot_api_emqx_proto_depIdxs = nil
}
