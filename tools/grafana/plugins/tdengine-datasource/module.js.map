{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"lodash\"","webpack:///external amd \"moment\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./datasource.ts","webpack:///./components/ConfigEditor/useChangeSecureOptions.tsx","webpack:///./components/ConfigEditor/useResetSecureOptions.tsx","webpack:///./components/ConfigEditor/ConfigEditor.tsx","webpack:///./components/QueryEditor/useSelectableValue.tsx","webpack:///./components/QueryEditor/useChangeSelectableValue.tsx","webpack:///./components/QueryEditor/useChangeString.tsx","webpack:///./module.ts","webpack:///./components/QueryEditor/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__980__;","module.exports = __WEBPACK_EXTERNAL_MODULE__283__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {\n    DataQueryRequest,\n    DataQueryResponse,\n    DataSourceApi,\n    DataSourceInstanceSettings,\n    MetricFindValue\n} from '@grafana/data'\nimport {BackendSrv, getBackendSrv, getTemplateSrv, TemplateSrv} from '@grafana/runtime'\nimport {DataSourceOptions, Query} from './types';\nimport _, {uniqBy} from \"lodash\";\n// eslint-disable-next-line no-restricted-imports\nimport moment from 'moment';\n\nexport class DataSource extends DataSourceApi<Query, DataSourceOptions> {\n    baseUrl: string\n    backendSrv: BackendSrv\n    template: TemplateSrv\n    timezone = ''\n    lastGeneratedSql = ''\n    serverVersion = 0\n\n    constructor(instanceSettings: DataSourceInstanceSettings<DataSourceOptions>) {\n        super(instanceSettings);\n        this.baseUrl = instanceSettings.url!\n        this.backendSrv = getBackendSrv()\n        this.template = getTemplateSrv()\n    }\n\n    // @ts-ignore\n    query(options: DataQueryRequest<Query>): Promise<DataQueryResponse> {\n        if (options.timezone) {\n            this.timezone = options.timezone === \"browser\" ? Intl.DateTimeFormat().resolvedOptions().timeZone : options.timezone;\n        }\n        const targets = options.targets.filter((target) => (!target.queryType || target.queryType === \"SQL\") && target.sql && !(target.hide === true));\n        if (targets.length === 0) {\n            // @ts-ignore\n            return Promise.all([])\n        }\n        return Promise.all(targets.map(target => {\n            let sql = this.generateSql(target.sql, options);\n            this.lastGeneratedSql = sql;\n            return this.request(sql).then((res: any) => this.postQuery(target, res, options));\n        })).then(data => {\n            let result = this.arithmeticQueries(data, options).flat();\n            return {data: result};\n        }, (err) => {\n            console.log(err);\n            if (err.data && err.data.desc) {\n                throw new Error(err.data.desc);\n            } else {\n                throw new Error(err);\n            }\n        });\n    }\n\n    testDatasource() { // save & test button\n        return this.request('show databases').then((response: { status: number; data: { message: string; }; }) => {\n            if (!!response && response.status === 200 && !_.get(response, 'data.code')) {\n                return {status: \"success\", message: \"TDengine Data source is working\", title: \"Success\"};\n            }\n            return {\n                status: \"error\",\n                message: \"TDengine Data source is not working, reason: \" + response.data.message,\n                title: \"Failed\"\n            };\n        });\n    }\n\n    metricFindQuery(query: any, options: any): Promise<MetricFindValue[]> {\n        return this.request(this.generateSql(query, options)).then(res => {\n            if (!res?.data?.data) {\n                return [];\n            }\n\n            const column_meta = res.data.column_meta || [];\n            const hasTextAndValue = column_meta.length === 2 &&\n                ((column_meta[0][0] === \"__text\" && column_meta[1][0] === \"__value\")\n                    || (column_meta[1][0] === \"__text\" && column_meta[0][0] === \"__value\"));\n\n            let values: MetricFindValue[] = [];\n            if (hasTextAndValue) {\n                let text_index = 0;\n                let string_value = false;\n                if (res.data.column_meta[1][0] === \"__text\") {\n                    text_index = 1\n                }\n                let value_type = res.data.column_meta[1 - text_index][1].toUpperCase();\n                if (value_type === \"NCHAR\" || value_type === \"BINARY\" || value_type === \"VARCHAR\") {\n                    string_value = true\n                }\n\n                for (let i = 0; i < res.data.data.length; i++) {\n                    let text = '' + res.data.data[i][text_index];\n                    let value = res.data.data[i][1 - text_index]\n\n                    if (string_value) {\n                        value = \"'\" + value + \"'\";\n                    }\n\n                    values.push({text: text, value: value})\n                }\n            } else {\n                for (let i = 0; i < res.data.data.length; i++) {\n                    values.push({text: '' + res.data.data[i]});\n                }\n            }\n\n            return uniqBy(values, \"text\");\n        });\n    }\n\n    getGenerateSql(): string {\n        return this.lastGeneratedSql\n    }\n\n    request(sql: string) {\n        if (!sql) {\n            return new Promise<void>((resolve, reject) => {\n                resolve();\n            });\n        }\n        if (this.serverVersion === 0) {\n            return this.backendSrv.datasourceRequest({\n                url: this.baseUrl + \"/sql\",\n                data: \"select server_version()\",\n                method: 'POST',\n            }).then((res) => {\n                if (res.data.data[0][0].startsWith(\"3\")) {\n                    this.serverVersion = 3;\n                    return this.querySql(sql);\n                } else {\n                    this.serverVersion = 2;\n                    return this.querySqlUtc(sql);\n                }\n            }).catch(err => {\n                return err;\n            });\n        } else if (this.serverVersion === 3) {\n            return this.querySql(sql);\n        } else {\n            return this.querySqlUtc(sql);\n        }\n    }\n\n    querySql(sql: string) {\n        return this.backendSrv.datasourceRequest({\n            url: this.baseUrl + \"/sql\",\n            data: sql,\n            method: 'POST',\n        }).then((result) => {\n            result.data = this.convertResult(result.data);\n            return result;\n        }).catch(err => {\n            console.log(\"catch error: \", err);\n        });\n    }\n\n    querySqlUtc(sql: string) {\n        return this.backendSrv.datasourceRequest({\n            url: this.baseUrl + \"/sqlutc\",\n            data: sql,\n            method: 'POST',\n        });\n    }\n\n    convertResult(src: any) {\n        let dist = {\n            status: \"\",\n            code: undefined,\n            desc: undefined,\n            column_meta: undefined,\n            data: undefined,\n            rows: 0,\n        }\n        if (src.code === 0) {\n            dist.status = \"succ\";\n            dist.column_meta = src.column_meta;\n            // @ts-ignore\n            dist.column_meta.forEach(element => {\n                if (element[1] === \"TIMESTAMP\") {\n                    element[1] = 9;\n                }\n            });\n            dist.data = src.data;\n            dist.rows = src.rows;\n        } else {\n            dist.status = \"error\";\n            dist.code = src.code;\n            dist.desc = src.desc;\n        }\n\n        return dist;\n    }\n\n    getRowAlias(alias: string, replaceObject: any, options: DataQueryRequest<Query>) {\n        if (!alias) {\n            return Object.values(replaceObject)[0];\n        }\n        alias = this.generateSql(alias, options);\n        const regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]|\\{\\{([\\s\\S]+?)\\}\\}/g;\n        return alias.replace(regex, (match, g1, g2, g3) => {\n            const group = g1 || g2 || g3;\n            return replaceObject[group] || match;\n        });\n    }\n\n    generateSql(sql: string, options: DataQueryRequest<Query>) {\n        if (!sql || sql.length === 0) {\n            return sql;\n        }\n\n        let queryStart = \"now-1h\";\n        let queryEnd = \"now\";\n        let intervalMs = \"20000\";\n        if (!!options) {\n            if (!!options.range && !!options.range.from) {\n                queryStart = options.range.from.toISOString();\n            }\n\n            if (!!options.range && !!options.range.to) {\n                queryEnd = options.range.to.toISOString();\n            }\n\n            if (!!options.intervalMs) {\n                intervalMs = options.intervalMs.toString();\n            }\n\n            sql = this.template.replace(sql, options.scopedVars, 'csv');\n        }\n\n        intervalMs += \"a\";\n        sql = sql.replace(/^\\s+|\\s+$/gm, '');\n        if (queryStart.indexOf(\"now\") < 0) {\n            sql = sql.replace(/\\$from/g, \"'\" + queryStart + \"'\");\n            sql = sql.replace(/\\$begin/g, \"'\" + queryStart + \"'\");\n        } else {\n            sql = sql.replace(/\\$from/g, queryStart);\n            sql = sql.replace(/\\$begin/g, queryStart);\n        }\n        if (queryEnd.indexOf(\"now\") < 0) {\n            sql = sql.replace(/\\$to/g, \"'\" + queryEnd + \"'\");\n            sql = sql.replace(/\\$end/g, \"'\" + queryEnd + \"'\");\n        } else {\n            sql = sql.replace(/\\$to/g, queryEnd);\n            sql = sql.replace(/\\$end/g, queryEnd);\n        }\n        sql = sql.replace(/\\$interval/g, intervalMs);\n\n        const allVariables = this.template.getVariables()\n        for (const variable of allVariables) {\n            if (\"current\" in variable && variable.current && variable.current.value) {\n                sql = sql.replace(\"$\" + variable.name, String(variable.current.value))\n            }\n        }\n\n        return sql;\n    }\n\n    formatColumn(colFormat: string, labelName: any) {\n        let placeholders = colFormat.match(/\\{\\{(\\w+)\\}\\}/g)\n        if (!placeholders) {\n            return colFormat;\n        }\n        for (let placeholder of placeholders) {\n            // @ts-ignore\n            let field = placeholder.replaceAll('{{', '')\n            field = field.replaceAll('}}', '')\n            let value = labelName[field]\n            if (value) {\n                // @ts-ignore\n                colFormat = colFormat.replaceAll(placeholder, value)\n            }\n        }\n        return colFormat;\n    }\n\n    long2wide(recv: any, by: string[], colFormat: string) {\n        let data = recv.data;\n        let header = recv.column_meta;\n        if (_.size(by) === 0) {\n            return recv;\n        }\n\n        let name2idx = _(header).map((h, i) => [h[0], i]).fromPairs().value();\n        _.remove(by, k => !_.has(name2idx, k));\n\n        if (_.size(by) === 0) {\n            return recv;\n        }\n\n        let [colKick, colLock] = _(header).slice(1).partition(h => _.includes(by, h[0])).value();\n        let newHeader = [header[0]];\n\n        let fields = _.map(colLock, (h, i) => {\n            let colValue = _(colKick).map(col => {\n                let idx = name2idx[col[0]];\n                return _(data).map(row => row[idx]).uniq().map(v => _.fromPairs([[col[0], v]])).value();\n            }).reduce((acc, cur) => {\n                return _(acc).map(o => {\n                    return _.map(cur, n => _.extend({}, o, n))\n                }).flatten().value()\n            });\n            return {field: h, name: h[0], labels: colValue};\n        });\n\n        let ts = _(data).map(row => row[0]).orderBy().uniq().value();\n\n        // values long to wide\n        _.forEach(fields, field => {\n            let col = name2idx[field.name];\n            // @ts-ignore\n            field.labels = _(field.labels).map(label => {\n                let values = _(data).filter(row => {\n                    return _(label).map((v, f) => row[name2idx[f]] === v).reduce((acc, cur) => acc && cur)\n                }).map(row => [row[0], row[col]]).fromPairs().value();\n                if (_.size(values) > 0) {\n                    return _.extend(label, {__values__: values});\n                } else {\n                    return null;\n                }\n            }).filter().value();\n        });\n\n        // rebuild headers\n        _.forEach(fields, field => {\n            _.forEach(field.labels, label => {\n                let newField = _.cloneDeep(field.field);\n                let labelName = _(label).keys().filter(k => k !== '__values__').map(key => [key, label[key]]).fromPairs().value();\n                if (colFormat) {\n                    newField[0] = this.formatColumn(colFormat, labelName);\n                } else {\n                    newField[0] = field.name + \" \" + JSON.stringify(labelName);\n                }\n                newHeader.push(newField);\n            })\n        })\n\n        // construct new data\n        let newData = _.map(ts, t => {\n            let row = [t];\n            _.forEach(fields, field => {\n                _.forEach(field.labels, label => {\n                    row.push(_.get(label.__values__, t));\n                })\n            });\n            return row;\n        })\n\n        return {data: newData, column_meta: newHeader, rows: _.size(ts)};\n    }\n\n    groupDataByColName(dataRecv: any, query: Query, options: DataQueryRequest<Query>) {\n        if (query.formatType === \"Time series\" && query.queryType === \"SQL\") {\n            let groupBy = null;\n            if (!!query.colNameToGroup) {\n                groupBy = _.trim(query.colNameToGroup);\n            } else {\n                let m = query.sql.match(/group +by +([^()\\s,]+(,\\s*\\S+)*)\\s*[^(,)]*$/);\n                if (m) {\n                    groupBy = m[1];\n                } else {\n                    return [dataRecv];\n                }\n\n                let by = _(groupBy).split(\",\").map(s => _.trim(s)).value();\n                if (_.size(by) > 0) {\n                    return [this.long2wide(dataRecv, by, query.colNameFormatStr)];\n                } else {\n                    return [dataRecv];\n                }\n            }\n            if (!groupBy || query.colNameToGroup.length === 0) {\n                return [dataRecv];\n            }\n\n            let by = _(groupBy).split(\",\").map(s => _.trim(s)).value();\n            if (_.size(by) > 0) {\n                return [this.long2wide(dataRecv, by, query.colNameFormatStr)];\n            } else {\n                return [dataRecv];\n            }\n        }\n\n        if (!query.colNameToGroup || query.colNameToGroup.length === 0) {\n            return [dataRecv];\n        }\n\n        for (let index = 0; index < dataRecv.column_meta.length; index++) {\n            if (dataRecv.column_meta[index][0] === query.colNameToGroup) {\n                let groupData = {};\n                const data = dataRecv.data;\n                const rows = dataRecv.rows;\n                for (let rowsIndex = 0; rowsIndex < rows; rowsIndex++) {\n                    let groupColValue = data[rowsIndex][index];\n                    // @ts-ignore\n                    if (!groupData[groupColValue]) {\n                        // @ts-ignore\n                        groupData[groupColValue] = {column_meta: [], data: [], rows: 0};\n                        for (let k = 0; k < dataRecv.column_meta.length; k++) {\n                            if (k !== index) {\n                                let header = [...dataRecv.column_meta[k]];\n                                if (!(k === 0 && header[1] === 9)) {\n                                    header[0] = this.getRowAlias(query.colNameFormatStr || \"prefix_{{group_field}}\", {\n                                        colName: header[0],\n                                        groupValue: groupColValue\n                                    }, options);\n                                }\n                                // @ts-ignore\n                                groupData[groupColValue].column_meta.push(header);\n                            }\n                        }\n                    }\n                    data[rowsIndex].splice(index, 1);\n                    // @ts-ignore\n                    groupData[groupColValue].data.push(data[rowsIndex]);\n                    // @ts-ignore\n                    groupData[groupColValue].rows += 1;\n                }\n                let keys = Object.keys(groupData).sort();\n                let groupDataRet = [];\n                for (let indexKeys = 0; indexKeys < keys.length; indexKeys++) {\n                    // @ts-ignore\n                    groupDataRet.push(groupData[keys[indexKeys]]);\n                }\n                return groupDataRet;\n            }\n        }\n        return [dataRecv];\n    }\n\n    postQuery(query: Query, response: DataQueryResponse, options: DataQueryRequest<Query>) {\n        // @ts-ignore\n        if (!response || !response.data || !response.data.data) {\n            return [];\n        }\n        let dataGroupList = this.groupDataByColName(response.data, query, options);\n        const result = [];\n        const aliasList = (query.alias || '').split(',') || [];\n        let aliasListIndex = 0;\n        for (let index = 0; index < dataGroupList.length; index++) {\n            const headers = dataGroupList[index].column_meta;\n            const data = dataGroupList[index].data;\n            const rows = dataGroupList[index].rows;\n            const cols = headers.length;\n            if (!!headers && !!headers[0] && !!headers[0][1]) {\n                const timeSeriesIndex = headers.findIndex((item: number[]) => item[1] === 9);\n                if (timeSeriesIndex === -1 || query.formatType === \"Table\") {\n                    result.push({\n                        columns: headers.map((item: any[]) => ({text: item[0]})),\n                        rows: data,\n                        type: 'table',\n                        refId: query.refId,\n                        target: this.getRowAlias(aliasList[0], {col: headers[0][0]}, options),\n                        hide: !!query.hide\n                    });\n                } else {\n                    for (let i = 0; i < cols; i++) {\n                        if (i === timeSeriesIndex) {\n                            continue;\n                        }\n                        let aliasRow = headers[i][0];\n                        if (aliasListIndex < aliasList.length) {\n                            aliasRow = this.getRowAlias(aliasList[aliasListIndex], {col: aliasRow}, options);\n                            aliasListIndex++;\n                        }\n                        let resultItem = {datapoints: [], refId: query.refId, target: aliasRow, hide: !!query.hide};\n                        for (let k = 0; k < rows; k++) {\n                            let timeShiftDuration = moment.duration();\n                            if (query.timeShiftPeriod && query.timeShiftUnit) {\n                                // @ts-ignore\n                                timeShiftDuration = moment.duration(query.timeShiftPeriod, query.timeShiftUnit);\n                            }\n                            // @ts-ignore\n                            resultItem.datapoints.push([data[k][i], moment.utc(data[k][timeSeriesIndex]).tz(this.timezone).add(timeShiftDuration).valueOf()]);\n                        }\n                        result.push(resultItem);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    arithmeticQueries(data: any, options: DataQueryRequest<Query>) {\n        const arithmeticQueries = options.targets.filter((target) => target.queryType === \"Arithmetic\" && target.expression && !(target.hide === true));\n        if (arithmeticQueries.length === 0) {\n            return data;\n        }\n        let targetRefIds = data.flatMap((item: any[]) => item.flatMap((field, index) => (index === 0 ? [field.refId, field.refId + '__' + index] : [field.refId + '__' + index])));\n        let targetResults = {};\n        data.forEach((item: any[]) => {\n            item.forEach((field, index) => {\n                field.datapoints.forEach((datapoint: any[]) => {\n                    // @ts-ignore\n                    targetResults[datapoint[1]] = targetResults[datapoint[1]] || [];\n                    if (index === 0) {\n                        // @ts-ignore\n                        targetResults[datapoint[1]].push(datapoint[0]);\n                    }\n                    // @ts-ignore\n                    targetResults[datapoint[1]].push(datapoint[0]);\n                })\n            })\n        });\n\n        try {\n            let dataArithmetic = arithmeticQueries.map(target => {\n                let functionArgs = targetRefIds.join(', ');\n                let functionBody = \"return (\" + target.expression + \");\";\n                let expressionFunction = new Function(functionArgs, functionBody);\n                let result: any[] | null = null;\n                const aliasList = (target.alias || '').split(',').map(alias => this.getRowAlias(alias, {col: target.refId}, options));\n\n                const aliasListResult: any[] = [];\n                Object.entries(targetResults).forEach(args => {\n                    // @ts-ignore\n                    if (args[1].length === targetRefIds.length) {\n                        try {\n                            result = expressionFunction.apply(this, args[1]);\n                        } catch (error) {\n                            throw error\n                        }\n                    }\n                    if (!Array.isArray(result)) {\n                        result = [result];\n                    }\n                    result.forEach((item, index) => {\n                        aliasListResult[index] = aliasListResult[index] || {\n                            datapoints: [],\n                            refId: target.refId,\n                            target: aliasList[index] || (target.refId + '__' + index),\n                            hide: !!target.hide\n                        };\n                        aliasListResult[index].datapoints.push([item, parseInt(args[0], 10)]);\n                    })\n                });\n                return aliasListResult;\n            });\n            return data.concat(dataArithmetic);\n        } catch (err) {\n            // @ts-ignore\n            throw new Error(err);\n        }\n    }\n\n    generateTimeshift(options: DataQueryRequest<Query>, target: Query) {\n        let alias = target.alias || \"\";\n        alias = this.template.replace(alias, options.scopedVars, 'csv');\n        return alias;\n    }\n\n    generateAlias(options: DataQueryRequest<Query>, target: Query) {\n        let alias = target.alias || \"\";\n        alias = this.template.replace(alias, options.scopedVars, 'csv');\n        return alias;\n    }\n}\n","import {ChangeEvent, useCallback} from 'react'\nimport type {SecureJsonData} from 'types'\nimport type {EditorProps} from './types'\n\nexport function useChangeSecureOptions(props: EditorProps, propertyName: keyof SecureJsonData): (event: ChangeEvent<HTMLInputElement>) => void {\n    const {onOptionsChange, options} = props;\n\n    return useCallback((event: ChangeEvent<HTMLInputElement>) => {\n            if (propertyName === 'url') {\n                options.url = event.target.value\n            }\n\n            if (propertyName === 'user') {\n                options.user = event.target.value\n                options.basicAuthUser = event.target.value\n            }\n\n            if (propertyName === 'user' && options.secureJsonData?.password) {\n                options.basicAuth = true\n                options.secureJsonData.basicAuth = encode(event.target.value + \":\" + options.secureJsonData.password)\n            }\n\n            if (propertyName === \"password\" && options.secureJsonData?.user) {\n                options.basicAuth = true\n                options.secureJsonData.basicAuth = encode(options.secureJsonData.user + \":\" + event.target.value)\n            }\n\n            if (propertyName === 'password' && options.secureJsonData) {\n                options.secureJsonData.basicAuthPassword = event.target.value\n            }\n\n            onOptionsChange({\n                ...options,\n                secureJsonData: {\n                    ...options.secureJsonData,\n                    [propertyName]: event.target.value,\n                },\n            })\n        },\n        [onOptionsChange, options, propertyName]\n    );\n}\n\nexport function useChangeUser(props: EditorProps): (event: ChangeEvent<HTMLInputElement>) => void {\n    const {onOptionsChange, options} = props;\n\n    return useCallback((event: ChangeEvent<HTMLInputElement>) => {\n            onOptionsChange({\n                ...options,\n                user: event.target.value,\n                secureJsonData: {\n                    ...options.secureJsonData,\n                    user: event.target.value,\n                },\n            })\n\n            if (options.secureJsonData?.password) {\n                options.secureJsonData.basicAuth = encode(event.target.value + ':'\n                    + options.secureJsonData.password)\n            }\n        },\n        [onOptionsChange, options]\n    );\n}\n\nexport function useChangePassword(props: EditorProps): (event: ChangeEvent<HTMLInputElement>) => void {\n    const {onOptionsChange, options} = props;\n\n    return useCallback((event: ChangeEvent<HTMLInputElement>) => {\n            onOptionsChange({\n                ...options,\n                secureJsonData: {\n                    ...options.secureJsonData,\n                    password: event.target.value,\n                },\n            })\n            if (options.secureJsonData?.password) {\n                options.secureJsonData.basicAuth = encode(options.secureJsonData.user + ':'\n                    + event.target.value)\n            }\n        },\n        [onOptionsChange, options]\n    );\n}\n\nfunction encode(input: string): string {\n    const _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    let output = \"\";\n    let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    let i = 0;\n    while (i < input.length) {\n        chr1 = input.charCodeAt(i++);\n        chr2 = input.charCodeAt(i++);\n        chr3 = input.charCodeAt(i++);\n        enc1 = chr1 >> 2;\n        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n        enc4 = chr3 & 63;\n        if (isNaN(chr2)) {\n            enc3 = enc4 = 64;\n        } else if (isNaN(chr3)) {\n            enc4 = 64;\n        }\n        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n    }\n\n    return output;\n}\n","import {useCallback} from 'react'\nimport type {SecureJsonData} from 'types'\nimport type {EditorProps} from './types'\n\nexport function useResetSecureOptions(props: EditorProps, propertyName: keyof SecureJsonData): () => void {\n    const {onOptionsChange, options} = props;\n\n    return useCallback(() => {\n        onOptionsChange({\n            ...options,\n            secureJsonFields: {\n                ...options.secureJsonFields,\n                [propertyName]: false,\n            },\n            secureJsonData: {\n                ...options.secureJsonData,\n                [propertyName]: '',\n            },\n        });\n    }, [onOptionsChange, options, propertyName]);\n}\n","import React, {ReactElement} from 'react'\nimport {FieldSet, LegacyForms} from '@grafana/ui'\nimport type {EditorProps} from './types'\nimport {useChangeSecureOptions} from './useChangeSecureOptions'\nimport {useResetSecureOptions} from './useResetSecureOptions'\n\nconst {SecretFormField, FormField} = LegacyForms;\n\nexport function ConfigEditor(props: EditorProps): ReactElement {\n    const {secureJsonData} = props.options;\n\n    const onChangeUrl = useChangeSecureOptions(props, 'url')\n    const onChangeUser = useChangeSecureOptions(props, 'user')\n    const onChangePassword = useChangeSecureOptions(props, 'password')\n    const onResetPassword = useResetSecureOptions(props, 'password')\n    const onChangeToken = useChangeSecureOptions(props, 'token')\n    const onResetToken = useResetSecureOptions(props, 'token')\n\n    return (\n        <div className='gf-form-group'>\n            <FieldSet label=\"TDengine Connection\">\n                <div className='gf-form max-width-30'>\n                    <FormField label='Host'\n                               labelWidth={7}\n                               inputWidth={23}\n                        // tooltip=\"datasource's host\"\n                               onChange={onChangeUrl}\n                               onBlur={onChangeUrl}\n                               value={secureJsonData?.url || ''}\n                               placeholder='http://localhost:6041'\n                    />\n                </div>\n                <div className='gf-form-inline'>\n                    <div className='gf-form max-width-15'>\n                        <FormField label='User'\n                                   labelWidth={7}\n                                   inputWidth={8}\n                            // tooltip=\"datasource's username\"\n                                   onChange={onChangeUser}\n                                   onBlur={onChangeUser}\n                                   value={secureJsonData?.user || ''}\n                        />\n                    </div>\n                    <div className='gf-form max-width-15'>\n                        <SecretFormField isConfigured={false}\n                            // isConfigured={(secureJsonFields && secureJsonFields.password) as boolean}\n                                         value={secureJsonData?.password || ''}\n                                         label='Password'\n                            // tooltip=\"datasource's token\"\n                                         labelWidth={7}\n                                         inputWidth={8}\n                                         onReset={onResetPassword}\n                                         onChange={onChangePassword}\n                                         onBlur={onChangePassword}\n                        />\n                    </div>\n                </div>\n                <div className='gf-form max-width-30'>\n                    <SecretFormField isConfigured={false}\n                        // isConfigured={(secureJsonFields && secureJsonFields.password) as boolean}\n                                     value={secureJsonData?.token || ''}\n                                     label='Cloud Token'\n                        // tooltip=\"datasource's cloud token\"\n                                     placeholder=''\n                                     labelWidth={7}\n                                     inputWidth={23}\n                                     onReset={onResetToken}\n                                     onChange={onChangeToken}\n                                     onBlur={onChangeToken}\n                    />\n                </div>\n            </FieldSet>\n        </div>\n    )\n}\n","import {useMemo} from 'react'\nimport type {SelectableValue} from '@grafana/data'\n\nexport function useSelectableValue(value: string, label?: string): SelectableValue<string> | undefined {\n    return useMemo(() => {\n        if (!value) {\n            return;\n        }\n\n        return {\n            label: label ?? value,\n            value: value,\n        };\n    }, [label, value]);\n}\n","import {useCallback} from 'react'\nimport type {SelectableValue} from '@grafana/data'\nimport type {ChangeOptions, Query} from '../../types'\nimport type {EditorProps} from './types'\n\ntype OnChangeType = (value: SelectableValue<string>) => void\n\nexport function useChangeSelectableValue(props: EditorProps, options: ChangeOptions<Query>): OnChangeType {\n    const {onChange, onRunQuery, query} = props;\n    const {propertyName, runQuery} = options;\n\n    return useCallback(\n        (selectable: SelectableValue<string>) => {\n            if (!selectable?.value) {\n                return;\n            }\n\n            onChange({\n                ...query,\n                [propertyName]: selectable.value,\n            })\n\n            if (runQuery) {\n                onRunQuery();\n            }\n        },\n        [onChange, onRunQuery, query, propertyName, runQuery]\n    );\n}\n","import {ChangeEvent, useCallback} from 'react'\nimport type {ChangeOptions, Query} from '../../types'\nimport type {EditorProps} from './types'\n\nexport function useChangeString(props: EditorProps, options: ChangeOptions<Query>): (value: string) => void {\n    const {onChange, onRunQuery, query} = props;\n    const {propertyName, runQuery} = options;\n\n    return useCallback(\n        (value: string) => {\n            if (!value) {\n                return;\n            }\n\n            onChange({\n                ...query,\n                [propertyName]: value,\n            });\n\n            if (runQuery) {\n                onRunQuery();\n            }\n        },\n        [onChange, onRunQuery, query, propertyName, runQuery]\n    );\n}\n\nexport function useChangeOptions(props: EditorProps, options: ChangeOptions<Query>): (value: ChangeEvent<HTMLInputElement>) => void {\n    const {onChange, onRunQuery, query} = props;\n    const {propertyName, runQuery} = options;\n\n    return useCallback(\n        (value: ChangeEvent<HTMLInputElement>) => {\n            if (!value) {\n                return;\n            }\n\n            onChange({\n                ...query,\n                [propertyName]: value.target.value,\n            });\n\n            if (runQuery) {\n                onRunQuery();\n            }\n        },\n        [onChange, onRunQuery, query, propertyName, runQuery]\n    );\n}\n","import {DataSourcePlugin} from '@grafana/data'\nimport {DataSource} from './datasource';\nimport {ConfigEditor} from './components/ConfigEditor/ConfigEditor'\nimport {QueryEditor} from './components/QueryEditor/QueryEditor'\nimport {DataSourceOptions, Query} from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, Query, DataSourceOptions>(DataSource)\n    .setConfigEditor(ConfigEditor)\n    .setQueryEditor(QueryEditor)\n","import React, {ReactElement, useState} from 'react'\nimport {Collapse, InlineField, InlineFieldRow, Input, Select} from '@grafana/ui'\nimport {useSelectableValue} from './useSelectableValue'\nimport {useChangeSelectableValue} from './useChangeSelectableValue'\nimport type {EditorProps} from './types'\nimport {useChangeOptions} from './useChangeString'\n\nexport function QueryEditor(props: EditorProps): ReactElement {\n    const {query} = props;\n    if (!query.queryType) {\n        query.queryType = \"SQL\"\n    }\n    if (!query.formatType) {\n        query.formatType = \"Time series\"\n    }\n\n    const onChangeQueryType = useChangeSelectableValue(props, {propertyName: 'queryType', runQuery: true})\n    const onChangeAlias = useChangeOptions(props, {propertyName: 'alias', runQuery: false})\n    const onblurAlias = useChangeOptions(props, {propertyName: 'alias', runQuery: true})\n    const onChangeSql = useChangeOptions(props, {propertyName: 'sql', runQuery: false})\n    const onblurSql = useChangeOptions(props, {propertyName: 'sql', runQuery: true})\n    const onchangeTimeShiftPeriod = useChangeOptions(props, {propertyName: 'timeShiftPeriod', runQuery: false})\n    const onchangeTimeShiftUnit = useChangeSelectableValue(props, {propertyName: 'timeShiftUnit', runQuery: false})\n    const onChangeFormatType = useChangeSelectableValue(props, {propertyName: 'formatType', runQuery: true})\n    const onchangeGroupColumns = useChangeOptions(props, {propertyName: 'colNameToGroup', runQuery: false})\n    const onblurGroupColumns = useChangeOptions(props, {propertyName: 'colNameToGroup', runQuery: true})\n    const onchangeFormatStr = useChangeOptions(props, {propertyName: 'colNameFormatStr', runQuery: false})\n    const onblurFormatStr = useChangeOptions(props, {propertyName: 'colNameFormatStr', runQuery: true})\n\n    const ShowGeneratedSql = () => {\n        const [isOpen, setIsOpen] = useState<boolean>(false)\n        let sql = props.datasource.getGenerateSql()\n\n        return (\n            <Collapse\n                label='Generate SQL'\n                className='gf-form-label width-10'\n                collapsible={true}\n                isOpen={isOpen}\n                onToggle={() =>\n                    setIsOpen(!isOpen)\n                }\n            >\n                <p>{sql}</p>\n            </Collapse>\n        )\n    }\n    const ShowHelpCollapse = () => {\n        const [isOpen, setIsOpen] = useState<boolean>(false)\n        let help = 'Use any SQL that can return Resultset such as:</br>' +\n            '- [[timestamp1, value1], [timestamp2, value2], ... ]</br>' +\n            '</br>' +\n            'Macros:</br>' +\n            '- $from -&gt; start timestamp of panel</br>' +\n            '- $to -&gt; stop timestamp of panel</br>' +\n            '- $interval -&gt; interval of panel</br>' +\n            '</br>' +\n            'Example of SQL:</br>' +\n            '&nbsp;&nbsp;SELECT count(*)</br> FROM db.table WHERE ts > $from and ts < $to INTERVAL ($interval)'\n\n        return (\n            <Collapse\n                label='Show Help'\n                className='gf-form-label width-10'\n                collapsible={true}\n                isOpen={isOpen}\n                onToggle={() =>\n                    setIsOpen(!isOpen)\n                }\n            >\n                <p dangerouslySetInnerHTML={{__html: help}}></p>\n            </Collapse>\n        )\n    }\n\n    const queryTypeOptions = [\n        {label: 'SQL', value: 'SQL'},\n        {label: 'Arithmetic', value: 'Arithmetic'}\n    ]\n    const formatTypeOptions = [\n        {label: 'Time series', value: 'Time series'},\n        {label: 'Table', value: 'Table'}\n    ]\n\n    return (\n        <div className='gf-form-group'>\n            <InlineFieldRow>\n                <InlineField id=\"queryType\" label='Query Type' labelWidth={20}>\n                    <Select\n                        inputId={\"queryType\"}\n                        width={20}\n                        options={queryTypeOptions}\n                        defaultValue={queryTypeOptions[0]}\n                        onChange={onChangeQueryType}\n                        value={useSelectableValue(query.queryType)}\n                    />\n                </InlineField>\n                <InlineField label='Alias By' labelWidth={20}>\n                    <Input\n                        width={20}\n                        onChange={onChangeAlias}\n                        onBlur={onblurAlias}\n                        value={query.alias ?? ''}\n                        placeholder={\"Naming pattern: a,{{'{{'}}col}}\"}\n                    />\n                </InlineField>\n                <div className=\"gf-form gf-form--grow\">\n                    <div className=\"gf-form-label gf-form-label--grow\"></div>\n                </div>\n            </InlineFieldRow>\n\n            <InlineFieldRow>\n                <InlineField label='Input Sql' labelWidth={20} tooltip='' grow>\n                    <Input\n                        style={{\"width\": \"100%; min-width: 800px;\"}}\n                        width={100}\n                        className={'min-width-30 max-width-100 gf-form--grow'}\n                        placeholder={'select avg(mem_system)  from log.dnodes_info where ts >= $from and ts < $to interval($interval)'}\n                        onChange={onChangeSql}\n                        onBlur={onblurSql}\n                        value={query.sql}\n                    />\n                </InlineField>\n            </InlineFieldRow>\n\n            <InlineFieldRow>\n                <ShowGeneratedSql/>\n                <ShowHelpCollapse/>\n                <InlineField id=\"formatType\" label='Format new col' labelWidth={20}>\n                    <Select\n                        inputId={\"formatType\"}\n                        width={20}\n                        options={formatTypeOptions}\n                        defaultValue={formatTypeOptions[0]}\n                        onChange={onChangeFormatType}\n                        value={useSelectableValue(query.formatType)}\n                    />\n                </InlineField>\n            </InlineFieldRow>\n\n            <InlineFieldRow>\n                <InlineField label='Time Shift' labelWidth={20} tooltip=''>\n                    <Input\n                        width={20}\n                        onChange={onchangeTimeShiftPeriod}\n                        onBlur={onchangeTimeShiftPeriod}\n                        value={query.timeShiftPeriod ?? ''}\n                        placeholder={'period number like: 1'}\n                    />\n                </InlineField>\n                <InlineField label='Time Shift Unit' labelWidth={20} tooltip=''>\n                    <Select\n                        width={20}\n                        options={[{label: 'seconds'}, {label: 'minutes'}, {label: 'hours'}, {label: 'days'},\n                            {label: 'weeks'}, {label: 'months'}]}\n                        onChange={onchangeTimeShiftUnit}\n                        value={useSelectableValue(query.timeShiftUnit)}\n                    />\n                </InlineField>\n                <div className=\"gf-form gf-form--grow\">\n                    <div className=\"gf-form-label gf-form-label--grow\"></div>\n                </div>\n            </InlineFieldRow>\n\n            <InlineFieldRow>\n                <InlineField label='Group By Column(s)' labelWidth={20} tooltip=''>\n                    <Input\n                        width={20}\n                        onChange={onchangeGroupColumns}\n                        onBlur={onblurGroupColumns}\n                        value={query.colNameToGroup ?? ''}\n                    />\n                </InlineField>\n                <InlineField label='Group By Format' labelWidth={20} tooltip=''>\n                    <Input\n                        width={20}\n                        onChange={onchangeFormatStr}\n                        onBlur={onblurFormatStr}\n                        value={query.colNameFormatStr ?? ''}\n                        placeholder={'prefix_{{group_field}}_suffix'}\n                    />\n                </InlineField>\n                <div className=\"gf-form gf-form--grow\">\n                    <div className=\"gf-form-label gf-form-label--grow\"></div>\n                </div>\n            </InlineFieldRow>\n        </div>\n    );\n}\n\n\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__980__","__WEBPACK_EXTERNAL_MODULE__283__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","DataSource","DataSourceApi","query","options","timezone","this","Intl","DateTimeFormat","resolvedOptions","timeZone","targets","filter","target","queryType","sql","hide","length","Promise","all","map","generateSql","lastGeneratedSql","request","then","res","postQuery","data","arithmeticQueries","flat","err","console","log","desc","Error","testDatasource","response","status","_","message","title","metricFindQuery","column_meta","values","text_index","string_value","value_type","toUpperCase","i","text","push","uniqBy","getGenerateSql","serverVersion","backendSrv","datasourceRequest","url","baseUrl","method","startsWith","querySql","querySqlUtc","catch","resolve","reject","result","convertResult","src","dist","code","rows","forEach","element","getRowAlias","alias","replaceObject","replace","match","g1","g2","g3","queryStart","queryEnd","intervalMs","range","from","toISOString","to","toString","template","scopedVars","indexOf","allVariables","getVariables","variable","current","name","String","formatColumn","colFormat","labelName","placeholders","placeholder","field","replaceAll","long2wide","recv","by","header","name2idx","h","fromPairs","k","colKick","colLock","slice","partition","newHeader","fields","colValue","col","idx","row","uniq","v","reduce","acc","cur","flatten","labels","ts","orderBy","label","f","__values__","newField","keys","JSON","stringify","t","groupDataByColName","dataRecv","formatType","groupBy","colNameToGroup","m","split","s","colNameFormatStr","index","groupData","rowsIndex","groupColValue","colName","groupValue","splice","sort","groupDataRet","indexKeys","dataGroupList","aliasList","aliasListIndex","headers","cols","timeSeriesIndex","findIndex","item","columns","type","refId","aliasRow","resultItem","datapoints","timeShiftDuration","moment","timeShiftPeriod","timeShiftUnit","tz","add","valueOf","expression","targetRefIds","flatMap","targetResults","datapoint","dataArithmetic","functionArgs","join","functionBody","expressionFunction","Function","aliasListResult","entries","args","apply","error","Array","isArray","parseInt","concat","generateTimeshift","generateAlias","constructor","instanceSettings","super","getBackendSrv","getTemplateSrv","useChangeSecureOptions","props","propertyName","onOptionsChange","useCallback","event","user","basicAuthUser","secureJsonData","password","basicAuth","encode","basicAuthPassword","input","_keyStr","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","charCodeAt","isNaN","charAt","useResetSecureOptions","secureJsonFields","SecretFormField","FormField","LegacyForms","useSelectableValue","useMemo","useChangeSelectableValue","onChange","onRunQuery","runQuery","selectable","useChangeOptions","plugin","DataSourcePlugin","setConfigEditor","onChangeUrl","onChangeUser","onChangePassword","onResetPassword","onChangeToken","onResetToken","div","className","FieldSet","labelWidth","inputWidth","onBlur","isConfigured","onReset","token","setQueryEditor","onChangeQueryType","onChangeAlias","onblurAlias","onChangeSql","onblurSql","onchangeTimeShiftPeriod","onchangeTimeShiftUnit","onChangeFormatType","onchangeGroupColumns","onblurGroupColumns","onchangeFormatStr","onblurFormatStr","ShowGeneratedSql","isOpen","setIsOpen","useState","datasource","Collapse","collapsible","onToggle","p","ShowHelpCollapse","dangerouslySetInnerHTML","__html","queryTypeOptions","formatTypeOptions","InlineFieldRow","InlineField","id","Select","inputId","width","defaultValue","Input","tooltip","grow","style"],"sourceRoot":""}